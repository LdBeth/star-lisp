%!PS-Adobe-3.0
%%Creator: groff version 1.03
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Italic
%%+ font Courier
%%+ font Times-Bold
%%+ font Times-BoldItalic
%%+ font Courier-Oblique
%%DocumentSuppliedResources: procset grops 1.03 0
%%Pages: 85
%%PageOrder: Ascend
%%Orientation: Portrait
%%EndComments
%%BeginProlog
%%BeginResource: procset grops 1.03 0

/setpacking where {
	pop
	currentpacking
	true setpacking
} if

/grops 120 dict dup begin 

% The ASCII code of the space character.
/SC 32 def

/A /show load def
/B { 0 SC 3 -1 roll widthshow } bind def
/C { 0 exch ashow } bind def
/D { 0 exch 0 SC 5 2 roll awidthshow } bind def
/E { 0 rmoveto show } bind def
/F { 0 rmoveto 0 SC 3 -1 roll widthshow } bind def
/G { 0 rmoveto 0 exch ashow } bind def
/H { 0 rmoveto 0 exch 0 SC 5 2 roll awidthshow } bind def
/I { 0 exch rmoveto show } bind def
/J { 0 exch rmoveto 0 SC 3 -1 roll widthshow } bind def
/K { 0 exch rmoveto 0 exch ashow } bind def
/L { 0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow } bind def
/M { rmoveto show } bind def
/N { rmoveto 0 SC 3 -1 roll widthshow } bind def
/O { rmoveto 0 exch ashow } bind def
/P { rmoveto 0 exch 0 SC 5 2 roll awidthshow } bind def
/Q { moveto show } bind def 
/R { moveto 0 SC 3 -1 roll widthshow } bind def
/S { moveto 0 exch ashow } bind def
/T { moveto 0 exch 0 SC 5 2 roll awidthshow } bind def

% name size font SF -

/SF {
	findfont exch
	[ exch dup 0 exch 0 exch neg 0 0 ] makefont
	dup setfont
	[ exch /setfont cvx ] cvx bind def
} bind def

% name a c d font MF -

/MF {
	findfont
	[ 5 2 roll
	0 3 1 roll % b
	neg 0 0 ] makefont
	dup setfont
	[ exch /setfont cvx ] cvx bind def
} bind def

/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def

% BP -

/BP {
	/level0 save def
	1 setlinecap
	1 setlinejoin
	72 RES div dup scale
	LS {
		90 rotate
	} {
		0 PL translate
	} ifelse
	1 -1 scale
} bind def

/EP {
	level0 restore
	showpage
} bind def


% centerx centery radius startangle endangle DA -

/DA {
	newpath arcn stroke
} bind def

% x y SN - x' y'
% round a position to nearest (pixel + (.25,.25))

/SN {
	transform 
	.25 sub exch .25 sub exch
	round .25 add exch round .25 add exch
	itransform
} bind def
	
% endx endy startx starty DL -
% we round the endpoints of the line, so that parallel horizontal
% and vertical lines will appear even

/DL {
	SN
	moveto
	SN
	lineto stroke
} bind def

% centerx centery radius DC -

/DC {
	newpath 0 360 arc closepath
} bind def


/TM matrix def

%  width height centerx centery DE -

/DE {
	TM currentmatrix pop
	translate scale newpath 0 0 .5 0 360 arc closepath
	TM setmatrix
} bind def

% these are for splines

/RC /rcurveto load def
/RL /rlineto load def
/ST /stroke load def
/MT /moveto load def
/CL /closepath load def

% fill the last path

% amount FL -

/FL {
	currentgray exch setgray fill setgray
} bind def

% fill with the ``current color''

/BL /fill load def

/LW /setlinewidth load def
% new_font_name encoding_vector old_font_name RE -

/RE {
	findfont
	dup maxlength dict begin
	{
		1 index /FID ne { def } { pop pop } ifelse
	} forall
	/Encoding exch def
	dup /FontName exch def
	currentdict end definefont pop
} bind def

/DEFS 0 def

% hpos vpos EBEGIN -

/EBEGIN {
	moveto
	DEFS begin
} bind def

/EEND /end load def

/CNT 0 def
/level1 0 def

% llx lly newwid wid newht ht newllx newlly PBEGIN -

/PBEGIN {
	/level1 save def
	translate
	div 3 1 roll div exch scale
	neg exch neg exch translate
	% set the graphics state to default values
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {
		pop
		false setstrokeadjust
	} if
	/setoverprint where {
		pop
		false setoverprint
	} if
	newpath
	/CNT countdictstack def
	/showpage {} def
} bind def

/PEND {
	clear
	countdictstack CNT sub { end } repeat
	level1 restore
} bind def

end def

/setpacking where {
	pop
	setpacking
} if
%%EndResource
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Italic
%%IncludeResource: font Courier
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-BoldItalic
%%IncludeResource: font Courier-Oblique
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72 def/PL
841.89 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron/scaron
/zcaron/Ydieresis/trademark/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/space
/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright/parenleft
/parenright/asterisk/plus/comma/hyphen/period/slash/zero/one/two/three/four
/five/six/seven/eight/nine/colon/semicolon/less/equal/greater/question/at/A/B/C
/D/E/F/G/H/I/J/K/L/M/N/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash
/bracketright/circumflex/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q
/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase
/guillemotleft/guillemotright/bullet/florin/fraction/perthousand/dagger
/daggerdbl/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen/brokenbar
/section/dieresis/copyright/ordfeminine/guilsinglleft/logicalnot/minus
/registered/macron/degree/plusminus/twosuperior/threesuperior/acute/mu
/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guilsinglright
/onequarter/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex/Atilde
/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute
/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve
/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis]def/Courier-Oblique@0 ENC0/Courier-Oblique RE
/Times-BoldItalic@0 ENC0/Times-BoldItalic RE/Times-Bold@0 ENC0/Times-Bold RE
/Courier@0 ENC0/Courier RE/Times-Italic@0 ENC0/Times-Italic RE/Times-Roman@0
ENC0/Times-Roman RE
%%EndProlog
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 16/Times-Roman@0 SF(The CM5 *Lisp Course)230.224 90 Q/F1 14/Times-Italic@0
SF(Zdzislaw Meglicki)254.858 126 Q(Centr)189.674 142 Q 3.5(ef)-.518 G
(or Information Science Resear)234.656 142 Q(ch,)-.518 E
(The Australian National University)205.655 158 Q(,)-.77 E
(18th & 19th January 1994)231.723 174 Q/F2 12/Times-Roman@0 SF 1.9
(These notes were prepared with Andrew)126 206 R/F3 12/Courier@0 SF(ez)4.9 E F2
4.899(,L)C 1.899(ucid Common Lisp, and)364.299 206 R .868
(with the Connection Machine CM5 *Lisp F7600 system on the computer)126 220 R
1.195
(facilities of the Centre for Information Science Research, The Australian)126
234 R .814(National University)126 248 R 3.814(.T)-.78 G .814
(he notes are available in the)235.172 248 R F3(ez)384.702 248 Q F2 .814
(format via)3.814 F F3(ftp-)3.814 E(anonymous)126 262 Q F2(from)230.384 262 Q
F3(arp.anu.edu.au)293.296 262 Q F2 39.584(.D)C(irectory:)445.344 262 Q F3
(~ftp/ARP/papers/starlisp)126 276 Q F2(.)A F0(Lesson 1)277.336 304 Q
(Introduction)266.448 322 Q/F4 12/Times-Bold@0 SF(Basic Common Lisp literatur)
75 358 Q(e)-.216 E F2 2.137(1\) `)90 386 R(`Lisp')-.888 E 2.137
(', 3rd Edition, Patrick Henry W)-.888 F 2.137
(inston \(MIT\) and Berthold Klaus Paul Horn)-.48 F(\(MIT\), Addison-W)126 400
Q(esley Publishing Company)-.96 E 3(,1)-.78 G(989, ISBN 0-201-08319-1)356.916
400 Q .521(2\) `)90 414 R .521
(`Structure and Interpretation of Computer Programs')-.888 F .521
(', Harold Abelson \(MIT\), Gerald)-.888 F 2.269
(Jay Sussman \(MIT\), Julie Sussman \(MIT\), The MIT Press, Eleventh Printing,)
126 428 R
(1990, ISBN 0-262-01077-1 \(MIT Press\), ISBN 0-07-000-422-6 \(McGraw-Hill\))
126 442 Q 2.429(3\) `)90 456 R 2.429(`Common Lisp The Language')-.888 F 5.429
(', 2nd)-.888 F 2.429(Edition \(CLtL2\), Guy L. Steele Jr)5.429 F 5.429(.\()
-.66 G(TMC\),)489 456 Q(Digital Press, 1990, ISBN 1-55558-041-6)126 470 Q F4
(What is Common Lisp used for)75 498 Q 3(,e)-1.104 G(xamples)245.568 498 Q F2
2.88(1\) Hubble \(Space\) T)90 526 R 2.88
(elescope scheduling software \(developed with Allegro Common)-.84 F(Lisp\),)
126 540 Q 6.552(2\) `)90 554 R(`Cortex')-.888 E 6.552
(', expert system for predicting properties of chemicals in various)-.888 F
6.151(circumstances developed by Molecular Knowledge Systems with Allegro)126
568 R(Common Lisp,)126 582 Q(3\) Development of MS W)90 596 Q
(indows applications,)-.48 E
(4\) Symbolic manipulation programs, e.g., Macsyma,)90 610 Q
(5\) Automated reasoning systems, e.g., NQTHM by Boyer and Moore,)90 624 Q
(6\) Numerical aerodynamic tunnel developed by Lockheed with *Lisp on the CM2,)
90 638 Q
(7\) Robot control software developed by MIT AI Labs with *Lisp on the CM2,)90
652 Q/F5 12/Times-BoldItalic@0 SF
(8\) Software prototyping - both numerical and AI)90 666 Q EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-2-)296.004 50 S/F1 12/Times-Bold@0 SF
(Lisp on the Connection Machine)75 86 Q F0(1\) Originally built by MIT researc\
hers as a massively parallel machine for AI,)90 114 Q
(2\) Initially *Lisp was the only high level CM2 language available,)90 128 Q
(3\) CM2 and CM5 are used at MIT AI labs for robot control,)90 142 Q 2.427(4\)\
 Lockheed was one of the \214rst companies to make use of the CM2 for numerica\
l)90 156 R(applications, their software was developed under *Lisp,)126 170 Q
.34(5\) The University of Maryland developed an enemy ship recognition softwar\
e for the US)90 184 R(Navy using *Lisp on the CM2,)126 198 Q
(6\) *Lisp is still the only interactive prototyping environment available on)
90 212 Q(the CM5)6 E F1(Pr)75 240 Q(ototyping versus pr)-.216 E
(oduction code development)-.216 E F0
(1\) The role of experimentation while developing dif)90 268 Q
(\214cult algorithms)-.216 E .711(2\) Experimentation is greatly hindered when\
 working with non-interactive programming)90 282 R(environments:)126 296 Q
(edit)126 310 Q(compile)162 324 Q(run)198 338 Q(invoke external debugger)234
352 Q(re-edit)126 366 Q(re-compile)162 380 Q(re-run)198 394 Q
(re-invoke external debugger)234 408 Q(...)126 422 Q 2.201(3\) *Lisp codes can\
 be compiled after the prototyping stage. Because compiled codes)90 436 R .567
(invoke basic CM-functions on the machine level, they should run as fast as CM\
F)126 450 R(or C* codes.)126 464 Q F1 -.66(Wo)75 492 S
(rking with Epoch and Lisp).66 E F0
(1\) Interactive programming environments such as Lisp or Prolog require buf)90
520 Q(fering for)-.216 E(automatic formatting)126 534 Q(saving the worksheet)
126 548 Q(editing the worksheet)126 562 Q
(2\) Emacs and Epoch are traditionally used for this purpose)90 576 Q 1.677
(3\) Epoch knows better how to work with X1)90 590 R 4.678(1t)-.444 G 1.678
(han Emacs. The new emacs-19 is still)330.96 590 R(dangerously buggy)126 604 Q
1.836(4\) The usual way to work with Lisp through Epoch is to have two windows\
: one for)90 618 R 2.722
(worksheet editing and the other one for talking to Lisp. Lisp clauses can be)
126 632 R 2.117
(selected in the worksheet window and transferred in various ways to the Lisp)
126 646 R(window)126 660 Q 4.982(.T)-.78 G 1.982
(ext can be entered in Lisp window directly)178.358 660 R 4.982(.I)-.78 G 4.982
(tw)408.39 660 S 1.982(ill be automatically)425.372 660 R 4.204
(formatted by Epoch during insertion showing logical structure of typed in)126
674 R(programs.)126 688 Q EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-3-)296.004 50 S/F1 12/Times-Bold@0 SF
(Interactive session with Epoch)75 86 Q F0(1\) Login on the system)90 114 Q
(2\) Select Epoch from the root menu)90 128 Q F1(Conversing with Epoch Lisp)75
156 Q F0 .053(When Epoch is brought up without any ar)90 184 R .054
(guments, it provides a window marked ")-.216 F/F2 12/Courier@0 SF(\(Lisp)A
(Interaction\))90 198 Q F0
(". From within this window you can talk directly to Epoch Lisp.)A 1.28(1\) Y)
90 226 R 1.28(our \214rst Lisp program: type)-1.2 F F2 1.28
(\(print "hello world"\))4.28 F F0 1.28(in the Lisp Interaction)4.28 F 2.672
(window and press Line-Feed. Note, Line-Feed is the little key under Return.)
126 240 R(Instead of Line-Feed you can also press)126 254 Q F2(C-j)3 E F0 3(.")
C F2(C-j)352.116 254 Q F0 3("m)C(eans "Control-j".)390.948 254 Q .644(2\) Epoc\
h/Emacs Lisp is similar to Common Lisp, but it is not exactly the same. W)90
268 R 3.643(ew)-.96 G(ill)511.992 268 Q(not dwell on Epoch Lisp any more.)126
282 Q F1(Conversing with Common Lisp thr)75 310 Q(ough Epoch)-.216 E F0 1.503
(1\) T)90 338 R 4.503(oe)-.84 G 1.503(dit a \214le with Epoch type)126.822 338
R F2 1.504(C-x C-f)4.503 F F0 4.504(.N)C 1.504(ote that after you type)327.908
338 R F2(C-x)4.504 E F0 4.504(,t)C 1.504(he cursor)476.18 338 R 3.008
(jumps to the Minibuf)126 352 R 3.008(fer window)-.216 F 6.008(.T)-.78 G 3.007
(hen when you type)310.036 352 R F2(C-f)6.007 E F0 6.007(,y)C 3.007
(ou see in the)452.655 352 R(Minibuf)126 366 Q(fer)-.216 E F2(Find File: ~/)126
394 Q F0(type the name of the \214le you want to edit or create, e.g.,)126 422
Q F2(worksheet.l)3 E F0 3.147(2\) Epoch window will clear and you will see tha\
t the editing mode now becomes)90 436 R(")126 450 Q F2(\(Lisp\))A F0 3.468
(". This)B .468(is not the real Lisp window yet. This is a window in which you)
3.468 F 1.026(will be editing your Lisp worksheet. Epoch will help you edit th\
e program - but)126 464 R(you will have to invoke yet another window to bring \
up real Common Lisp in it.)126 478 Q 1.36(3\) T)90 492 R 1.36(ype ")-.84 F F2
1.36(C-z 2)B F0 1.36
(". This will bring up another window with the cursor positioned in it.)B 1.216
(Now in this second window type ")126 506 R F2 1.217(M-x run-lisp)B F0 4.217
("-t)C 1.217(his will bring up Lucid)407.128 506 R 2.343
(Common Lisp in the second window)126 520 R 5.342(.T)-.78 G 2.342
(he abbreviation ")329.608 520 R F2(M-x)A F0 5.342("m)C 2.342(eans Meta-x.)
457.678 520 R .113(Meta key is the small key labeled with a diamond to the lef\
t and to the right of the)126 534 R(space-bar key)126 548 Q 3(.T)-.78 G
(he Epoch mode line says ")204.852 548 Q F2(\(Inferior Lisp: run\))A F0(")A
1.173(4\) T)90 562 R 1.172
(ype in your \214rst Lisp program into the Common Lisp window:)-.84 F F2 1.172
(\(print "hello)4.172 F(world"\))126 576 Q F0 .611
(and press the Return key this time, not the Line-Feed key)3.611 F 3.611(.Y)
-.78 G .612(ou should)474.384 576 R(see:)126 590 Q F2 7.2(>\()126 618 S
(print "hello world"\))147.6 618 Q("hello world")126 646 Q("hello world")126
660 Q(>)126 674 Q F0 .595(Observe that when you have typed in the second brack\
et the cursor brie\215y jumps)126 702 R
(to the \214rst bracket in order to show you which bracket you are closing.)126
716 Q EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-4-)296.004 50 S 1.064(5\) Now type ")90 86 R/F1 12
/Courier@0 SF 1.064(C-z o)B F0 4.064("i)C 4.064(nt)210.436 86 S 1.064
(he Lisp window)223.836 86 R 4.064(,t)-.78 G 1.065
(he cursor will jump back to the worksheet)312.912 86 R(window)126 100 Q 4.413
(.I)-.78 G 4.413(nt)175.293 100 S 1.413
(hat window type again your \214rst Lisp program)189.042 100 R F1 1.412
(\(print "hello)4.412 F(world"\))126 114 Q F0 4.556(.O)C 1.556
(bserve that again the cursor will show you which bracket you are)192.62 114 R
.074
(closing when you type the second bracket. After you type in the line, press ")
126 128 R F1(C-M-)A(x)126 142 Q F0 .255(". Observe that Epoch will have transf\
erred the program to the Lisp window and)B(executed it there.)126 156 Q .054
(6\) Y)90 170 R .054(ou can also select the text in the worksheet window by pr\
essing the \214rst button on the)-1.2 F 2.902
(mouse and dragging the mouse across text. Then click on the Lisp window)126
184 R(,)-.78 E .718(position the mouse pointer in the shape of the pencil exac\
tly where you want the)126 198 R 1.179(text to go, and press the middle button\
 on the mouse. This will transfer the text)126 212 R 1.141
(from the worksheet window to the Lisp window)126 226 R 4.141(.N)-.78 G 1.141
(ow press the Return key and)379.988 226 R(execute the program.)126 240 Q/F2 12
/Times-Bold@0 SF(Summary)75 268 Q F0 .617
(1\) When Epoch is invoked from the menu or without ar)90 296 R .618
(guments in brings up the Epoch-)-.216 F 2.318(Lisp interaction window)126 310
R 5.317(,i)-.78 G 5.317(nw)258.833 310 S 2.317
(hich Epoch-Lisp commands can be executed by)278.814 310 R
(pressing the Line-Feed key)126 324 Q(.)-.78 E 1.42(2\) T)90 338 R 4.421(oc)
-.84 G 1.421(reate a new \214le or to edit an existing one type)126.657 338 R
F1 1.421(C-x C-f file-name)4.421 F F0 1.421(in the)4.421 F .707(Epoch window)
126 352 R 3.707(.F)-.78 G .707(ile names with a suf)211.63 352 R .707(\214x ")
-.216 F F1(.l)A F0 3.707("w)C .707(ill automatically invoke the Lisp)363.172
352 R(editing mode.)126 366 Q(3\) T)90 380 Q 3(oc)-.84 G
(reate another window type ")123.816 380 Q F1(C-z 2)A F0(".)A .066(4\) T)90 394
R 3.066(oi)-.84 G .066(nvoke external Lisp process in that window)121.956 394 R
3.066(,p)-.78 G .067(osition the cursor in that window and)342.942 394 R
(type ")126 408 Q F1(M-x run-lisp)A F0(")A 3.859
(5\) Programs can be typed and executed directly in the Lisp window)90 422 R
6.859(.E)-.78 G 3.859(poch will)473.141 422 R
(automatically show closing brackets and indent typed in text.)126 436 Q .903
(6\) Y)90 450 R .903(ou can switch from one window to another by typing ")-1.2
F F1 .903(C-z o)B F0 3.903("o)C 3.903(rb)434.295 450 S 3.903(yc)448.194 450 S
.903(licking with)463.425 450 R(the mouse on the appropriate window)126 464 Q
(.)-.78 E .329(7\) Y)90 478 R .329(ou can transfer Lisp clauses from Lisp wind\
ow to the inferior Lisp process by typing)-1.2 F(")126 492 Q F1(C-M-x)A F0 3
("o)C 3(rb)180.792 492 S 3(yc)193.788 492 S(opying and pasting with the mouse.)
208.116 492 Q EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-5-)296.004 50 S/F1 16/Times-Roman@0 SF(Lesson 2)
277.336 90 Q(Basic Common Lisp)240.216 108 Q/F2 12/Times-Bold@0 SF
(Using Common Lisp as a calculator)75 144 Q F0
(1\) Switch back to the Common Lisp window and try the following:)90 172 Q/F3
12/Courier@0 SF 7.2(>\()126 200 S 7.2(+22)147.6 200 S(\))183.6 200 Q(4)126 214
Q 7.2(>\()126 228 S 7.2(*23)147.6 228 S(\))183.6 228 Q(6)126 242 Q/F4 12
/Times-Italic@0 SF(Her)126 256 Q 3(ei)-.444 G 3(sh)155.88 256 S
(ow you can combine various mathematical operations)169.548 256 Q F3 7.2(>\()
126 270 S 7.2(+\()147.6 270 S 7.2(*23)169.2 270 S 7.2(\)4)205.2 270 S(\))226.8
270 Q(10)126 284 Q F4 .389
(When performing operations on integers Lisp will try to be as accurate as)126
298 R(possible to the very end)126 312 Q F3 7.2(>\()126 326 S 7.2(/37)147.6 326
S(\))183.6 326 Q(3/7)126 340 Q F4(Common Lisp knows the value of)126 354 Q F3
(pi)3 E 7.2(>p)126 368 S(i)147.6 368 Q(3.141592653589793)126 382 Q F4
(It also knows about trigonometric functions)126 396 Q F3 7.2(>\()126 410 S
(sin \(/ pi 2.0\)\))147.6 410 Q(1.0)126 424 Q 7.2(>\()126 438 S
(cos \(/ pi 2.0\)\))147.6 438 Q(6.123031769111886E-17)126 452 Q F4
(This should be zer)126 466 Q(o, but we ar)-.444 E 3(en)-.444 G(ot so accurate)
284.448 466 Q F3 7.2(>\()126 480 S(tan \(/ pi 2.0\)\))147.6 480 Q
(1.6331778728383844E16)126 494 Q F4 1.435(This should be in\214nity)126 508 R
4.435(,b)-.66 G 1.435(ut, thanks God, we ar)249.424 508 R 4.434(en)-.444 G
1.434(ot suf\214ciently accurate)373.812 508 R(either)126 522 Q(.)-1.332 E
(Lisp functions can sometimes take arbitrary number of ar)126 536 Q(guments)
-.444 E F3 7.2(>\()126 550 S(max 3 7 2 1 6\))147.6 550 Q(7)126 564 Q 7.2(>\()
126 578 S(min 3 7 2 1 6\))147.6 578 Q(1)126 592 Q 7.2(>\()126 606 S 7.2(+37216)
147.6 606 S(\))226.8 606 Q(19)126 620 Q 7.2(>\()126 634 S 7.2(-37216)147.6 634
S(\))226.8 634 Q(-13)126 648 Q 7.2(>\()126 662 S(1+ 3\))147.6 662 Q(4)126 676 Q
7.2(>\()126 690 S(1- 3\))147.6 690 Q EP
%%Page: 6 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-6-)296.004 50 S/F1 12/Courier@0 SF(2)126 86 Q 7.2
(>\()126 100 S 7.2(/8)147.6 100 S(\))169.2 100 Q(1/8)126 114 Q 7.2(>\()126 128
S 7.2(/-)147.6 128 S(8\))169.2 128 Q(-1/8)126 142 Q/F2 12/Times-Italic@0 SF
(Common Lisp also knows about the gr)126 156 Q(eatest common divisor)-.444 E F1
7.2(>\()126 170 S(gcd 8 4\))147.6 170 Q(4)126 184 Q 7.2(>\()126 198 S
(gcd 236 111\))147.6 198 Q(1)126 212 Q F2(It can also exponentiate)126 226 Q F1
7.2(>\()126 240 S(expt 2 3\))147.6 240 Q(8)126 254 Q F2(Note the differ)126 268
Q(ence between 2)-.444 E/F3 10/Times-Italic@0 SF(3)268.2 262 Q F2(and e)276.2
268 Q F3(2)302.528 262 Q F1 7.2(>\()126 282 S(exp 2\))147.6 282 Q
(7.38905609893065)126 296 Q 7.2(>\()126 310 S(log 2\))147.6 310 Q
(0.6931471805599453)126 324 Q F2 .562
(If you want a logarithm of 2 in the base 2 use two ar)126 338 R .563
(guments. The default)-.444 F(base is e)126 352 Q F1 7.2(>\()126 366 S
(log 2 2\))147.6 366 Q(1.0)126 380 Q F2(Squar)126 394 Q 3(er)-.444 G
(oot is also ther)166.776 394 Q(e)-.444 E F1 7.2(>\()126 408 S(sqrt 2\))147.6
408 Q(1.4142135623730952)126 422 Q F2(Common Lisp knows about complex numbers)
126 436 Q F1 7.2(>\()126 450 S(log -1.0\))147.6 450 Q
(#C\(0.0 3.141592653589793\))126 464 Q 7.2(>\()126 478 S(sqrt -2\))147.6 478 Q
(#C\(0.0 1.4142135623730952\))126 492 Q F2(This is an integer squar)126 506 Q 3
(er)-.444 G(oot)252.12 506 Q F1 7.2(>\()126 520 S(isqrt 9\))147.6 520 Q(3)126
534 Q 7.2(>\()126 548 S(isqrt 10\))147.6 548 Q(3)126 562 Q F2(and this is e)126
576 Q F3(ix)183.672 570 Q F1 7.2(>\()126 590 S(cis 0.0\))147.6 590 Q
(#C\(1.0 0.0\))126 604 Q 7.2(>\()126 618 S(cis pi\))147.6 618 Q
(#C\(-1.0 1.2246063538223773E-16\))126 632 Q 7.2(>\()126 646 S
(cis \(/ pi 2\)\))147.6 646 Q(#C\(6.123031769111886E-17 1.0\))126 660 Q F2
(Common Lisp understands fractions)126 674 Q F1 7.2(>\()126 688 S
(numerator \(/ 3 4\)\))147.6 688 Q EP
%%Page: 7 7
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-7-)296.004 50 S/F1 12/Courier@0 SF(3)126 86 Q 7.2
(>\()126 100 S(denominator \(/ 3 4\)\))147.6 100 Q(4)126 114 Q/F2 12
/Times-Italic@0 SF(It can also truncate and r)126 128 Q(ound numbers)-.444 E F1
7.2(>\()126 142 S(truncate pi\))147.6 142 Q(3)126 156 Q(0.14159265358979312)126
170 Q 7.2(>\()126 184 S(round pi\))147.6 184 Q(3)126 198 Q(0.14159265358979312)
126 212 Q 7.2(>\()126 226 S(truncate \(+ pi \(/ 1 2\)\)\))147.6 226 Q(3)126 240
Q(0.6415926535897931)126 254 Q 7.2(>\()126 268 S(round \(+ pi \(/ 1 2\)\)\))
147.6 268 Q(4)126 282 Q(-0.3584073464102069)126 296 Q F2
(or cast them onto other types)126 310 Q F1 7.2(>\()126 324 S(float 2\))147.6
324 Q(2.0)126 338 Q 7.2(>\()126 352 S(rational 2.0\))147.6 352 Q(2)126 366 Q F2
(Her)126 380 Q 3(ei)-.444 G 3(sh)155.88 380 S(ow you can \214nd the division r)
169.548 380 Q(emainder)-.444 E F1 7.2(>\()126 394 S(rem 13 4\))147.6 394 Q(1)
126 408 Q F2 2.208 -1.104(To g)126 422 T(enerate random numbers use)1.104 E F1
7.2(>\()126 436 S(random 10.0\))147.6 436 Q(2.061467316924359)126 450 Q 7.2
(>\()126 464 S(random 10.0\))147.6 464 Q(3.7399819979840676)126 478 Q(>)126 492
Q F0 4.067
(There are many more useful mathematical functions in Common Lisp. These are)90
520 R(discussed in detail in Chapter 12, "Numbers" of the CLtL2.)90 534 Q/F3 12
/Times-Bold@0 SF(Basic iterations in Common Lisp)75 562 Q F0 .926
(1\) Still in Lisp window type the following text. W)90 590 R .927
(ith the exception of the \214rst line start)-.48 F
(every following line with a tab to get the right indentation.)126 604 Q F1 7.2
(>\()126 632 S(dotimes \(i 5 nil\))147.6 632 Q(\(print i\)\))154.8 646 Q(0)126
674 Q(1)126 688 Q EP
%%Page: 8 8
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-8-)296.004 50 S/F1 12/Courier@0 SF(2)126 86 Q(3)126
100 Q(4)126 114 Q(NIL)126 128 Q(>)126 142 Q/F2 12/Times-Bold@0 SF -1.104(Va)75
170 S(riables and mor)1.104 E 3(ei)-.216 G(terations in Common Lisp)181.344 170
Q F0(1\) T)90 198 Q(ry the following)-.42 E F1 7.2(>a)126 226 S
(>>Error: The symbol A has no global value)126 240 Q(SYMBOL-VALUE:)126 268 Q
(Required arg 0 \(S\): A)147.6 282 Q 7.2(:C 0:)126 296 R
(Try evaluating A again)7.2 E 7.2(:A 1:)126 310 R(Abort to Lisp Top Level)7.2 E
(-> 1)126 338 Q(Abort to Lisp Top Level)126 352 Q(Back to Lisp Top Level)126
366 Q 7.2(>\()126 394 S(setf a 3\))147.6 394 Q(3)126 408 Q 7.2(>a)126 422 S(3)
126 436 Q(>)126 450 Q F0
(In Common Lisp parlance we say that symbol A has been bound to 3.)126 478 Q
(2\) V)90 506 Q(ariables can be also created locally using the)-1.332 E F1(let)
3 E F0(form:)3 E F1 7.2(>\()126 534 S(let \(\(result 1\)\))147.6 534 Q
(\(dotimes \(i 5 result\))154.8 548 Q
(\(setf result \(* \(1+ i\) result\)\)\)\))169.2 562 Q(120)126 576 Q 7.2(>\()
126 590 S 7.2(*12345)147.6 590 S(\))226.8 590 Q(120)126 604 Q(>)126 618 Q F0
1.152(3\) This)90 646 R F1 1.152(\(1+ i\))4.152 F F0 1.152
(construct within the body of the loop looks ungainly)4.152 F 4.152(.Am)-.78 G
1.152(ore general)467.208 646 R(iteration facility called ")126 660 Q F1(do)A
F0 3("c)C(an be used to \214x this:)270.168 660 Q F1 7.2(>\()126 688 S
(let \(\(result 1\)\))147.6 688 Q EP
%%Page: 9 9
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-9-)296.004 50 S/F1 12/Courier@0 SF
(\(do \(\(i 1 \(1+ i\)\)\))154.8 86 Q(\(\(< 5 i\) result\))183.6 100 Q
(\(setf result \(* i result\)\)\)\))169.2 114 Q(120)126 128 Q(>)126 142 Q F0
.369(The \214rst ar)126 170 R .369(gument of)-.216 F F1(do)3.369 E F0 .369
(creates local variables, initialises them and tells)3.369 F F1(do)3.37 E F0
(how)3.37 E 1.089(to increment them on every iteration. Several local variable\
s can be created. W)126 184 R(e)-.96 E(could use this feature of)126 198 Q F1
(do)3 E F0(instead of the external)3 E F1(let)3 E F0(:)A F1 7.2(>\()126 226 S
(do \(\(i 1 \(1+ i\)\))147.6 226 Q(\(result 1\)\))176.4 240 Q
(\(\(< 5 i\) result\))169.2 254 Q(\(setf result \(* i result\)\)\))154.8 268 Q
(120)126 282 Q(>)126 296 Q/F2 12/Times-Bold@0 SF(De\214ning your own functions)
75 324 Q F0 .773(1\) The macro)90 352 R F1(defun)3.773 E F0 .773
(is used to de\214ne functions. Macros is Common Lisp are a bit like)3.773 F
2.031(macros in C.)126 366 R 2.031
(They are far more sophisticated though and, like Common Lisp)8.031 F
(functions, they can be compiled too. Here is a simple use of)126 380 Q F1
(defun)3 E F0(:)A F1 7.2(>\()126 408 S(defun factorial \(n\))147.6 408 Q
(\(do \(\(i 1\))154.8 422 Q(\(result 1\)\))190.8 436 Q(\(\(< n i\) result\))162
450 Q(\(setf result \(* i result\)\))169.2 464 Q(\(setf i \(1+ i\)\)\)\))169.2
478 Q(FACTORIAL)126 492 Q 7.2(>\()126 506 S(factorial 5\))147.6 506 Q(120)126
520 Q 7.2(>\()126 534 S(factorial 1\))147.6 534 Q(1)126 548 Q 7.2(>\()126 562 S
(factorial 3\))147.6 562 Q(6)126 576 Q 7.2(>\()126 590 S(factorial 7\))147.6
590 Q(5040)126 604 Q 7.2(>\()126 618 S(factorial 0\))147.6 618 Q(1)126 632 Q(>)
126 646 Q F0 .727(2\) When it comes to de\214ning long functions it is no long\
er practical to work in the Lisp)90 674 R(window)126 688 Q 3.114(.F)-.78 G .113
(or this it is better to switch to the worksheet window so that you can re-)
176.67 688 R .258(edit and modify existing de\214nitions. If you have managed \
to type in the de\214nition)126 702 R 1.318
(of the factorial function without mistakes into the Lisp window)126 716 R
4.318(,c)-.78 G 1.318(opy and paste)453.376 716 R
(this de\214nition using mouse to the worksheet window)126 730 Q(.)-.78 E EP
%%Page: 10 10
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-1)293.004 50 S 3(0-)306 50 S
(3\) The copied text may not be properly indented. T)90 86 Q 3<6f8c>-.84 G 3
(xt)350.124 86 S(he problems try the following)362.46 86 Q .43
(a\) position the cursor at the beginning of the de\214nition and type)126 100
R/F1 12/Courier@0 SF(C-space-bar)3.43 E F0(,)A(the minibuf)162 114 Q
(fer should say ")-.216 E F1(Mark set)A F0(")A .384(b\) now type)126 128 R F1
(C-M-f)3.383 E F0 3.383(,t)C .383
(he cursor should move to the end of the function de\214nition.)233.194 128 R
-1.2(Yo)162 142 S 3(uc)1.2 G(an go back to the beginning by typing)189.792 142
Q F1(C-M-b)3 E F0 3(,t)C(ry it)419.784 142 Q 1.556
(c\) when you are now positioned at the end of the function de\214nition type)
126 156 R F1(M-x)4.556 E(indent-region)162 170 Q F0(.)A
(4\) Modify the function de\214nition by adding the comment:)90 184 Q F1
(\(defun factorial \(n\))126 212 Q
("this function computes the factorial of its)140.4 226 Q(integer argument")126
240 Q(\(do \(\(i 1\))140.4 254 Q(\(result 1\)\))176.4 268 Q
(\(\(< n i\) result\))169.2 282 Q(\(setf result \(* i result\)\))154.8 296 Q
(\(setf i \(1+ i\)\)\)\))154.8 310 Q F0 .508(5\) T)90 338 R .507(ransfer this \
new function de\214nition to Common Lisp by positioning the cursor at the)-.42
F .883(end of the function and typing)126 352 R F1(C-M-x)3.883 E F0 3.883(.L)C
.883(isp should give you a warning that you)329.495 352 R
(are rede\214ning the function:)126 366 Q F1
(;;; Warning: Redefining FUNCTION FACTORIAL which used)126 394 Q
(to be defined at top level)126 408 Q F0
(6\) Now change back to the Lisp window and type:)90 436 Q F1 7.2(>\()126 464 S
(describe 'factorial\))147.6 464 Q(FACTORIAL is a symbol.)126 478 Q
(Its home package is USER.)298.8 478 Q
(Its global function definition is #<Interpreted-)126 492 Q
(Function \(NAMED-LAMBDA FACTORIAL \(N\) \(BLOCK FACTORIAL)126 506 Q
(\(DO # # # #\)\)\) 157A406>.)126 520 Q
(#<Interpreted-Function \(NAMED-LAMBDA FACTORIAL \(N\))126 534 Q
(\(BLOCK FACTORIAL \(DO # # # #\)\)\) 157A406> is an)126 548 Q
(interpreted function.)126 562 Q(Its source code is)126 576 Q
(\(NAMED-LAMBDA FACTORIAL)126 618 Q(\(N\))226.8 632 Q(\(BLOCK FACTORIAL)226.8
646 Q(\(DO \(\(I 1\))241.2 660 Q(\(RESULT 1\)\))277.2 674 Q(\(\(< N I\))270 688
Q EP
%%Page: 11 11
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-1)293.226 50 S 3(1-)305.778 50 S/F1 12/Courier@0 SF
(RESULT\))277.2 86 Q(\(SETF RESULT \(* I RESULT\)\) \(SETF I)255.6 100 Q
(\(1+ I\)\)\)\)\))126 114 Q
(The function definition for FACTORIAL is in the file)126 128 Q
(/tmp/emlisp3773.)126 142 Q(It has this function documentation:)126 156 Q
("this function computes the factorial of its integer)126 170 Q(argument")126
184 Q(>)126 198 Q F0 2.432
(Common Lisp is a self-documenting programming environment. Y)126 226 R 2.432
(ou can \214nd)-1.2 F 1.61
(much information about any function, macro, or a variable by asking Common)126
240 R(Lisp to)126 254 Q F1(describe)3 E F0(it.)3 E .507(7\) Y)90 282 R .507(ou\
 can easily time every function which executes in the Common Lisp environment.)
-1.2 F -.42(Tr)126 296 S(y).42 E F1 7.2(>\()126 324 S(time \(factorial 180\)\))
147.6 324 Q(Elapsed Real Time = 0.03 seconds)126 338 Q(Total Run Time)126 352 Q
7.2(=0)255.6 352 S(.03 seconds)277.2 352 Q(User Run Time)126 366 Q 7.2(=0)255.6
366 S(.03 seconds)277.2 366 Q(System Run Time)126 380 Q 7.2(=0)255.6 380 S
(.00 seconds)277.2 380 Q(Process Page Faults)126 394 Q 72(=0)291.6 394 S
(Dynamic Bytes Consed)126 408 Q 72(=0)291.6 408 S(Ephemeral Bytes Consed =)126
422 Q(15,728)334.8 422 Q(2008960624991342996569513368984668389175)126 436 Q
(4034079886777794043533516004486095339598)126 450 Q
(0941180138112097309735631594101037399609)126 464 Q
(6710321321863314952736095985319667309729)126 478 Q
(4565355881980647506435385685815744504080)126 492 Q
(9209560358463319644664891114256430017824)126 506 Q
(1417967538181923386423026933278187319860)126 520 Q
(3960320000000000000000000000000000000000)126 534 Q(0000000000)126 548 Q F0
.289(Here you can also see that integer arithmetics in Common Lisp is not rest\
ricted to)126 576 R(32 or 64 bits.)126 590 Q 3.789(8\) The function)90 618 R F1
(factorial)6.789 E F0 3.789(de\214ned above is interpreted. Y)6.789 F 3.789
(ou can speed up the)-1.2 F(execution by compiling it:)126 632 Q F1 7.2(>\()126
660 S(compile 'factorial\))147.6 660 Q
(;;; You are using the compiler in development mode)126 674 Q
(\(compilation-speed = 3\))126 688 Q EP
%%Page: 12 12
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-1)293.004 50 S 3(2-)306 50 S/F1 12/Courier@0 SF
(;;; If you want faster code at the expense of longer)126 86 Q(compile time,)
126 100 Q(;;; you should use the production mode of the compiler,)126 114 Q
(which can be obtained)126 128 Q
(;;; by evaluating \(proclaim '\(optimize \(compilation-)126 142 Q
(speed 0\)\)\))126 156 Q
(;;; Generation of full safety checking code is enabled)126 170 Q
(\(safety = 3\))126 184 Q
(;;; Optimization of tail calls is disabled \(speed = 2\))126 198 Q(FACTORIAL)
126 212 Q 7.2(>\()126 226 S(time \(factorial 180\)\))147.6 226 Q
(Elapsed Real Time = 0.01 seconds)126 240 Q(Total Run Time)126 254 Q 7.2(=0)
255.6 254 S(.01 seconds)277.2 254 Q(User Run Time)126 268 Q 7.2(=0)255.6 268 S
(.01 seconds)277.2 268 Q(System Run Time)126 282 Q 7.2(=0)255.6 282 S
(.00 seconds)277.2 282 Q(Process Page Faults)126 296 Q 72(=0)291.6 296 S
(Dynamic Bytes Consed)126 310 Q 72(=0)291.6 310 S(Ephemeral Bytes Consed =)126
324 Q(15,640)334.8 324 Q(2008960624991342996569513368984668389175)126 338 Q
(4034079886777794043533516004486095339598)126 352 Q
(0941180138112097309735631594101037399609)126 366 Q
(6710321321863314952736095985319667309729)126 380 Q
(4565355881980647506435385685815744504080)126 394 Q
(9209560358463319644664891114256430017824)126 408 Q
(1417967538181923386423026933278187319860)126 422 Q
(3960320000000000000000000000000000000000)126 436 Q(0000000000)126 450 Q(>)126
464 Q/F2 12/Times-Bold@0 SF(Summary)75 492 Q F0(1\) Common Lisp provides a gre\
at variety of mathematical functions. For example:)90 520 Q F1
(+, *, -, /, sin, cos, tan, max, min, gcd, expt, exp,)126 534 Q
(log, sqrt, isqrt, cis, 1+, 1-, numerator, denominator,)126 548 Q
(truncate, round, float, rational, rem, random)126 562 Q F0(and many others.)
126 576 Q(2\) Common Lisp knows about fractions and complex numbers. It also k\
nows about)90 590 Q F1(pi.)3 E F0
(3\) Basic iterations in Common Lisp can be carried out using)90 604 Q F1
(dotimes)3 E F0(or)3 E F1(do.)3 E F0 .069(4\) V)90 618 R .069
(ariables are created using)-1.332 F F1(setf)3.069 E F0(,)A F1(let)3.069 E F0
3.069(,o)C 3.069(rl)303.831 618 S .068(et-like constructs within)314.232 618 R
F1(do)3.068 E F0 3.068(.T)C .068(here are also)461.228 618 R
(many other ways to create and bind variables in Common Lisp.)126 632 Q
(5\) Functions are de\214ned using the)90 646 Q F1(defun)3 E F0(macro.)3 E
(6\) Long functions are easier to de\214ne and modify in the worksheet window)
90 660 Q(.)-.78 E(7\) Y)90 674 Q(ou can mark a position in a text in Epoch by)
-1.2 E F1(C-space-bar)3 E F0(.)A(8\))90 688 Q F1(C-M-f)3.47 E F0 .47
(will move the cursor forward by the whole Lisp clause and)3.47 F F1(C-M-b)
3.471 E F0 .471(will move)3.471 F
(the cursor backward by the whole Lisp clause.)126 702 Q EP
%%Page: 13 13
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-1)293.004 50 S 3(3-)306 50 S .861(9\) The whole fun\
ction can be automatically indented by marking the region and typing)90 86 R/F1
12/Courier@0 SF(M-x indent-region.)126 100 Q F0 .899(10\) Common Lisp function\
s can be annotated by inserting a comment following the list)90 114 R
(of parameters.)126 128 Q -.444(11)90 142 S 3.729(\)T).444 G .728(he documenta\
tion about every Common Lisp function is stored by the Lisp system)116.613 142
R(and can be invoked by calling the)126 156 Q F1(describe)3 E F0(function.)3 E
(12\) Common Lisp functions can be timed by using the)90 170 Q F1(time)3 E F0
(function.)3 E(13\) Common Lisp functions can be compiled by using the)90 184 Q
F1(compile)3 E F0(function.)3 E
(14\) Common Lisp integer arithmetics is not restricted to 32 or 64 bits.)90
198 Q EP
%%Page: 14 14
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-1)293.004 50 S 3(4-)306 50 S/F1 16/Times-Roman@0 SF
(Lesson 3)277.336 90 Q(Arrays)284.232 108 Q/F2 12/Times-Bold@0 SF
(Common Lisp arrays)75 144 Q F0 2.078(1\) V)90 172 R 2.078
(ariables in Common Lisp are dynamically constructed as needed.)-1.332 F/F3 12
/Courier@0 SF(setf)5.078 E F0 2.078(makes a)5.078 F 1.987
(simple variable if such doesn')126 186 R 4.987(te)-.216 G 1.987(xist yet. T)
291.359 186 R 4.986(om)-.84 G 1.986(ake an array you have to use a)363.15 186 R
(function)126 200 Q F3(make-array)3 E F0(.)A F3 7.2(>\()126 228 S
(make-array '\(4\)\))147.6 228 Q(#<Simple-Vector T 4 1537E9E>)126 242 Q 7.2
(>\()126 256 S(setf *print-array* t\))147.6 256 Q(T)126 270 Q 7.2(>\()126 284 S
(make-array '\(4\)\))147.6 284 Q(#\(NIL NIL NIL NIL\))126 298 Q(>)126 312 Q F0
1.458(Unless a prede\214ned global variable)126 340 R F3(*print-array*)4.458 E
F0 1.458(is set to)4.458 F F3(t)4.458 E F0(\(true\))4.458 E .519
(array contents are not printed. This can be useful if the program works on)126
354 R 1.318(very long arrays. By default newly created arrays contain)126 368 R
F3(nil)4.318 E F0 1.318(\(false\) in)4.318 F(every slot.)126 382 Q 4.338
(2\) Arrays can be initialised using a function switch ")90 396 R F3
(:initial-element)A F0 4.338(", or)B(")126 410 Q F3(:initial-contents)A F0(":)A
F3 7.2(>\()126 438 S(make-array '\(4\) :initial-element 0.0\))147.6 438 Q
(#\(0.0 0.0 0.0 0.0\))126 452 Q 7.2(>\()126 466 S(make-array '\(4\))147.6 466 Q
(:initial-contents '\(1.0 2.0 3.0 4.0\)\))154.8 480 Q(#\(1.0 2.0 3.0 4.0\))126
494 Q(>)126 508 Q F0(3\) Arrays can be made multidimensional:)90 536 Q F3 7.2
(>\()126 564 S(make-array '\(3 3\) :initial-element 0.0\))147.6 564 Q
(#2A\(\(0.0 0.0 0.0\) \(0.0 0.0 0.0\) \(0.0 0.0 0.0\)\))126 578 Q 7.2(>\()126
592 S(make-array '\(3 3\))147.6 592 Q(:initial-contents '\(\(1.0 2.0 3.0\))
154.8 606 Q(\(4.0 5.0 6.0\))298.8 620 Q(\(7.0 8.0 9.0\)\)\))298.8 634 Q
(#2A\(\(1.0 2.0 3.0\) \(4.0 5.0 6.0\) \(7.0 8.0 9.0\)\))126 648 Q(>)126 662 Q
F0(4\) Once made, arrays can be bound to various symbols using)90 690 Q F3
(setf)3 E F0(:)A EP
%%Page: 15 15
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-1)293.004 50 S 3(5-)306 50 S/F1 12/Courier@0 SF 7.2
(>\()126 86 S(setf a \(make-array '\(3\))147.6 86 Q
(:initial-contents '\(1.0 0.0 0.0\)\)\))212.4 100 Q(#\(1.0 0.0 0.0\))126 114 Q
7.2(>\()126 128 S(setf b \(make-array '\(3\))147.6 128 Q
(:initial-contents '\(0.0 1.0 0.0\)\)\))212.4 142 Q(#\(0.0 1.0 0.0\))126 156 Q
7.2(>a)126 170 S(#\(1.0 0.0 0.0\))126 184 Q 7.2(>b)126 198 S(#\(0.0 1.0 0.0\))
126 212 Q(>)126 226 Q F0(5\) W)90 254 Q 3(ec)-.96 G
(an retrieve selected elements of an array using the function)127.02 254 Q F1
(aref)3 E F0(:)A F1 7.2(>\()126 282 S(aref a 0\))147.6 282 Q(1.0)126 296 Q 7.2
(>\()126 310 S(aref a 1\))147.6 310 Q(0.0)126 324 Q 7.2(>\()126 338 S
(aref a 2\))147.6 338 Q(0.0)126 352 Q(>)126 366 Q F0 .422(6\) W)90 394 R .422
(ith multidimensional arrays function)-.48 F F1(aref)3.422 E F0 .422
(takes two or three indexes depending on)3.422 F(the dimension of the array)126
408 Q 3(.L)-.78 G(et')264.528 408 Q 3(sd)-.66 G
(e\214ne as an exercise Pauli matrices:)290.196 408 Q F1 7.2(>\()126 436 S
(setf i \(complex 0 1\)\))147.6 436 Q(#C\(0 1\))126 450 Q 7.2(>\()126 464 S 7.2
(*ii)147.6 464 S(\))183.6 464 Q(-1)126 478 Q 7.2(>\()126 492 S
(setf -i \(complex 0 -1\)\))147.6 492 Q(#C\(0 -1\))126 506 Q/F2 12
/Times-Italic@0 SF .053
(Observe that variable name may begin with "-". This can be)126 520 R 3.053(av)
6.053 G .053(ery useful featur)435.35 520 R(e.)-.444 E 1.711
(Also, note that we have used a new function)126 534 R F1(complex)4.711 E F2
1.711(which is used to make)4.711 F(complex numbers.)126 548 Q F1 7.2(>\()126
562 S 7.2(*-)147.6 562 S 7.2(i-)169.2 562 S(i\))190.8 562 Q(-1)126 576 Q 7.2
(>\()126 590 S 7.2(*i-)147.6 590 S(i\))183.6 590 Q(1)126 604 Q 7.2(>\()126 618
S(setf sigma-x \(make-array '\(2 2\))147.6 618 Q(:initial-contents '\(\(0 1\))
262.8 632 Q(\(1 0\)\)\)\))399.6 646 Q(#2A\(\(0 1\) \(1 0\)\))126 660 Q 7.2(>\()
126 674 S(setf sigma-y \(make-array '\(2 2\))147.6 674 Q
(:initial-contents \(list)262.8 688 Q EP
%%Page: 16 16
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-1)293.004 50 S 3(6-)306 50 S/F1 12/Courier@0 SF
(\(list 0 -i\))392.4 86 Q(\(list i 0\)\)\)\))392.4 100 Q
(#2A\(\(0 #C\(0 -1\)\) \(#C\(0 1\) 0\)\))126 114 Q/F2 12/Times-Italic@0 SF
2.303(Observe that we have to use a new function)126 128 R F1(list)5.303 E F2
5.303(,w)C 2.303(hich makes a list of its)403.481 128 R(ar)126 142 Q
(guments, because)-.444 E F1(i)3 E F2(and)3 E F1(-i)3 E F2(ar)3 E 3(en)-.444 G
(ow symbols which must not be quoted.)297.024 142 Q F1 7.2(>\()126 156 S
(setf sigma-z \(make-array '\(2 2\))147.6 156 Q(:initial-contents '\(\(1 0\))
262.8 170 Q(\(0 -1\)\)\)\))399.6 184 Q(#2A\(\(1 0\) \(0 -1\)\))126 198 Q(>)126
212 Q F2(Now)126 226 Q 3(,i)-.888 G 3(no)156.456 226 S -.444(rd)171.456 226 S
(er to extract the elements of those arrays do:).444 E F1 7.2(>\()126 240 S
(aref sigma-x 0 1\))147.6 240 Q(1)126 254 Q 7.2(>\()126 268 S
(aref sigma-x 1 0\))147.6 268 Q(1)126 282 Q 7.2(>\()126 296 S
(aref sigma-y 0 1\))147.6 296 Q(-I)126 310 Q 7.2(>\()126 324 S
(aref sigma-y 1 0\))147.6 324 Q(I)126 338 Q(>)126 352 Q F0
(7\) Common Lisp provides array information functions:)90 380 Q F1 7.2(>\()126
408 S(array-rank sigma-y\))147.6 408 Q(2)126 422 Q 7.2(>\()126 436 S
(array-dimension sigma-y 0\))147.6 436 Q(2)126 450 Q 7.2(>\()126 464 S
(array-dimension sigma-y 1\))147.6 464 Q(2)126 478 Q 7.2(>\()126 492 S
(array-dimensions sigma-y\))147.6 492 Q(\(2 2\))126 506 Q 7.2(>\()126 520 S
(array-total-size sigma-y\))147.6 520 Q(4)126 534 Q(>)126 548 Q F0
(8\) Let us de\214ne a simple function for multiplication of 2x2 matrices:)90
576 Q F1(\(defun matrix-multiply \(a b\))126 604 Q
(\(let \(\(a00 \(aref a 0 0\)\))140.4 618 Q(\(a01 \(aref a 0 1\)\))162 632 Q
(\(a10 \(aref a 1 0\)\))162 646 Q(\(a11 \(aref a 1 1\)\))162 660 Q
(\(b00 \(aref b 0 0\)\))162 674 Q(\(b01 \(aref b 0 1\)\))162 688 Q EP
%%Page: 17 17
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-1)293.004 50 S 3(7-)306 50 S/F1 12/Courier@0 SF
(\(b10 \(aref b 1 0\)\))162 86 Q(\(b11 \(aref b 1 1\)\)\))162 100 Q
(\(make-array '\(2 2\))154.8 114 Q(:initial-contents)198 128 Q(\(list)198 142 Q
(\(list \(+ \(* a00 b00\) \(* a01 b10\)\))205.2 156 Q
(\(+ \(* a00 b01\) \(* a01 b11\)\)\))248.4 170 Q
(\(list \(+ \(* a10 b00\) \(* a11 b10\)\))205.2 184 Q
(\(+ \(* a10 b01\) \(* a11 b11\)\)\)\)\)\)\))248.4 198 Q F0 .606(9\) W)90 226 R
3.606(ec)-.96 G .607(an now use this function in order to check if various pro\
perties of Pauli matrices)128.232 226 R(are satis\214ed:)90 240 Q F1 7.2(>\()
126 268 S(matrix-multiply sigma-x sigma-x\))147.6 268 Q(#2A\(\(1 0\) \(0 1\)\))
126 282 Q 7.2(>\()126 296 S(matrix-multiply sigma-y sigma-y\))147.6 296 Q
(#2A\(\(1 0\) \(0 1\)\))126 310 Q 7.2(>\()126 324 S
(matrix-multiply sigma-z sigma-z\))147.6 324 Q(#2A\(\(1 0\) \(0 1\)\))126 338 Q
7.2(>\()126 352 S(matrix-multiply sigma-x sigma-y\))147.6 352 Q
(#2A\(\(#C\(0 1\) 0\) \(0 #C\(0 -1\)\)\))126 366 Q 7.2(>\()126 380 S
(matrix-multiply sigma-y sigma-x\))147.6 380 Q
(#2A\(\(#C\(0 -1\) 0\) \(0 #C\(0 1\)\)\))126 394 Q 7.2(>\()126 408 S
(matrix-multiply sigma-y sigma-z\))147.6 408 Q
(#2A\(\(0 #C\(0 1\)\) \(#C\(0 1\) 0\)\))126 422 Q 7.2(>\()126 436 S
(matrix-multiply sigma-z sigma-y\))147.6 436 Q
(#2A\(\(0 #C\(0 -1\)\) \(#C\(0 -1\) 0\)\))126 450 Q 7.2(>\()126 464 S
(matrix-multiply sigma-z sigma-x\))147.6 464 Q(#2A\(\(0 1\) \(-1 0\)\))126 478
Q 7.2(>\()126 492 S(matrix-multiply sigma-x sigma-z\))147.6 492 Q
(#2A\(\(0 -1\) \(1 0\)\))126 506 Q 7.2(>\()126 520 S
(matrix-multiply \(matrix-multiply sigma-x sigma-y\))147.6 520 Q(sigma-z\))126
534 Q(#2A\(\(#C\(0 1\) 0\) \(0 #C\(0 1\)\)\))126 548 Q(>)126 562 Q F0 .204
(10\) Speci\214c entries in the arrays can not only be read using)90 590 R F1
(aref)3.204 E F0 .204(but also changed using)3.204 F(the combination of)126 604
Q F1(aref)3 E F0(and)3 E F1(setf)3 E F0(:)A F1 14.4(>\()126 632 S
(setf a \(make-array '\(4\))154.8 632 Q(:initial-contents '\(1 2 3 4\)\)\))
219.6 646 Q(#\(1 2 3 4\))126 660 Q 7.2(>\()126 674 S(setf \(aref a 2\) 55\))
147.6 674 Q(55)126 688 Q EP
%%Page: 18 18
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-1)293.004 50 S 3(8-)306 50 S/F1 12/Courier@0 SF 7.2
(>a)126 86 S(#\(1 2 55 4\))126 100 Q(>)126 114 Q F0 -.444(11)90 142 S 3.699
(\)W).444 G 3.699(ec)119.619 142 S .698
(an now write a more universal function which multiplies two matrices of sizes)
133.974 142 R F1 7.2(mxn)126 156 S F0(and)165 156 Q F1 7.2(nxp)3 G F0(:)221.328
156 Q F1(\(defun matrix-multiply \(a b\))126 184 Q
("multiply matrices a \(m x n\) and b \(n x p\)")140.4 198 Q
(\(let \(\(na \(array-dimension a 1\)\))140.4 212 Q
(\(nb \(array-dimension b 0\)\)\))183.6 226 Q(\(if \(/= na nb\))154.8 240 Q
(\(error)183.6 254 Q/F2 10/Courier@0 SF
("Error matrices have incompatible dimensions")198 268 Q F1(\))A
(\(let* \(\(n na\))169.2 282 Q(\(m \(array-dimension a 0\)\))219.6 296 Q
(\(p \(array-dimension b 1\)\))219.6 310 Q(\(answer-array)219.6 324 Q
(\(make-array \(list m p\))234 338 Q(:initial-element 0.0\)\)\))320.4 352 Q
(\(dotimes \(i m answer-array\))183.6 366 Q(\(dotimes \(j p\))198 380 Q
(\(let \(\(sum 0.0\)\))212.4 394 Q(\(dotimes \(k n\))226.8 408 Q(\(setf sum)
241.2 422 Q(\(+ sum)284.4 436 Q(\(* \(aref a i k\))306 450 Q
(\(aref b k j\)\)\)\)\))327.6 464 Q(\(setf \(aref answer-array i j\))226.8 478
Q(sum\)\)\)\)\)\)\)\))270 492 Q F0 2.815 -.96(We h)126 520 T .895
(ave used here two new functions:).96 F F1(if)3.895 E F0(and)3.895 E F1(let*)
3.895 E F0 3.895(.T)C .895(he meaning of)402.802 520 R F1(if)3.896 E F0 .896
(is the)3.896 F 1.527(same as in other languages. Note that)126 534 R F1(/=)
4.527 E F0(means)4.527 E/F3 12/Times-Italic@0 SF(not-equal)4.527 E F0(.)A F1
(let*)4.527 E F0 1.526(is a function)4.526 F .158(which is very similar to)126
548 R F1(let)6.159 E F0 3.159(.T)C .159(he dif)281.211 548 R .159
(ference is that)-.216 F F1(let)3.159 E F0 .159(performs assignments in)3.159 F
(parallel, whereas)126 562 Q F1(let*)217.5 562 Q F0
(performs assignments sequentially)3 E(.)-.78 E
(12\) First, observe how the error condition works:)90 576 Q F1 7.2(>\()126 604
S(matrix-multiply #2A\(\(1 2\) \(2 3\)\))147.6 604 Q
(#2A\(\(1 2 3\) \(3 4 5\) \(5 6 7\)\)\))262.8 618 Q
(>>Error: Error matrices have incompatible dimensions)126 632 Q
(MATRIX-MULTIPLY:)126 660 Q
(Original code: \(NAMED-LAMBDA MATRIX-MULTIPLY \(A B\))126 674 Q
(\(BLOCK MATRIX-MULTIPLY \(LET # #\)\)\))126 688 Q EP
%%Page: 19 19
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-1)293.004 50 S 3(9-)306 50 S/F1 12/Courier@0 SF
(Required arg 0 \(A\): #2A\(\(1 2\) \(2 3\)\))147.6 86 Q
(Required arg 1 \(B\): #2A\(\(1 2 3\) \(3 4 5\) \(5 6 7\)\))147.6 100 Q 7.2
(:A 0:)126 114 R(Abort to Lisp Top Level)7.2 E(-> 0)126 142 Q
(Abort to Lisp Top Level)126 156 Q(Back to Lisp Top Level)126 170 Q(>)126 198 Q
F0 2.526(13\) Now you can also check that the Pauli matrices, sigma-x, sigma-y)
90 226 R 5.527(,a)-.78 G 2.527(nd sigma-z)466.481 226 R
(multiply by one another as before.)126 240 Q/F2 12/Times-Bold@0 SF(Summary)75
268 Q F0(1\) Arrays in Common Lisp are made using the function)90 296 Q F1
(make-array)3 E F0(.)A 3.87(2\) Arrays can be initialised using the)90 310 R F1
(:initial-element)6.87 E F0 3.87(or the)6.87 F F1(:initial-)6.87 E(contents)126
324 Q F0(switch to)3 E F1(make-array)3 E F0(.)A
(3\) Arrays can be bound to symbols \(variables\) with)90 338 Q F1(setf)3 E F0
(.)A .609(4\) Array entries can be retrieved using the function)90 352 R F1
(aref)3.61 E F0 3.61(.Ac)C .61(ombination of)396.764 352 R F1(setf)3.61 E F0
(and)3.61 E F1(aref)126 366 Q F0
(can be used to write onto selected array entries.)3 E
(5\) Complex numbers can be made using the function)90 380 Q F1(complex)3 E F0
(.)A(6\) V)90 394 Q(ariable names can begin with ")-1.332 E F1(-)A F0(".)A
2.757(7\) The function)90 408 R F1(list)5.757 E F0 2.756
(is used to construct a list from elements that require further)5.757 F
(evaluation by Lisp.)126 422 Q 3.115
(8\) Common Lisp provides various array information functions, e.g.,)90 436 R
F1(array-rank)6.115 E F0(,)A F1(array-dimension)126 450 Q F0(,)A F1
(array-dimensions)247.2 450 Q F0(,)A F1(array-total-size)3 E F0(.)A(9\) ")90
464 Q F1(if)A F0 3("i)C 3(sa)133.524 464 S
(vailable in Common Lisp and it works as in other languages)146.52 464 Q 2.315
(10\) The dif)90 478 R 2.314(ference between)-.216 F F1(let*)5.314 E F0(and)
5.314 E F1(let)5.314 E F0 2.314(is that)5.314 F F1(let*)5.314 E F0 2.314
(carries out its assignments)5.314 F(sequentially)126 492 Q 3(,w)-.78 G(hereas)
197.88 492 Q F1(let)3 E F0(carries out its assignments in parallel.)3 E -.444
(11)90 506 S 4.116(\)T).444 G 1.116(he function)117 506 R F1(error)4.116 E F0
1.117(can be used to break the execution of a function and write an)4.116 F
(error message.)126 520 Q EP
%%Page: 20 20
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-2)293.004 50 S 3(0-)306 50 S/F1 16/Times-Roman@0 SF
(Lesson 4)277.336 90 Q(Structures)273.56 108 Q/F2 12/Times-Bold@0 SF(Structur)
75 144 Q(es in Common Lisp)-.216 E F0 3.067(Am)90 172 S .067(odern computer la\
nguage is unthinkable without structures. In Lisp structures, arrays,)111.067
172 R 2.148(objects, etc, can be easily made by hand from basic primitives \(s\
ee, e.g., Abelson &)90 186 R .978(Sussmans\). But the idea behind Common Lisp \
is to save the programmer the trouble of)90 200 R 1.533(having to reinvent the\
 wheel all the time. Structures, objects, generic functions, series,)90 214 R
4.705(fancy iterative facilities, sophisticated string and list processing fun\
ctions are all)90 228 R(provided.)90 242 Q .395(1\) First let us de\214ne a nu\
mber of special variables. It is a Lisp convention that the names)90 270 R
1.338(of special variables begin and end with an asterisk. The function used t\
o de\214ne)126 284 R(special variables is)126 298 Q/F3 12/Courier@0 SF(defvar)3
E F0(:)A F3(\(defvar *qe* 1.60210E-19 "Charge of positron in C"\))126 326 Q
(\(defvar *-qe* \(- *qe*\) "Charge of electron in C"\))126 340 Q
(\(defvar *me* 9.1091E-31 "Mass of electron in kg"\))126 354 Q
(\(defvar *mp* 1.67252E-27 "Mass of proton in kg"\))126 368 Q
(\(defvar *h-bar* \(/ 6.6256E-34 2 pi\))126 382 Q
("Reduced Planck constant in J s"\))183.6 396 Q
(\(defvar *1/2*h-bar* \(* \(/ 2\) *h-bar*\))126 410 Q
("Quantum of spin in J s"\))183.6 424 Q
(\(defvar *-1/2*h-bar* \(- *1/2*h-bar*\))126 438 Q
("Minus quantum of spin in J s"\))183.6 452 Q
(\(defvar *mue* \(* \(/ *-qe* *me*\) *1/2*h-bar*\))126 466 Q
("Magnetic moment of electron in A m^2"\))183.6 480 Q F0 5.334
(The commenting strings will be displayed by Lisp when you ask it to)126 508 R
F3(\(describe '*qe*\))126 522 Q F0(.)A 1.918(2\) Now let us use the macro)90
550 R F3(defstruct)4.917 E F0 1.917(to de\214ne a structure called)4.917 F F3
(classical-)4.917 E(particle)126 564 Q F0(:)A F3
(\(defstruct classical-particle)126 592 Q
("A structure which defines a classical particle)140.4 606 Q
(with mass, charge magnetic-moment, position, and)126 620 Q(velocity")126 634 Q
(\(mass *me*\))140.4 648 Q(\(charge *-qe*\))140.4 662 Q
(\(magnetic-moment *mue*\))140.4 676 Q(\(position #\(0.0 0.0 0.0\)\))140.4 690
Q EP
%%Page: 21 21
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-2)293.004 50 S 3(1-)306 50 S/F1 12/Courier@0 SF
(\(velocity #\(0.0 0.0 0.0\)\)\))140.4 86 Q F0 .794(3\) Invoking the macro)90
114 R F1(defstruct)3.794 E F0 .795
(generates automagically instance creation function)3.794 F F1
(make-classical-particle)126 128 Q F0 4.685(and slot accessor functions)7.685 F
F1(classical-)7.684 E(particle-mass)126 142 Q F0(,)A F1
(classical-particle-charge)3 E F0 3(,e)C(tc:)416.928 142 Q F1 7.2(>\()126 170 S
(setf *print-array* t\))147.6 170 Q(T)126 184 Q 7.2(>\()126 198 S
(make-classical-particle\))147.6 198 Q
(#S\(CLASSICAL-PARTICLE MASS 9.1091E-31 CHARGE)126 212 Q
(-1.6021E-19 MAGNETIC-MOMENT -9.273197292819559E-24)126 226 Q
(POSITION #\(0.0 0.0 0.0\) VELOCITY #\(0.0 0.0 0.0\)\))126 240 Q(>)126 254 Q F0
.005(3\) The default parameters used in the de\214nition can be changed during\
 instantiation of the)90 282 R(structure by using the corresponding switch:)126
296 Q F1 7.2(>\()126 324 S(setf electron-1 \(make-classical-particle)147.6 324
Q(:position #\(1.0 0.0 0.0\)\)\))277.2 338 Q
(#S\(CLASSICAL-PARTICLE MASS 9.1091E-31 CHARGE)126 352 Q
(-1.6021E-19 MAGNETIC-MOMENT -9.273197292819559E-24)126 366 Q
(POSITION #\(1.0 0.0 0.0\) VELOCITY #\(0.0 0.0 0.0\)\))126 380 Q 7.2(>\()126
394 S(setf electron-2 \(make-classical-particle)147.6 394 Q
(:position #\(-1.0 0.0 0.0\)\)\))277.2 408 Q
(#S\(CLASSICAL-PARTICLE MASS 9.1091E-31 CHARGE)126 422 Q
(-1.6021E-19 MAGNETIC-MOMENT -9.273197292819559E-24)126 436 Q
(POSITION #\(-1.0 0.0 0.0\) VELOCITY #\(0.0 0.0 0.0\)\))126 450 Q 7.2(>\()126
464 S(setf proton-1 \(make-classical-particle)147.6 464 Q
(:mass *mp* :charge *qe*)212.4 478 Q
(:magnetic-moment \(/ \(* 2.79 *qe* *1/2*h-)212.4 492 Q(bar*\) 2 *mp*\)\)\))126
506 Q(#S\(CLASSICAL-PARTICLE MASS 1.67252E-27 CHARGE)126 520 Q
(1.6021E-19 MAGNETIC-MOMENT 7.045435727927414E-27)126 534 Q
(POSITION #\(0.0 0.0 0.0\) VELOCITY #\(0.0 0.0 0.0\)\))126 548 Q(>)126 562 Q F0
(4\) The accessor functions are used to extract values of a particular slot:)90
590 Q F1 7.2(>\()126 618 S(classical-particle-position electron-1\))147.6 618 Q
(#\(1.0 0.0 0.0\))126 632 Q 7.2(>\()126 646 S
(classical-particle-position electron-2\))147.6 646 Q(#\(-1.0 0.0 0.0\))126 660
Q 7.2(>\()126 674 S(classical-particle-position proton-1\))147.6 674 Q
(#\(0.0 0.0 0.0\))126 688 Q EP
%%Page: 22 22
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-2)293.004 50 S 3(2-)306 50 S/F1 12/Courier@0 SF 7.2
(>\()126 86 S(classical-particle-mass proton-1\))147.6 86 Q(1.67252E-27)126 100
Q(>)126 114 Q F0 2.256(5\) W)90 142 R 5.256(ec)-.96 G 2.256
(an use the combination of)131.532 142 R F1(setf)5.256 E F0 2.256
(and accessor functions to change values of)5.256 F
(speci\214ed slots in already existing structures:)126 156 Q F1 7.2(>\()126 184
S(setf \(classical-particle-position electron-2\))147.6 184 Q
(#\(-0.8 0.0 0.0\)\))183.6 198 Q(#\(-0.8 0.0 0.0\))126 212 Q 7.2(>e)126 226 S
(lectron-2)147.6 226 Q(#S\(CLASSICAL-PARTICLE MASS 9.1091E-31 CHARGE)126 240 Q
(-1.6021E-19 MAGNETIC-MOMENT -9.273197292819559E-24)126 254 Q
(POSITION #\(-0.8 0.0 0.0\) VELOCITY #\(0.0 0.0 0.0\)\))126 268 Q(>)126 282 Q
F0 .291(6\) Because)90 310 R F1(:position)3.291 E F0 .29
(is an array we can operate also on the selected slot of that array)3.291 F
(in the following way:)126 324 Q F1 7.2(>\()126 352 S(setf)147.6 352 Q(\(aref)
154.8 366 Q(\(classical-particle-position electron-2\) 2\))169.2 380 Q(0.2\))
154.8 394 Q(0.2)126 408 Q 7.2(>e)126 422 S(lectron-2)147.6 422 Q
(#S\(CLASSICAL-PARTICLE MASS 9.1091E-31 CHARGE)126 436 Q
(-1.6021E-19 MAGNETIC-MOMENT -9.273197292819559E-24)126 450 Q
(POSITION #\(-0.8 0.0 0.2\) VELOCITY #\(0.0 0.0 0.0\)\))126 464 Q(>)126 478 Q
(setf)126 506 Q F0 .312(is a very powerful facility)3.312 F 3.312(.I)-.78 G
3.312(ta)292.86 506 S .312(ccesses and modi\214es values of speci\214ed data)
304.836 506 R(items in situ.)126 520 Q 2.245
(7\) Existing de\214nitions of structures can be reused in de\214ning lar)90
548 R 2.245(ger structures which)-.216 F
(incorporate the already existing ones:)126 562 Q F1
(\(defstruct \(quantum-particle)126 590 Q(\(:include classical-particle\)\))
226.8 604 Q(\(flavour 'electron\))140.4 618 Q(\(colour 'white\))140.4 632 Q
(\(spin 'up\)\))140.4 646 Q F0 .745(8\) When a quantum particle is made, it in\
corporates the properties of a classical particle)90 674 R
(and adds some new properties to it:)126 688 Q EP
%%Page: 23 23
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-2)293.004 50 S 3(3-)306 50 S/F1 12/Courier@0 SF 7.2
(>\()126 86 S(make-quantum-particle\))147.6 86 Q
(#S\(QUANTUM-PARTICLE MASS 9.1091E-31 CHARGE -1.6021E-19)126 100 Q
(MAGNETIC-MOMENT -9.273197292819559E-24 POSITION #\(0.0)126 114 Q
(0.0 0.0\) VELOCITY #\(0.0 0.0 0.0\) FLAVOUR ELECTRON)126 128 Q
(COLOUR WHITE SPIN UP\))126 142 Q(>)126 156 Q F0 .108(9\) Structures are the p\
recursors of objects. Common Lisp provides the most elaborate and)90 184 R .274
(powerful object oriented programming facility of all object oriented language\
s.)126 198 R(It)6.273 E 3.347
(is called CLOS \(Common Lisp Object System\). Consequently)126 212 R 9.347(,s)
-.78 G 3.347(tructures in)464.329 212 R 1.706
(Common Lisp are used rather infrequently nowadays. However *Lisp does not)126
226 R 3.77(implement CLOS in its parallel part. For this reason we won')126 240
R 6.77(tg)-.216 G 6.77(ob)473.902 240 S(eyond)492.672 240 Q
(structures this time.)126 254 Q/F2 12/Times-Bold@0 SF(Summary)75 282 Q F0
(1\) Special variables in Common Lisp programs are de\214ned using)90 310 Q F1
(defvar)3 E F0(.)A 2.216(2\) T)90 324 R 2.215
(raditionally the names of Common Lisp special variables begin and end with an)
-.42 F(asterisk.)126 338 Q 1.57
(3\) Structure types are de\214ned using the macro)90 352 R F1(defstruct)4.57 E
F0 4.57(.T)C 1.57(he macro automatically)406.216 352 R
(generates and compiles creation and accessor functions.)126 366 Q(4\) T)90 380
Q 3(oc)-.84 G(reate a structure instance use a)123.816 380 Q F1(make-<)3 E/F3
12/Courier-Oblique@0 SF(structure-name)A F1(>)A F0(function.)3 E(5\) The defau\
lt values of slots can be altered during structure instantiation.)90 394 Q 6.42
(6\) T)90 408 R 9.42(oa)-.84 G 6.42
(ccess a particular slot in a structure use a function)136.656 408 R F1(<)9.42
E F3(structure-)A(name)126 422 Q F1(>-<)A F3(slot-name)A F1(>)A F0(.)A .504(7\
\) The accessor functions can be used to modify the values of the slots if com\
bined with)90 436 R F1(setf)126 450 Q F0(.)A .896
(8\) Existing structures can be used to de\214ne new lar)90 464 R .895
(ger structures, which incorporate the)-.216 F(already existing ones.)126 478 Q
EP
%%Page: 24 24
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-2)293.004 50 S 3(4-)306 50 S/F1 16/Times-Roman@0 SF
(Lesson 5)277.336 90 Q(Input and Output)251.336 108 Q/F2 12/Times-Bold@0 SF
(Format)75 144 Q F0 1.234(Like Fortan and C, Common Lisp has a very elaborate)
90 172 R/F3 12/Courier@0 SF(format)4.235 E F0 1.235(function. It has also a)
4.235 F(variety of simpler functions for I/O:)90 186 Q(1\) Let')90 214 Q 3(st)
-.66 G(ry some simple functions \214rst. Compare:)133.332 214 Q F3 7.2(>\()126
242 S(print electron-1\))147.6 242 Q
(#S\(CLASSICAL-PARTICLE MASS 9.1091E-31 CHARGE)126 270 Q
(-1.6021E-19 MAGNETIC-MOMENT -9.273197292819559E-24)126 284 Q
(POSITION #\(0.0 0.0 0.0\) VELOCITY #\(0.0 0.0 0.0\)\))126 298 Q
(#S\(CLASSICAL-PARTICLE MASS 9.1091E-31 CHARGE)126 312 Q
(-1.6021E-19 MAGNETIC-MOMENT -9.273197292819559E-24)126 326 Q
(POSITION #\(0.0 0.0 0.0\) VELOCITY #\(0.0 0.0 0.0\)\))126 340 Q 7.2(>\()126
354 S(pprint electron-1\))147.6 354 Q(#S\(CLASSICAL-PARTICLE MASS 9.1091E-31)
126 382 Q(CHARGE -1.6021E-19)284.4 396 Q(MAGNETIC-MOMENT)284.4 410 Q
(-9.273197292819559E-24)126 424 Q(POSITION #\(0.0 0.0 0.0\))284.4 438 Q
(VELOCITY #\(0.0 0.0 0.0\)\))284.4 452 Q(>)126 466 Q F0(2\) Function)90 494 Q
F3(format)3 E F0
(allows more elaborate operations on output strings. First compare:)3 E F3 7.2
(>\()126 522 S(format t "Hello World"\))147.6 522 Q(Hello World)126 536 Q(NIL)
126 550 Q 7.2(>\()126 564 S(format nil "Hello World"\))147.6 564 Q
("Hello World")126 578 Q(>)126 592 Q F0 .176(In the \214rst case the function \
evaluates a side action \(printing\) and returns)126 620 R F3(nil)3.177 E F0
6.177(.I)C(n)516 620 Q
(the second case the function returns the formatted string.)126 634 Q 1.942(3\
\) Like in C or in Fortran, the string can contain a variety of format directi\
ves.)90 662 R(The)7.941 E(directives begin with tilde ")126 676 Q F3(~)A F0
(". Compare:)A F3 7.2(>\()126 704 S
(format nil "~&Mrs Barling is ~D years old" 40\))147.6 704 Q EP
%%Page: 25 25
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-2)293.004 50 S 3(5-)306 50 S/F1 12/Courier@0 SF
("Mrs Barling is 40 years old")126 86 Q 7.2(>\()126 100 S
(format nil "~&Mrs Barling is ~B years old" 40\))147.6 100 Q
("Mrs Barling is 101000 years old")126 114 Q 7.2(>\()126 128 S
(format nil "~&Mrs Barling is ~O years old" 40\))147.6 128 Q
("Mrs Barling is 50 years old")126 142 Q 7.2(>\()126 156 S
(format nil "~&Mrs Barling is ~X years old" 40\))147.6 156 Q
("Mrs Barling is 28 years old")126 170 Q 7.2(>\()126 184 S
(format nil "~&Mrs Barling is ~R years old" 40\))147.6 184 Q
("Mrs Barling is forty years old")126 198 Q 7.2(>\()126 212 S
(format nil "~&Mrs Barling is ~@R years old" 40\))147.6 212 Q
("Mrs Barling is XL years old")126 226 Q(>)126 240 Q F0
(4\) Floating point numbers can be formatted with)90 268 Q F1(~F)3 E F0(or)3 E
F1(~E)3 E F0(:)A F1 7.2(>\()126 296 S
(format nil "~&I paid $~F for this car" 35725.23\))147.6 296 Q
("I paid $35725.23 for this car")126 310 Q 7.2(>\()126 324 S
(format nil "~&I paid $~E for this car" 35725.23\))147.6 324 Q
("I paid $35725.23 for this car")126 338 Q 7.2(>\()126 352 S
(format nil "~&I paid $~8,5E for this car" 35725.23\))147.6 352 Q
("I paid $3.57252E+4 for this car")126 366 Q(>)126 380 Q F0 1.219
(5\) The function)90 408 R F1(format)4.219 E F0 1.22
(can take care of pluralising nouns. The directives)4.219 F F1(~:@P)4.22 E F0
(and)4.22 E F1(~:P)126 422 Q F0(are used for that:)3 E F1 7.2(>\()126 450 S
(format nil "~D tr~:@P/~D win~:P" 7 1\))147.6 450 Q("7 tries/1 win")126 464 Q
7.2(>\()126 478 S(format nil "~D tr~:@P/~D win~:P" 1 0\))147.6 478 Q
("1 try/0 wins")126 492 Q 7.2(>\()126 506 S
(format nil "~D tr~:@P/~D win~:P" 1 3\))147.6 506 Q("1 try/3 wins")126 520 Q(>)
126 534 Q F0(6\) The directives)90 562 Q F1(~A)3 E F0(and)3 E F1(~S)3 E F0
(take any symbolic expression including numbers:)3 E F1 7.2(>\()126 590 S
(format nil "The first list is ~A" '\(a b c d\)\))147.6 590 Q
("The first list is \(A B C D\)")126 604 Q 7.2(>\()126 618 S
(format nil "The first list is ~S" '\(a b c d\)\))147.6 618 Q
("The first list is \(A B C D\)")126 632 Q(>)126 646 Q F0 .753
(7\) The function)90 674 R F1(format)3.753 E F0 .752
(has great many other features. Its discussion takes 29 pages in)3.753 F
(CLtL2.)126 688 Q EP
%%Page: 26 26
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-2)293.004 50 S 3(6-)306 50 S/F1 12/Times-Bold@0 SF
-.216(Wr)75 86 S(iting data on \214les).216 E F0 .239(There are various ways t\
o write and read \214les in Common Lisp. The easiest way is to use)90 114 R
3.659(the function)90 128 R/F2 12/Courier@0 SF(with-open-file)6.659 E F0 6.659
(,w)C 3.659(hich takes care of most other details. The \214le)277.101 128 R
(remains open only within the body of that function.)90 142 Q(1\) T)90 170 Q
(ry the following:)-.42 E F2 7.2(>\()126 198 S
(with-open-file \(roman-numerals "roman.dat")147.6 198 Q(:direction :output\))
370.8 212 Q(\(dotimes \(i 20\))154.8 226 Q
(\(format roman-numerals "~D = ~@R~%" i i\)\)\))169.2 240 Q(NIL)126 254 Q(>)126
268 Q F0 3.393
(Observe several new points: the name of the output stream inside the Lisp)126
296 R 1.123(program is ")126 310 R F2(roman-numerals)A F0 1.123
(". This output stream corresponds to UNIX \214le)B(")126 324 Q F2(roman.dat)A
F0 2.442(". The same function)B F2(with-open-file)5.443 E F0 2.443
(can be used both for)5.443 F .179
(reading and for writing depending on the value of the key)126 338 R F2
(:direction)3.179 E F0 3.179(.T)C(he)493.093 338 Q F2(~%)3.179 E F0 3.354
(format directive prints new-line at the end of the string. If you don')126 352
R 6.355(tw)-.216 G(ant)507.336 352 Q F2(dotimes)126 366 Q F0 3.603
(to return anything you can skip the third ar)6.603 F 3.602
(gument in the list -)-.216 F F2(dotimes)126 380 Q F0 2.004(will then return)
5.004 F F2(nil)5.004 E F0 2.004(as the default. The \214rst ar)5.004 F 2.004
(gument to)-.216 F F2(format)5.004 E F0 1.858
(function is the name of the destination stream. ")126 394 R F2(t)A F0 4.858
("i)C 4.858(st)391.028 394 S 1.858(aken to mean "standard)403.89 394 R
(output", and ")126 408 Q F2(nil)A F0 3("m)C(eans "no output".)231.624 408 Q
.964(2\) Now go to the UNIX shell and inspect the \214le ")90 422 R F2
(roman.dat)A F0 3.964("w)C .964(hich Lisp created in)424.128 422 R
(your current directory:)126 436 Q F2
(gustav@arp:~/Lispcourse 206 $ cat roman.dat)126 464 Q 7.2(0=0)126 478 S 7.2
(1=I)126 492 S 7.2(2=I)126 506 S(I)162 506 Q 7.2(3=I)126 520 S(II)162 520 Q 7.2
(4=I)126 534 S(V)162 534 Q 7.2(5=V)126 548 S 7.2(6=V)126 562 S(I)162 562 Q 7.2
(7=V)126 576 S(II)162 576 Q 7.2(8=V)126 590 S(III)162 590 Q 7.2(9=I)126 604 S
(X)162 604 Q(10 = X)126 618 Q(11 = XI)126 632 Q(12 = XII)126 646 Q(13 = XIII)
126 660 Q(14 = XIV)126 674 Q(15 = XV)126 688 Q EP
%%Page: 27 27
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-2)293.004 50 S 3(7-)306 50 S/F1 12/Courier@0 SF
(16 = XVI)126 86 Q(17 = XVII)126 100 Q(18 = XVIII)126 114 Q(19 = XIX)126 128 Q
(gustav@arp:~/Lispcourse 207 $)126 142 Q F0 .506(3\) Common Lisp has provision\
s only for byte or character streams. There are no streams)90 170 R .784(of re\
als, integers, etc. The programmer is responsible for coding reals into bytes.)
126 184 R .148(This is an obvious hassle and a shortcoming. The reason for thi\
s is that at the time)126 198 R .765
(Common Lisp was originally conceived there were no agreed on IEEE standards)
126 212 R .439(for \215oating point representations available yet. Even nowada\
ys integer or \215oating)126 226 R 2.173(point number \214les are seldom porta\
ble across various architectures, unless the)126 240 R .944(architectures supp\
ort the IEEE \215oating point representation - not all systems do!)126 254 R
3.249(If instead you take care of representing \215oating point numbers and in\
tegers)126 268 R 1.943(yourself you'll be always portable.)126 282 R 1.943
(Common Lisp, like Ada is paranoid about)7.943 F
(portability and operating system independence.)126 296 Q(4\) W)90 310 Q
(riting binary \214les is as easy as writing \214les of characters:)-.48 E F1
7.2(>\()126 338 S(with-open-file \(binary-numerals "binary.dat")147.6 338 Q
(:direction :output)270 352 Q(:element-type 'unsigned-byte\))270 366 Q
(\(dotimes \(i 20\))255.6 380 Q(\(write-byte i binary-numerals\)\)\))277.2 394
Q(NIL)126 408 Q(>)126 422 Q F0 .185(Here we had to use a special function)126
450 R F1(write-byte)3.186 E F0 .186(which converts an integer to)3.186 F 3(ab)
126 464 S(yte and writes it on the output stream.)140.328 464 Q(5\) W)90 478 Q
3(ec)-.96 G(an view this newly created \214le of bytes with UNIX program)127.02
478 Q F1(od)3 E F0(:)A F1(gustav@arp:~/Lispcourse 214 $ od -b binary.dat)126
506 Q 7.2(0000000 000)126 520 R(001 002 003 004 005 006 007 010 011 012)7.2 E
(013 014 015 016 017)126 534 Q 7.2(0000020 020)126 548 R(021 022 023)7.2 E
(0000024)126 562 Q(gustav@arp:~/Lispcourse 215 $)126 576 Q F0 3.717
(6\) The function)90 604 R F1(with-open-file)6.718 E F0 3.718
(is a syntactic sugar masking a slightly more)6.718 F(complex operation:)126
618 Q F1 7.2(>\()126 646 S(with-open-stream)147.6 646 Q(\(binary-numerals)154.8
660 Q(\(open "binary.dat" :direction :output)169.2 674 Q
(:element-type 'unsigned-byte\)\))212.4 688 Q EP
%%Page: 28 28
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-2)293.004 50 S 3(8-)306 50 S/F1 12/Courier@0 SF
(\(dotimes \(i 20\))154.8 86 Q(\(write-byte i binary-numerals\)\))169.2 100 Q
(\(close binary-numerals\)\))154.8 114 Q(NIL)126 128 Q(>)126 142 Q F0 4.691
(The function)126 170 R F1(with-open-stream)7.691 E F0 4.69
(can operate on more broadly de\214ned)7.691 F 1.459(Common Lisp streams: thos\
e can be special devices, strings, etc. The functions)126 184 R F1(open)126 198
Q F0(and)3 E F1(close)3 E F0
(do much the same as their Fortran and C relatives.)3 E/F2 12/Times-Bold@0 SF
(Reading data fr)75 226 Q(om external \214les)-.216 E F0 2.646(1\) The simple \
reading from the keyboard can be accomplished simply by using the)90 254 R
(functions)126 268 Q F1(read)180.864 268 Q F0(and)3 E F1(read-line)3 E F0(:)A
F1 7.2(>\()126 296 S(read\))147.6 296 Q(twas)126 310 Q(TWAS)126 324 Q 7.2(>\()
126 338 S(read\))147.6 338 Q(\264twas)126 352 Q(\(QUOTE TWAS\))126 366 Q 7.2
(>\()126 380 S(read\))147.6 380 Q(\(twas brillig and the slithy toves\))126 394
Q(\(TWAS BRILLIG AND THE SLITHY TOVES\))126 408 Q 7.2(>\()126 422 S(read\))
147.6 422 Q(twas brillig and the slithy toves)126 436 Q(TWAS)126 464 Q(>)126
478 Q(Clearing input from *debug-io*)126 492 Q
(>>Error: The symbol BRILLIG has no global value)126 506 Q(SYMBOL-VALUE:)126
534 Q(Required arg 0 \(S\): BRILLIG)147.6 548 Q 7.2(:C 0:)126 562 R
(Try evaluating BRILLIG again)7.2 E 7.2(:A 1:)126 576 R
(Abort to Lisp Top Level)7.2 E(-> 1)126 604 Q(Abort to Lisp Top Level)126 618 Q
(Back to Lisp Top Level)126 632 Q 7.2(>\()126 660 S(read-line\))147.6 660 Q
(twas brillig and the slithy toves)126 674 Q
("twas brillig and the slithy toves")126 688 Q EP
%%Page: 29 29
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-2)293.004 50 S 3(9-)306 50 S/F1 12/Courier@0 SF(NIL)
126 86 Q(>)126 100 Q F0 .896(2\) The functions)90 128 R F1(read)3.896 E F0(and)
3.896 E F1(read-line)3.896 E F0 .896(can take up to 4 optional ar)3.896 F .897
(guments \()-.216 F/F2 12/Times-Italic@0 SF(optional)A F0(means that they don')
126 142 Q 3(th)-.216 G(ave to be used\).)238.44 142 Q F1 7.2(>\()126 170 S
(with-open-file \(roman-numerals "roman.dat")147.6 170 Q(:direction :input\))
370.8 184 Q(\(do \(\(line \(read-line roman-numerals nil\))212.4 198 Q
(\(read-line roman-numerals nil\)\)\))284.4 212 Q(\(\(not line\)\))241.2 226 Q
(\(print line\)\)\))226.8 240 Q("0 = 0")126 268 Q("1 = I")126 282 Q("2 = II")
126 296 Q("3 = III")126 310 Q("4 = IV")126 324 Q("5 = V")126 338 Q("6 = VI")126
352 Q("7 = VII")126 366 Q("8 = VIII")126 380 Q("9 = IX")126 394 Q("10 = X")126
408 Q("11 = XI")126 422 Q("12 = XII")126 436 Q("13 = XIII")126 450 Q
("14 = XIV")126 464 Q("15 = XV")126 478 Q("16 = XVI")126 492 Q("17 = XVII")126
506 Q("18 = XVIII")126 520 Q("19 = XIX")126 534 Q(NIL)126 548 Q(>)126 562 Q F0
.7(Observe that here we have uncovered yet another syntactic variant of)126 590
R F1(do)3.7 E F0(.)A
(This new feature is easier to see on the following example:)126 604 Q F1 7.2
(>\()126 632 S(do \(\(i 0)147.6 632 Q(\(1+ i\)\)\))176.4 646 Q(\(\(> i 10\)\))
169.2 660 Q(\(print i\)\))154.8 674 Q(0)126 702 Q EP
%%Page: 30 30
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-3)293.004 50 S 3(0-)306 50 S/F1 12/Courier@0 SF(1)
126 86 Q(2)126 100 Q(3)126 114 Q(4)126 128 Q(5)126 142 Q(6)126 156 Q(7)126 170
Q(8)126 184 Q(9)126 198 Q(10)126 212 Q(NIL)126 226 Q(>)126 240 Q F0 .14
(The list of bindings may contain three elements, with the third one telling)
126 268 R F1(do)3.14 E F0(how)3.14 E 2.229(to `)126 282 R(`increment')-.888 E
5.229('t)-.888 G 2.229
(his variable during iterations. In our \214le reading example we)211.326 282 R
-.888(``)126 296 S(increment').888 E(')-.888 E F1(line)203.082 296 Q F0 2.343
(by reading it again. W)5.343 F 5.343(ec)-.96 G 2.343(ontinue doing so until)
368.616 296 R F1(read-)5.343 E(line)126 310 Q F0(returns)3 E F1(nil)3 E F0(.)A
(3\) Similarly we can read our binary data \214le:)90 338 Q F1 7.2(>\()126 366
S(with-open-file \(binary-numerals "binary.dat")147.6 366 Q(:direction :input)
291.6 380 Q(:element-type 'unsigned-byte\))291.6 394 Q(\(do \(\(byte)212.4 408
Q(\(read-byte binary-numerals nil\))255.6 422 Q
(\(read-byte binary-numerals nil\)\)\))255.6 436 Q(\(\(not byte\)\))241.2 450 Q
(\(print byte\)\)\))226.8 464 Q(0)126 492 Q(1)126 506 Q(2)126 520 Q(3)126 534 Q
(4)126 548 Q(5)126 562 Q(6)126 576 Q(7)126 590 Q(8)126 604 Q(9)126 618 Q(10)126
632 Q(11)126 646 Q(12)126 660 Q(13)126 674 Q(14)126 688 Q EP
%%Page: 31 31
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-3)293.004 50 S 3(1-)306 50 S/F1 12/Courier@0 SF(15)
126 86 Q(16)126 100 Q(17)126 114 Q(18)126 128 Q(19)126 142 Q(NIL)126 156 Q(>)
126 170 Q/F2 12/Times-Bold@0 SF(Summary)75 198 Q F0 2.631
(1\) The simplest way to print a Common Lisp datum is to use)90 226 R F1(print)
5.631 E F0(or)5.631 E F1(pprint)5.631 E F0(.)A F1(pprint)126 240 Q F0
(stands for `)3 E(`pretty print')-.888 E('.)-.888 E(2\))90 254 Q F1(format)
5.737 E F0 2.737
(is a more elaborate facility for printing output similar to corresponding)
5.737 F .644(facilities in C and in Fortran. There are formatting directives f\
or decimal, digital,)126 268 R 1.08(octal, hexadecimal, literal, and roman out\
puts for integers. Formatting directives)126 282 R 4.439
(are also available for \215oating point numbers. Nouns can be automatically)
126 296 R 4.203(pluralised. More)126 310 R 1.204
(general formatting directives allow to print any Common Lisp)4.203 F
(symbols and data structures.)126 324 Q(3\) T)90 338 Q 3(oc)-.84 G
(reate a data \214le and write on it use the)123.816 338 Q F1(with-open-file)3
E F0(function)3 E
(4\) Common Lisp allows only character \(text\) and byte \214les.)90 352 Q(5\))
90 366 Q F1(with-open-file)3.631 E F0 .631
(can be also used to write byte \214les. The)3.631 F F1(write-byte)3.631 E F0
(function)3.631 E(takes an integer as an ar)126 380 Q
(gument and writes a byte on the output stream.)-.216 E(6\))90 394 Q F1
(with-open-file)6.856 E F0 3.857(is a syntactic sugar for the combination of)
6.856 F F1(with-open-)6.857 E(stream)126 408 Q F0(,)A F1(open)3 E F0 3(,a)C(nd)
215.328 408 Q F1(close)3 E F0(.)A 2.892(7\) The functions)90 422 R F1(read)
5.891 E F0(and)5.891 E F1(read-line)5.891 E F0 2.891
(can be used to read data either from the)5.891 F(keyboard or from \214les.)126
436 Q .744(8\) The initialisation clause of)90 450 R F1(do)3.744 E F0 .744
(can be used to tell)3.744 F F1(do)3.744 E F0 .744
(how to increment the initialised)3.744 F(variable during iterations.)126 464 Q
2.267(9\) The functions)90 478 R F1(read)5.266 E F0(and)5.266 E F1(read-line)
5.266 E F0 2.266(have facilities for detecting the end of \214le)5.266 F
(condition.)126 492 Q 3.507(10\) The function)90 506 R F1(read-byte)6.507 E F0
3.508(reads a byte from an input stream and returns the)6.507 F
(corresponding integer)126 520 Q(.)-.66 E F2(The closing r)75 548 Q(emark)-.216
E F0 3.352 -.96(We h)90 576 T 1.431
(ave now covered some of the most basic features of Common Lisp. In languages)
.96 F .705(such as Fortran 77, or Pascal, even C,)90 590 R .705
(that would be almost all that the language of)6.705 F(fers.)-.216 E 2.378(In \
Common Lisp, this is only a very tiny part of the language. The real strength \
of)90 604 R .187(Common Lisp is in symbol manipulation. W)90 618 R 3.187(es)
-.96 G .187(kipped entirely symbols, lists, conses.)317.701 618 R -.96(We)6.187
G 2.88(only touched strings. W)90 632 R 5.88(es)-.96 G 2.88
(aid nothing about vectors, hash tables, packages, objects,)228.216 632 R .131
(macros, methods, predicates \(of which there are great many\), numerous contr\
ol structures)90 646 R 1.082(apart from)90 660 R F1(if)4.081 E F0(,)A F1(do)
4.081 E F0 4.081(,a)C(nd)193.769 660 Q F1(dotimes)4.081 E F0 4.081(,d)C 1.081
(eclarations, property lists, general sequences, error)273.331 660 R 1.545
(signaling. W)90 674 R 4.545(eo)-.96 G 1.545
(nly mentioned the compilation, we haven')167.79 674 R 4.545(tm)-.216 G 1.545
(entioned at all the CLtL2)395.16 674 R -.888(``)90 688 S(Loop Facility').888 E
(', conditions, series, generators, and gatherers.)-.888 E EP
%%Page: 32 32
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-3)293.004 50 S 3(2-)306 50 S 3.668(But with the sma\
ll part of Common Lisp presented in the \214rst 5 lessons we are)90 86 R(suf)90
100 Q(\214ciently well equipped to begin working with the Connection Machine *\
Lisp system.)-.216 E .041(*Lisp still suf)90 128 R .041
(fers from many limitations of the CM2 architecture. For this reason the only)
-.216 F 1.267
(parallel data structures that are allowed at present are based on)90 142 R
1.266(numbers or characters.)7.266 F -1.2(Yo)90 156 S 4.327(uc)1.2 G 1.327
(annot have)119.119 156 R/F1 12/Courier@0 SF(pvars)4.327 E F0 1.327
(of symbols, or)4.327 F F1(pvars)4.327 E F0 1.327(of lists, or)4.327 F F1
(pvars)4.327 E F0 1.328(of trees of objects.)4.327 F .601
(This limitation derives from the fact that the CM2 had a very lar)90 170 R .6
(ge number of very slow)-.216 F 1.616(1-bit processors and only limited amount\
 of memory available to each processor)90 184 R 7.616(.T)-.66 G(he)510.672 184
Q 1.998(CM5 architecture is lar)90 198 R 1.997
(gely free of such limitations - although the presence of vector)-.216 F 1.357
(units restricts the type of data that can be placed in their slots. Still the\
 TMC software)90 212 R 1.911(engineers have not, as yet, released a version of\
 *Lisp \(or of any other programming)90 226 R .651(language\) which would be a\
ble to take a full advantage of this new architecture.)90 240 R .652(On the)
6.652 F 2.805(other hand, *Lisp provides all that is available under CM Fortra\
n and C* - lar)90 254 R(gely)-.216 E 2.34(because much less is expected of tho\
se languages - plus an interactive programming)90 268 R
(environment which those languages don')90 282 Q 3(th)-.216 G(ave.)299.424 282
Q 1.108(The new exciting architecture of CM5 allows, in principle, for an unli\
mited richness of)90 310 R 2.195(data types and structures to be deposited on \
every node and an unlimited number of)90 324 R 1.837(communication styles and \
processes between those nodes. But, all this is much easier)90 338 R .716(said\
 than done. It is a common feature of present day MPPs that software generally\
 lags)90 352 R 2.723(far behind the available hardware. This is very well illu\
strated by the CM5, which,)90 366 R 2.389(although of MIMD architecture of)90
380 R 2.389(fers only SIMD high level languages, with MIMD)-.216 F 3.005(progr\
amming restricted to PVM \(very highly portable\) or CMMD \(completely non-)90
394 R(portable\).)90 408 Q .078
(In the following lessons we will learn how SIMD programming dif)90 436 R .078
(fers from conventional)-.216 F .105(sequential programming. The SIMD programm\
ing model is not as restrictive as it is often)90 450 R 2.36(claimed. In the l\
ast 3 lessons of the course we will learn how quite an unstructured)90 464 R
3.067(system of randomly scattered interacting particles can be handled within\
 the SIMD)90 478 R(programming paradigm.)90 492 Q EP
%%Page: 33 33
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-3)293.004 50 S 3(3-)306 50 S/F1 16/Times-Roman@0 SF
(Lesson 6)277.336 90 Q(Connecting to the Connection Machine *Lisp)160.008 108 Q
/F2 12/Times-Bold@0 SF(De\214ning the DISPLA)75 144 Q 2.208 -1.104(Y, u)-1.104
H(sing .Xauthority)1.104 E 3(,a)-.66 G(nd invoking jrun)298.152 144 Q F0 .207(\
1\) In order to use *Lisp you must \214rst login on octavia. Octavia serves as\
 the front end to)90 172 R .438
(the ANU Connection Machine CM5. Octavia is a Sun 690 MP with 4 processors,)126
186 R .237(256 MB memory and a relatively modest disk space \(as far as superc\
omputers are)126 200 R 2.559(concerned\) of some 14 GB. But Octavia doesn')126
214 R 5.559(tt)-.216 G 2.558(alk directly to the CM5. It)383.88 214 R .887
(provides user disk space, compilation software, *Lisp simulator)126 228 R
3.887(,C)-.48 G .887(MF simulator)452.917 228 R(,)-.48 E 3.544
(and job queue software.)126 242 R 3.544(The latter is called DJM. It')9.544 F
6.543(sb)-.66 G 3.543(een written at the)428.391 242 R 1.561(Minnesota Superco\
mputer Center speci\214cally for the Connection Machine. It is)126 256 R 2.186
(not a general applicability queuing software. It works only on the Connection)
126 270 R(Machine.)126 284 Q .674
(2\) The computer which talks directly to the CM5 is caesar)90 298 R 3.674(.I)
-.66 G 3.674(ti)386.038 298 S 3.675(sas)396.384 298 S .675(mall SP)418.398 298
R .675(ARCstation 2)-1.104 F .219(\(a pizza box\) hidden inside the lar)126 312
R .219(ger Connection Machine box. That machine has)-.216 F 1.456
(very limited resources \(only 64 MB of memory and 2.5 GB of disk space\) and)
126 326 R(should not be accessed directly \(although it can be\).)126 340 Q
.247(2\) In order to obtain a window on octavia select ")90 354 R/F3 12
/Courier@0 SF(Connections)A F0 3.246("a)C .246(nd then ")422.652 354 R F3
(octavia)A F0(")A .669
(from the root menu on the ARP workstations - from other systems you will have)
126 368 R(to use)126 382 Q F3(telnet)164.532 382 Q F0(or)3 E F3(rlogin)3 E F0
(.)A .611(3\) Once you are on octavia, transfer a \214le)90 396 R F3
(.Xauthority)3.611 E F0 .611(from your home directory on)3.611 F .169
(arp, for example using)126 410 R F3(ftp)3.169 E F0 .17(in a binary mode or)
3.169 F F3(rcp)3.17 E F0 .17(\(from arp')3.17 F 3.17(ss)-.66 G .17
(ide\). Make sure)446.684 410 R(that \214le has protection)126 424 Q F3 -4.2
(rw------- \(600\).)3 F F0(4\) De\214ne your X1)90 438 Q(1)-.444 E F3(DISPLAY)3
E F0(on octavia:)3 E F3 7.2(%s)126 466 S(etenv DISPLAY <)147.6 466 Q/F4 12
/Courier-Oblique@0 SF(my_machine>)A F3(:0.0)A/F5 12/Times-Italic@0 SF
(if you use csh or tcsh, or)126 480 Q F3 7.2(%e)126 494 S(xport DISPLAY=<)147.6
494 Q F4(my_machine)A F3(>:0.0)A F5(if you use bash, or)126 508 Q F3 7.2(%D)126
522 S(ISPLAY=<)147.6 522 Q F4(my_machine)A F3(>:0.0; export DISPLAY)A F5
(if you use sh)126 536 Q F0 .17(5\) Now you are ready to invoke)90 564 R F3
(Epoch)3.17 E F0 .17(on caesar)3.17 F 3.17(.I)-.66 G 3.17(no)340.64 564 S .17
(rder to do that you must submit an)355.81 564 R
(interactive job through the DJM:)126 578 Q F3
(gustav@octavia:/home/id005c/gustav 206 $ jrun -export)126 606 Q
(/usr/new/bin/epoch)126 620 Q(Number of processors \(32\)?)126 634 Q
(Estimated cpu time \(5min\)? 30min)126 648 Q(Estimated memory \(64M\)?)126 662
Q(Job id is 46580.)126 676 Q([Type ~^B to disconnect, ~^C to kill.])126 690 Q
EP
%%Page: 34 34
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-3)293.004 50 S 3(4-)306 50 S/F1 12/Courier@0 SF
([Connected to caesar.anu.edu.au /dev/ttyp0.])126 86 Q
(*** Job epoch \(46580\) procs 32, mem 64M, cpu 30min,)126 100 Q
(server caesar:0)126 114 Q(*** gustav /usr/new/bin/epoch started on Sun Jan 16)
126 128 Q(10:40:36 1994)126 142 Q/F2 12/Times-BoldItalic@0 SF(Notes:)126 170 Q
F0(a\))126 184 Q F1(jrun)4.328 E F0 1.327
(does not execute jobs on the Connection Machine. It executes jobs on)4.328 F
(caesar)162 198 Q 3.08(,b)-.48 G .081
(ut now every time you access the Connection Machine itself, your)203.576 198 R
(Connection Machine job will be accounted for)162 212 Q(.)-.66 E 2.337
(b\) you must type the full pathname of the command you want to execute on)126
226 R(caesar)162 240 Q .689(c\) the switch "-export" will export all your envi\
ronmental variables on octavia to)126 254 R(caesar)162 268 Q/F3 12/Times-Bold@0
SF(Establishing the session with the Connection Machine)75 296 Q F0 .575
(1\) By now you should get the caesar)90 324 R F1(Epoch)3.574 E F0 .574
(window on your ARP workstation. Invoke,)3.574 F 3.747
(as before, a second window with)126 338 R F1 3.748(C-z 2)6.748 F F0 6.748(.U)C
3.748(se your \214rst window as your)366.94 338 R
(worksheet, and the second window as your Lisp window)126 352 Q(.)-.78 E 1.886
(2\) Invoke the Connection Machine *Lisp by typing)90 366 R F1 1.886
(M-x run-lisp)4.886 F F0 1.886(in your second)4.886 F(window)126 380 Q 6(.T)
-.78 G(his time Epoch will ask you which Lisp you want to run. Answer:)180.216
380 Q F1(/usr/bin/starlisp-vu-dev-f7600)126 408 Q F0 1.732(3\) At this stage y\
ou have already started *Lisp, but you are still not connected to the)90 436 R
(CM5. T)126 450 Q(ype)-.84 E F1 7.2(>\()126 478 S(cm:finger\))147.6 478 Q
(32 PN System, 28164K mem. free, 7040K VU mem. free, 1)126 492 Q
(procs, TS-10/19/93-7:41 \(CMOST 7.2\) Daemon up: 2 days,)126 506 Q(1:24)126
520 Q 36(USER PID)126 548 R 7.2(CMPID TIME)241.2 548 R 21.6(TEXT ILH)342 548 R
(ILS)457.2 548 Q 21.6(IGS IGH VUS VUH)126 562 R(COMMAND)7.2 E 21.6
(daveh *10531)126 576 R 36(21)7.2 G 7.2(1:10 1360K)291.6 576 R 28.8(604K 48K)
392.4 576 R 28.8(0K 0K)126 590 R 21.6(128K 12K)212.4 590 R(gel2)306 590 Q(>)126
604 Q F0
(4\) In order to attach yourself to the Connection Machine issue the command)90
632 Q F1 7.2(>\()126 660 S(*cold-boot\))147.6 660 Q(;;; Not attached.)126 688 Q
(Attaching...)262.8 688 Q EP
%%Page: 35 35
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-3)293.004 50 S 3(5-)306 50 S/F1 12/Courier@0 SF
(1024)126 86 Q(\(32 32\))126 100 Q(10624)126 114 Q(>)126 128 Q F0 .643
(This command attaches you to the Connection Machine in the default mode. The)
126 156 R/F2 12/Times-Italic@0 SF(quantum)126 170 Q F0 6.625
(size of the machine is 1024 virtual processors. Y)9.625 F 6.626(our default)
-1.2 F .272(con\214guration for)126 184 R F1(pvars)3.272 E F0 .271
(is a parallel array 32 x 32 and your process ID is 10624.)3.272 F
(5\) Now issue the command)90 198 Q F1(\(cm:finger\))3 E F0(again:)3 E F1 7.2
(>\()126 226 S(cm:finger\))147.6 226 Q
(32 PN System, 26888K mem. free, 6720K VU mem. free, 2)126 240 Q
(procs, TS-10/19/93-7:41 \(CMOST 7.2\) Daemon up: 2 days,)126 254 Q(1:26)126
268 Q 36(USER PID)126 296 R 7.2(CMPID TIME)241.2 296 R 21.6(TEXT ILH)342 296 R
(ILS)457.2 296 Q 21.6(IGS IGH VUS VUH)126 310 R(COMMAND)7.2 E 28.8(daveh 10531)
126 324 R 36(21)7.2 G 7.2(3:30 1360K)291.6 324 R 28.8(604K 48K)392.4 324 R 28.8
(0K 0K)126 338 R 21.6(128K 12K)212.4 338 R(gel2)306 338 Q 14.4(gustav *10624)
126 352 R 43.2(10)7.2 G 14.4(:01 792K 144K)298.8 352 R(48K)457.2 352 Q 28.8
(0K 4K)126 366 R 28.8(64K 8K)219.6 366 R(starlisp-dhod-f7600)306 366 Q(>)126
380 Q F0 -1.2(Yo)126 408 S 3(us)1.2 G
(hould be able to see yourself attached to the Connection Machine.)153.132 408
Q .196(6\) Because of a bug in the DJM software, if you are the only user on t\
he system, you will)90 422 R 2.042(be char)126 436 R 2.042
(ged for the wall-clock connection time, even if you don')-.216 F 5.042(td)
-.216 G 5.042(oa)465.958 436 S(nything.)482.328 436 Q .594(This is a serious h\
andicap for all users of interactive programs \(this includes also)126 450 R
2.36(the CM5)126 464 R F1(Prism)5.36 E F0 2.36
(debugger used with CMF and C*\). The *Lisp remedy is to)5.36 F
(detach yourself from the machine:)126 478 Q F1 7.2(>\()126 506 S(cm:detach\))
147.6 506 Q(T)126 520 Q 7.2(>\()126 534 S(cm:finger\))147.6 534 Q
(32 PN System, 30736K mem. free, 7180K VU mem. free, 0)126 548 Q
(procs, TS-10/19/93-7:41 \(CMOST 7.2\) Daemon up:)126 562 Q(0:19)471.6 562 Q(>)
126 590 Q F0 2.551(7\) Y)90 618 R 2.551(ou can de\214ne an alternative default\
 geometry when attaching to the Connection)-1.2 F 2.476
(Machine. But your new default geometry must be always a multiple of 1024)126
632 R 1.697(which is a quantum of the)126 646 R F1(pvar)4.697 E F0 1.697
(size on our system. T)4.697 F 4.697(or)-.84 G 1.698(equest an alternative)
419.964 646 R(default geometry)126 660 Q F1(*cold-boot)217.848 660 Q F0
(in the following way:)3 E F1 7.2(>\()126 688 S
(*cold-boot :initial-dimensions '\(64 64 64\)\))147.6 688 Q EP
%%Page: 36 36
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-3)293.004 50 S 3(6-)306 50 S/F1 12/Courier@0 SF
(;;; Not attached.)126 86 Q(Attaching...)262.8 86 Q(1024)126 114 Q
(\(64 64 64\))126 128 Q(11044)126 142 Q(>)126 156 Q F0 1.063(8\) After a \214n\
ished session with *Lisp on the Connection Machine you should)90 184 R F1
(\(quit\))4.063 E F0 1.771(*Lisp and quit your)126 198 R F1(Epoch)4.771 E F0
1.772(session. This will return you back to octavia. The)4.771 F
(DJM will print some statistics referring to your job:)126 212 Q F1
(*** Job epoch \(46590\) procs 32, mem 64M, cpu 5min,)126 240 Q
(server caesar:0)126 254 Q(*** gustav /usr/new/bin/epoch started on Sun Jan 16)
126 268 Q(11:18:09 1994)126 282 Q
(*** Job terminated at Sun Jan 16 11:50:06 1994)126 296 Q(*** exitcode = 0000)
126 310 Q(*** procs 32, mem 40.9M, cpu 5.27min)126 324 Q(***)126 338 Q
(*** You requested 64M of memory but only used 40.9M.)126 352 Q
(*** The next time you run this job, you should request)126 366 Q
(*** less memory.)126 380 Q(This will let your job run earlier)255.6 380 Q
(*** and you will get your results sooner.)126 394 Q
(gustav@octavia:/home/id005c/gustav 222 $)126 408 Q/F2 12/Times-Bold@0 SF
(Summary)75 436 Q F0(1\) Octavia is the user front end to the ANU CM5)90 464 Q
3.486(2\) When connecting to octavia you should properly set up your X1)90 478
R 6.486(1e)-.444 G(nvironment)466.668 478 Q(\()126 492 Q F1(.Xauthority)A F0
(and)3 E F1(DISPLAY)3 E F0(\))A
(3\) caesar is the machine which talks directly to the Connection Machine)90
506 Q 1.253(4\) T)90 520 R 4.253(os)-.84 G 1.253
(tart an accounted job on caesar use)125.662 520 R F1(jrun)4.254 E F0 4.254(.O)
C 1.254(nly accounted jobs are allowed the)349.434 520 R
(access to the Connection Machine.)126 534 Q .536
(5\) The version of *Lisp to use on our Connection Machine is)90 548 R F1
(/usr/bin/starlisp-)3.536 E(vu-dev-f7600.)126 562 Q F0 1.503(6\) Having starte\
d *Lisp does not imply having made a connection with the CM5. The)90 576 R
(connection is established using the command)126 590 Q F1(\(*cold-boot\).)3 E
F0(7\) Y)90 604 Q(ou can see processes attached to the Connection Machine with)
-1.2 E F1(\(cm:finger\).)3 E F0(8\) T)90 618 Q 3(od)-.84 G
(etach yourself from the Connection Machine use)124.488 618 Q F1
(\(cm:detach\).)3 E F0 1.587(9\) The quantum)90 632 R F1(pvar)4.587 E F0 1.586
(size on the ANU CM5 is 1024. Y)4.587 F 1.586(ou can request an alternative)
-1.2 F .261(default geometry by using the)126 646 R F1(:initial-dimensions)
3.261 E F0 .262(switch to the)3.261 F F1(*cold-)3.262 E(boot)126 660 Q F0
(function.)3 E .735(10\) Use)90 674 R F1(\(quit\))3.735 E F0 .734
(to quit the *Lisp session \(it will also detach you from the CM5 if you)3.734
F(are still attached\) and quit)126 688 Q F1(Epoch)3 E F0(with)3 E F1(C-x C-c)3
E F0(to come back to Octavia.)3 E EP
%%Page: 37 37
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-3)293.004 50 S 3(7-)306 50 S -.444(11)90 86 S 3.126
(\)I).444 G 3.127(fy)112.674 86 S .127
(ou are a single user on the CM5 you will be char)125.797 86 R .127
(ged for the wall-clock time of the)-.216 F
(connection. This is caused by a bug in the DJM accounting system.)126 100 Q EP
%%Page: 38 38
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-3)293.004 50 S 3(8-)306 50 S/F1 16/Times-Roman@0 SF
(Lesson 7)277.336 90 Q -1.28(Wo)242.648 108 S(rking with pvars)1.28 E/F2 12
/Times-Bold@0 SF(Pvars, the Connection Machine parallel data structur)75 144 Q
(es)-.216 E F0(1\))90 172 Q/F3 12/Courier@0 SF(pvars)4.548 E F0 1.548
(are like Common Lisp arrays, but this time every)4.548 F F3(pvar)4.548 E F0
1.548(element sits on its)4.548 F .114(own virtual processor)126 186 R 3.114
(.T)-.66 G .115(here should be a *Lisp function)242.994 186 R/F4 12
/Courier-Oblique@0 SF(make-pvar)3.115 E F0 .115(for creating)3.115 F F3(pvars)
126 200 Q F0 3.999(,t)C 3.999(oc)172.335 200 S .999
(omply with Common Lisp tradition. But the part of *Lisp that lives)187.662 200
R .757
(on the Connection Machine is more like Fortran than like Lisp. It doesn')126
214 R 3.757(th)-.216 G .757(ave a)496.259 214 R 2.861
(proper Lisp-like stack management facility and a garbage collection. Instead,)
126 228 R 2.339
(*Lisp functions which operate on the CM5 use straightforward allocation and)
126 242 R 1.03(deallocation of data on the stack in the C style. T)126 256 R
4.029(oc)-.84 G 1.029(reate a permanent)385.788 256 R F3(pvar)4.029 E F0(on)
4.029 E(the stack use:)126 270 Q F3 7.2(>\()126 298 S(defpvar *the-grid* 0\))
147.6 298 Q(*THE-GRID*)126 312 Q(>)126 326 Q F0 1.252(The second ar)126 354 R
1.253(gument to function)-.216 F F3(defpvar)4.253 E F0 1.253
(initialises every element of)4.253 F F3(*the-)4.253 E(grid*)126 368 Q F0(to)3
E F3(0)184.536 368 Q F0(.)A(2\) W)90 396 Q 3(ec)-.96 G
(an view various elements of this)127.02 396 Q F3(pvar)3 E F0
(with the function)3 E F3(ppp)3 E F0(:)A F3 7.2(>\()126 424 S
(ppp *the-grid* :mode :grid :end '\(10 10\)\))147.6 424 Q(DIMENSION 0 \(X\))162
452 Q(----->)284.4 452 Q 7.2(0000000000)126 480 S 7.2(0000000000)126 494 S 7.2
(0000000000)126 508 S 7.2(0000000000)126 522 S 7.2(0000000000)126 536 S 7.2
(0000000000)126 550 S 7.2(0000000000)126 564 S 7.2(0000000000)126 578 S 7.2
(0000000000)126 592 S 7.2(0000000000)126 606 S(>)126 620 Q F0 .756(3\) A)90 648
R F3(pvar)3.756 E F0 .755(variable with zeroes all over is a boring thing to l\
ook at. There is a function)3.756 F .441(which creates a)126 662 R F3(pvar)
3.441 E F0 .441(which has a number of the corresponding virtual processor)3.441
F(in every slot. This function is called)126 676 Q F3(self-address!!)3 E F0(:)A
F3 7.2(>\()126 704 S(ppp \(self-address!!\) :mode :grid :end '\(10 10\)\))147.6
704 Q EP
%%Page: 39 39
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-3)293.004 50 S 3(9-)306 50 S/F1 12/Courier@0 SF
(DIMENSION 0 \(X\))162 86 Q(----->)284.4 86 Q 7.2(02461)126 114 S
(28 130 132 134 256 258)190.8 114 Q 7.2(13571)126 128 S(29 131 133 135 257 259)
190.8 128 Q 7.2(81)126 142 S 7.2(01)147.6 142 S 7.2(21)169.2 142 S 7.2(41)190.8
142 S(36 138 140 142 264 266)212.4 142 Q 7.2(91)126 156 S 7.2(11)147.6 156 S
7.2(31)169.2 156 S 7.2(51)190.8 156 S(37 139 141 143 265 267)212.4 156 Q
(16 18 20 22 144 146 148 150 272 274)126 170 Q
(17 19 21 23 145 147 149 151 273 275)126 184 Q
(24 26 28 30 152 154 156 158 280 282)126 198 Q
(25 27 29 31 153 155 157 159 281 283)126 212 Q
(32 34 36 38 160 162 164 166 288 290)126 226 Q
(33 35 37 39 161 163 165 167 289 291)126 240 Q(>)126 254 Q F0 .964
(4\) Observe that the array generated by)90 282 R F1(\(self-address!!\))3.964 E
F0 .963(is laid out on the virtual)3.964 F .849(processors in a somewhat pecul\
iar manner: in blocks of 4 x 2 integers. It is very)126 296 R
(seldom that you have to be concerned with the details of this lay-out.)126 310
Q(5\) The contents of a)90 324 Q F1(pvar)3 E F0(can be modi\214ed with the)3 E
F1(*setf)3 E F0(function:)3 E F1 7.2(>\()126 352 S
(*setf *the-grid* \(self-address!!\)\))147.6 352 Q(NIL)126 366 Q 7.2(>\()126
380 S(ppp *the-grid* :mode :grid :end '\(5 5\)\))147.6 380 Q(DIMENSION 0 \(X\))
162 408 Q(----->)284.4 408 Q 7.2(02461)126 436 S(28)190.8 436 Q 7.2(13571)126
450 S(29)190.8 450 Q 7.2(81)126 464 S 7.2(01)147.6 464 S 7.2(21)169.2 464 S 7.2
(41)190.8 464 S(36)212.4 464 Q 7.2(91)126 478 S 7.2(11)147.6 478 S 7.2(31)169.2
478 S 7.2(51)190.8 478 S(37)212.4 478 Q(16 18 20 22 144)126 492 Q(>)126 506 Q
F0 1.419(6\) Y)90 534 R 1.418(ou may have already noticed that there are two t\
ypes of *Lisp functions. The \214rst)-1.2 F .712
(type are functions whose names end with ")126 548 R F1(!!)A F0 .712
(". They return)B F1(pvars)3.712 E F0 3.712(.T)C .712(he second)473.636 548 R
2.396(type are functions whose names begin with ")126 562 R F1(*)A F0 2.396
(". They return scalar front end)B(variables, but their side ef)126 576 Q
(fects are operations performed on)-.216 E F1(pvars)3 E F0(.)A 1.437
(7\) There is an equivalent of Common Lisp)90 590 R F1(aref)4.437 E F0 1.438
(function called)4.438 F F1(pref)4.438 E F0 4.438(,w)C 1.438(hich can be)
464.476 590 R(used to access a speci\214ed slot in a)126 604 Q F1(pvar)3 E F0
(:)A F1 7.2(>\()126 632 S(pref *the-grid* 1\))147.6 632 Q(1)126 646 Q 7.2(>\()
126 660 S(pref *the-grid* 14\))147.6 660 Q(14)126 674 Q(>)126 688 Q EP
%%Page: 40 40
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-4)293.004 50 S 3(0-)306 50 S
(8\) The contents of the selected slot in a)90 86 Q/F1 12/Courier@0 SF(pvar)3 E
F0(can be modi\214ed using)3 E F1(*setf)3 E F0(and)3 E F1(pref)3 E F0(:)A F1
7.2(>\()126 114 S(*setf \(pref *the-grid* 14\) 7\))147.6 114 Q(NIL)126 128 Q
7.2(>\()126 142 S(ppp *the-grid* :mode :grid :end '\(5 5\)\))147.6 142 Q
(DIMENSION 0 \(X\))162 170 Q(----->)284.4 170 Q 7.2(02461)126 198 S(28)190.8
198 Q 7.2(13571)126 212 S(29)190.8 212 Q 7.2(81)126 226 S 7.2(01)147.6 226 S
7.2(271)169.2 226 S(36)205.2 226 Q 7.2(91)126 240 S 7.2(11)147.6 240 S 7.2(31)
169.2 240 S 7.2(51)190.8 240 S(37)212.4 240 Q(16 18 20 22 144)126 254 Q(>)126
268 Q F0 .424(9\) The function)90 296 R F1(cube-from-grid-address)3.424 E F0
.423(can be used to translate the default grid)3.423 F
(coordinates to the corresponding processor number:)126 310 Q F1 7.2(>\()126
338 S(cube-from-grid-address 0 0\))147.6 338 Q(0)126 352 Q 7.2(>\()126 366 S
(cube-from-grid-address 0 1\))147.6 366 Q(1)126 380 Q 7.2(>\()126 394 S
(cube-from-grid-address 1 0\))147.6 394 Q(2)126 408 Q 7.2(>\()126 422 S
(cube-from-grid-address 1 1\))147.6 422 Q(3)126 436 Q(>)126 450 Q F0 .276
(10\) In combination with)90 478 R F1(pref)3.276 E F0(and)3.276 E F1(*setf)
3.276 E F0 .276(the function)3.276 F F1(cube-from-grid-address)3.276 E F0
(allows us to modify any entry in)126 492 Q F1(*the-grid*)3 E F0
(speci\214ed using grid coordinates:)3 E F1 7.2(>\()126 520 S
(*setf \(pref *the-grid* \(cube-from-grid-address 3 2\)\))147.6 520 Q(0\))126
534 Q(NIL)126 548 Q 7.2(>\()126 562 S
(ppp *the-grid* :mode :grid :end '\(5 5\)\))147.6 562 Q(DIMENSION 0 \(X\))162
590 Q(----->)284.4 590 Q 7.2(02461)126 618 S(28)190.8 618 Q 7.2(13571)126 632 S
(29)190.8 632 Q 7.2(81)126 646 S 7.2(01)147.6 646 S 7.2(201)169.2 646 S(36)
205.2 646 Q 7.2(91)126 660 S 7.2(11)147.6 660 S 7.2(31)169.2 660 S 7.2(51)190.8
660 S(37)212.4 660 Q(16 18 20 22 144)126 674 Q(>)126 688 Q EP
%%Page: 41 41
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-4)293.004 50 S 3(1-)306 50 S -.444(11)90 86 S 3(\)I)
.444 G 3(ti)112.548 86 S 3(sv)122.22 86 S
(ery easy to carry out arithmetic operations on)135.888 86 Q/F1 12/Courier@0 SF
(pvars)3 E F0(:)A F1 7.2(>\()126 114 S(defpvar lots-of-sevens 7\))147.6 114 Q
(LOTS-OF-SEVENS)126 128 Q 7.2(>\()126 142 S(defpvar lots-of-threes 3\))147.6
142 Q(LOTS-OF-THREES)126 156 Q 7.2(>\()126 170 S
(ppp lots-of-sevens :mode :grid :end '\(5 5\)\))147.6 170 Q(DIMENSION 0 \(X\))
162 198 Q(----->)284.4 198 Q 7.2(77777)126 226 S 7.2(77777)126 240 S 7.2(77777)
126 254 S 7.2(77777)126 268 S 7.2(77777)126 282 S 7.2(>\()126 296 S
(ppp \(+ lots-of-sevens lots-of-threes\) :mode :grid)147.6 296 Q
(:end '\(5 5\)\))126 310 Q(DIMENSION 0 \(X\))162 338 Q(----->)284.4 338 Q
(10 10 10 10 10)126 366 Q(10 10 10 10 10)126 380 Q(10 10 10 10 10)126 394 Q
(10 10 10 10 10)126 408 Q(10 10 10 10 10)126 422 Q 7.2(>\()126 436 S
(defpvar proc-address \(self-address!!\)\))147.6 436 Q(PROC-ADDRESS)126 450 Q
7.2(>\()126 464 S(defpvar -proc-address \(* -1 proc-address\)\))147.6 464 Q
(-PROC-ADDRESS)126 478 Q 7.2(>\()126 492 S
(ppp \(+ proc-address -proc-address\) :mode :grid :end)147.6 492 Q('\(5 5\)\))
126 506 Q(DIMENSION 0 \(X\))162 534 Q(----->)284.4 534 Q 7.2(00000)126 562 S
7.2(00000)126 576 S 7.2(00000)126 590 S 7.2(00000)126 604 S 7.2(00000)126 618 S
(>)126 632 Q F0(12\) The function)90 660 Q F1(random!!)3 E F0
(generates a random)3 E F1(pvar)3 E F0(:)A F1 7.2(>\()126 688 S
(ppp \(random!! 10\) :mode :grid :end '\(5 5\)\))147.6 688 Q EP
%%Page: 42 42
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-4)293.004 50 S 3(2-)306 50 S/F1 12/Courier@0 SF
(DIMENSION 0 \(X\))162 86 Q(----->)284.4 86 Q 7.2(04383)126 114 S 7.2(86454)126
128 S 7.2(95605)126 142 S 7.2(06698)126 156 S 7.2(41804)126 170 S 7.2(>\()126
184 S(ppp \(random!! 10\) :mode :grid :end '\(5 5\)\))147.6 184 Q
(DIMENSION 0 \(X\))162 212 Q(----->)284.4 212 Q 7.2(84933)126 240 S 7.2(82241)
126 254 S 7.2(88991)126 268 S 7.2(23282)126 282 S 7.2(12588)126 296 S(>)126 310
Q F0 2.17
(13\) Many other mathematical functions are provided in a parallelised form:)90
338 R F1(sin!!,)5.17 E(sinh!!, cos!!, tan!!, exp!!, expt!!, sqrt!!:)126 352 Q
7.2(>\()126 380 S(ppp \(sin!! \(random!! 10\)\) :mode :grid :end '\(3 3\)\))
147.6 380 Q(DIMENSION 0 \(X\))162 408 Q(----->)284.4 408 Q
(0.8414709568023682 0.9893582463264465)126 436 Q(0.8414709568023682)126 450 Q
(-0.756802499294281 0.14112000167369843)126 464 Q(-0.279415488243103)126 478 Q
(0.6569865942001343 -0.9589242935180664)126 492 Q(-0.9589242935180664)126 506 Q
(>)126 520 Q F0(14\) W)90 548 Q(ith the function)-.48 E F1(cm:time)3 E F0
(you can time your CM5 operations:)3 E F1 7.2(>\()126 576 S
(cm:time \(sqrt!! \(random!! 100.0\)\)\))147.6 576 Q
(Warning: Turning off Paris safety for CM:TIME.)133.2 604 Q
(Warning: Turning off *Lisp Interpreter Safety for)133.2 618 Q(CM:TIME.)126 632
Q(Evaluation of \(SQRT!! \(RANDOM!! 100.0\)\) took 0.057098)126 646 Q
(seconds of elapsed time,)126 660 Q
(during which the CM was active for 0.002021 seconds or)126 674 Q
(3.00% of the total elapsed time.)126 688 Q EP
%%Page: 43 43
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-4)293.004 50 S 3(3-)306 50 S/F1 12/Courier@0 SF(>)
126 86 Q F0 .076(Here you can see that it took only 0.002 seconds to generate \
1024 random number)126 114 R 2.221
(and take a square root from each of them. For all practical purposes you can)
126 128 R 5.804
(assume that the Connection Machine carries out up to 1024 operations)126 142 R
(simultaneously)126 156 Q(.)-.78 E/F2 12/Times-Bold@0 SF(The NEWS operations)75
170 Q F0 .114(1\) The)90 198 R F1(news!!)3.114 E F0 .115
(function is used to shift)3.114 F F1(pvars)3.115 E F0 .115
(in the main directions. On the borders of)3.115 F(the)126 212 Q F1 -4.2
(pvars news!!)3 F F0(will wrap data around:)3 E F1 7.2(>\()126 240 S
(ppp *the-grid* :mode :grid :end '\(5 5\)\))147.6 240 Q(DIMENSION 0 \(X\))162
268 Q(----->)284.4 268 Q 7.2(02461)126 296 S(28)190.8 296 Q 7.2(13571)126 310 S
(29)190.8 310 Q 7.2(81)126 324 S 7.2(01)147.6 324 S 7.2(21)169.2 324 S 7.2(41)
190.8 324 S(36)212.4 324 Q 7.2(91)126 338 S 7.2(11)147.6 338 S 7.2(31)169.2 338
S 7.2(51)190.8 338 S(37)212.4 338 Q(16 18 20 22 144)126 352 Q 7.2(>\()126 366 S
(ppp \(news!! *the-grid* 1 0\) :mode :grid :end '\(5 5\)\))147.6 366 Q
(DIMENSION 0 \(X\))162 394 Q(----->)284.4 394 Q 7.2(2461)126 422 S(28 130)176.4
422 Q 7.2(3571)126 436 S(29 131)176.4 436 Q(10 12 14 136 138)126 450 Q
(11 13 15 137 139)126 464 Q(18 20 22 144 146)126 478 Q 7.2(>\()126 492 S
(ppp \(news!! *the-grid* -1 0\) :mode :grid :end '\(5)147.6 492 Q(5\)\))126 506
Q(DIMENSION 0 \(X\))162 534 Q(----->)284.4 534 Q(902 0 2 4 6)126 562 Q
(903 1 3 5 7)126 576 Q(910 8 10 12 14)126 590 Q(911 9 11 13 15)126 604 Q
(918 16 18 20 22)126 618 Q 7.2(>\()126 632 S
(ppp \(news!! *the-grid* 0 1\) :mode :grid :end '\(5 5\)\))147.6 632 Q
(DIMENSION 0 \(X\))162 660 Q(----->)284.4 660 Q 7.2(13571)126 688 S(29)190.8
688 Q EP
%%Page: 44 44
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-4)293.004 50 S 3(4-)306 50 S/F1 12/Courier@0 SF 7.2
(81)126 86 S 7.2(01)147.6 86 S 7.2(21)169.2 86 S 7.2(41)190.8 86 S(36)212.4 86
Q 7.2(91)126 100 S 7.2(11)147.6 100 S 7.2(31)169.2 100 S 7.2(51)190.8 100 S(37)
212.4 100 Q(16 18 20 22 144)126 114 Q(17 19 21 23 145)126 128 Q 7.2(>\()126 142
S(ppp \(news!! *the-grid* 0 -1\) :mode :grid :end '\(5)147.6 142 Q(5\)\))126
156 Q(DIMENSION 0 \(X\))162 184 Q(----->)284.4 184 Q(121 123 125 127 249)126
212 Q 7.2(02461)126 226 S(28)190.8 226 Q 7.2(13571)126 240 S(29)190.8 240 Q 7.2
(81)126 254 S 7.2(01)147.6 254 S 7.2(21)169.2 254 S 7.2(41)190.8 254 S(36)212.4
254 Q 7.2(91)126 268 S 7.2(11)147.6 268 S 7.2(31)169.2 268 S 7.2(51)190.8 268 S
(37)212.4 268 Q(>)126 282 Q F0 .412(2\) On one-dimensional)90 310 R F1 -3.788
(pvars news!!)3.412 F F0 .412
(can be used too. In that case it will merely shift)3.412 F
(data left or right:)126 324 Q F1 7.2(>\()126 352 S
(*cold-boot :initial-dimensions '\(1024\)\))147.6 352 Q(;;; Not attached.)126
380 Q(Attaching...)262.8 380 Q(1024)126 408 Q(\(1024\))126 422 Q(12083)126 436
Q 7.2(>\()126 450 S(defpvar *the-row* \(self-address!!\)\))147.6 450 Q
(*THE-ROW*)126 464 Q 7.2(>\()126 478 S(ppp *the-row* :end 10\))147.6 478 Q 7.2
(0123456789)126 492 S 7.2(>\()126 506 S(ppp \(news!! *the-row* 1\) :end 10\))
147.6 506 Q 7.2(1234567891)126 520 S(0)262.8 520 Q 7.2(>\()126 534 S
(ppp \(news!! *the-row* -1\) :end 10\))147.6 534 Q(1023 0 1 2 3 4 5 6 7 8)126
548 Q 7.2(>\()126 562 S(ppp \(news!! *the-row* 3\) :end 10\))147.6 562 Q 7.2
(34567891)126 576 S 7.2(01)234 576 S 7.2(11)255.6 576 S(2)277.2 576 Q(>)126 590
Q F0 .296(3\) Using the wrap-around NEWS facility is not very useful if you mu\
st take care of \214xed)90 618 R 3.398
(boundary conditions. There is another function which is very useful in that)
126 632 R(context:)126 646 Q F1(news-border!!)174.864 646 Q F0
(Here is how it works:)3 E F1 7.2(>\()126 674 S
(defpvar *my-grid* \(self-address!!\)\))147.6 674 Q(*MY-GRID*)126 688 Q EP
%%Page: 45 45
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-4)293.004 50 S 3(5-)306 50 S/F1 12/Courier@0 SF 7.2
(>\()126 86 S(ppp *my-grid* :mode :grid :end '\(5 5\)\))147.6 86 Q
(DIMENSION 0 \(X\))162 114 Q(----->)284.4 114 Q 7.2(02461)126 142 S(28)190.8
142 Q 7.2(13571)126 156 S(29)190.8 156 Q 7.2(81)126 170 S 7.2(01)147.6 170 S
7.2(21)169.2 170 S 7.2(41)190.8 170 S(36)212.4 170 Q 7.2(91)126 184 S 7.2(11)
147.6 184 S 7.2(31)169.2 184 S 7.2(51)190.8 184 S(37)212.4 184 Q
(16 18 20 22 144)126 198 Q 7.2(>\()126 212 S
(ppp \(news-border!! *my-grid* \(!! -1\) 0 -1\) :mode)147.6 212 Q
(:grid :end '\(5 5\)\))126 226 Q(DIMENSION 0 \(X\))162 254 Q(----->)284.4 254 Q
(-1 -1 -1 -1 -1)126 282 Q 7.2(02461)126 296 S(28)190.8 296 Q 7.2(13571)126 310
S(29)190.8 310 Q 7.2(81)126 324 S 7.2(01)147.6 324 S 7.2(21)169.2 324 S 7.2(41)
190.8 324 S(36)212.4 324 Q 7.2(91)126 338 S 7.2(11)147.6 338 S 7.2(31)169.2 338
S 7.2(51)190.8 338 S(37)212.4 338 Q 7.2(>\()126 352 S
(ppp \(news-border!! *my-grid* \(!! -1\) -1 0\) :mode)147.6 352 Q
(:grid :end '\(5 5\)\))126 366 Q(DIMENSION 0 \(X\))162 394 Q(----->)284.4 394 Q
(-1 0 2 4 6)126 422 Q(-1 1 3 5 7)126 436 Q(-1 8 10 12 14)126 450 Q
(-1 9 11 13 15)126 464 Q(-1 16 18 20 22)126 478 Q(>)126 492 Q F0 2.902
(The second ar)126 520 R 2.902(gument to)-.216 F F1(news-border!!)5.903 E F0
2.903(is called a)5.903 F F1(border-pvar)5.903 E F0 5.903(.T)C(he)510.672 520 Q
F1(news-border!!)126 534 Q F0 3.579(function slips in the values from the)6.579
F F1(border-pvar)6.578 E F0(in)6.578 E
(places where NEWS would make references of)126 548 Q 3(ft)-.216 G(he grid.)
362.7 548 Q 1.133(4\) How to construct a)90 562 R F1(border-pvar)4.133 E F0
1.133(which would be more elaborate than just a)4.133 F(one)7.134 E 1.61
(number matrix? The most general although not necessarily the simplest way to)
126 576 R .661(make such a)126 590 R F1(pvar)3.661 E F0 .661
(is to make it \214rst on the front end and then to transfer it onto)3.661 F
1.67(the Connection Machine.)126 604 R 1.67
(This is a slow operation, but if you)7.67 F 1.669(need to make a)7.669 F
(particular)126 618 Q F1(border-pvar)4.097 E F0 1.097
(only once, the cost will be af)4.097 F 1.098(fordable. Even the most)-.216 F
(complex)126 632 Q F1(border-pvars)3 E F0(can be made like that.)3 E F1 7.2
(>\()126 660 S(setf *print-array* nil\))147.6 660 Q(NIL)126 674 Q 7.2(>\()126
688 S(setf the-front-end-array)147.6 688 Q EP
%%Page: 46 46
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-4)293.004 50 S 3(6-)306 50 S/F1 12/Courier@0 SF
(\(make-array \(list \(* 32 32\)\) :initial-element 0\)\))154.8 86 Q
(#<Simple-Vector T 1024 1B9B3D6>)126 100 Q 7.2(>\()126 114 S
(dotimes \(i 1024\))147.6 114 Q(\(let \(\(row \(grid-from-cube-address i 1\)\))
154.8 128 Q(\(column \(grid-from-cube-address i 0\)\)\))198 142 Q
(\(if \(= row 0\))169.2 156 Q(\(setf \(aref the-front-end-array i\) -1\)\)\)\))
198 170 Q(NIL)126 184 Q 7.2(>\()126 198 S(defpvar *my-mask* 0\))147.6 198 Q
(*MY-MASK*)126 212 Q 7.2(>\()126 226 S
(array-to-pvar the-front-end-array *my-mask*\))147.6 226 Q
(#<FIXNUM-PVAR *MY-MASK*, 7340032 Heap, 4 bytes,)126 240 Q
(*DEFAULT-VP-SET* \(32 32\) \(mutable\)>)126 254 Q 7.2(>\()126 268 S
(ppp *my-mask* :mode :grid :end '\(5 5\)\))147.6 268 Q(DIMENSION 0 \(X\))162
296 Q(----->)284.4 296 Q(-1 -1 -1 -1 -1)126 324 Q 7.2(00000)126 338 S 7.2
(00000)126 352 S 7.2(00000)126 366 S 7.2(00000)126 380 S(>)126 394 Q F0 .658
(5\) If the)90 422 R F1(border-pvar)3.658 E F0 .659
(has a simple structures as in the example above, then it can be)3.658 F
(constructed more ef)126 436 Q(\214ciently using the)-.216 E F1(news-border!!)3
E F0(function itself.)3 E F1 7.2(>\()126 464 S
(ppp \(news-border!! \(!! 0\) \(!! -1\) 0 -1\) :mode :grid)147.6 464 Q
(:end '\(5 5\)\))126 478 Q(DIMENSION 0 \(X\))162 506 Q(----->)284.4 506 Q
(-1 -1 -1 -1 -1)126 534 Q 7.2(00000)126 548 S 7.2(00000)126 562 S 7.2(00000)126
576 S 7.2(00000)126 590 S(>)126 604 Q/F2 12/Times-Bold@0 SF
(Solving the Laplace equation in 2 dimensions on the Connection Machine)75 632
Q F0 .441(1\) Consider the following problem. A square metal plate has one of \
its edges kept at 100)90 660 R 5.777(Kw)126 674 S 2.777
(hereas all other edges are cooled to 0 K. Evaluate the \214nal temperature)
149.105 674 R .74(distribution in the plate. This is a very simple problem whi\
ch is described by the)126 688 R 4.372
(Laplace equation. The solution can be obtained by the following iteration)126
702 R 4.366(procedure. Start)126 716 R 1.366
(with any sensible initial condition for the whole plate. In each)4.366 F 4.392
(iterative step we replace the value at each point by the average over its)126
730 R EP
%%Page: 47 47
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-4)293.004 50 S 3(7-)306 50 S 3.307(neighbourhood. W)
126 86 R 6.307(er)-.96 G 3.308
(epeat this procedure as long as we observe changes in)233.966 86 R
(temperature distribution.)126 100 Q(2\) T)90 114 Q
(ype the following short program in your worksheet window)-.84 E(.)-.78 E/F1 12
/Courier@0 SF(\(setq *compilep* nil\))126 142 Q(\(defpvar *border-pvar* 0.0\))
126 170 Q(\(*setf *border-pvar* \(news-border!!)126 184 Q
(*border-pvar* \(!! 1.0\) 0 -1\)\))291.6 198 Q(\(*setf *border-pvar*)126 212 Q
(\(*!! \(news-border!! *border-pvar* \(!! 0.0\) 1 0\))147.6 226 Q
(\(news-border!! *border-pvar* \(!! 0.0\) -1 0\))183.6 240 Q(100.0\)\))183.6
254 Q(\(defpvar *the-plate* \(!! 0.0\)\))126 268 Q(\(defun iteration-step \(\))
126 296 Q("perform averaging over the neighbourhood)140.4 310 Q
(for each point of *the-plate*")126 324 Q(\(*setf *the-plate*)140.4 338 Q
(\(/!!)162 352 Q(\(+!! \(news-border!! *the-plate* *border-pvar*)176.4 366 Q
7.2(10)320.4 380 S(\))342 380 Q(\(news-border!! *the-plate* *border-pvar*)212.4
394 Q 7.2(01)320.4 408 S(\))342 408 Q
(\(news-border!! *the-plate* *border-pvar*)212.4 422 Q(-1 0\))320.4 436 Q
(\(news-border!! *the-plate* *border-pvar*)212.4 450 Q 7.2(0-)320.4 464 S
(1\)\))342 464 Q(\(!! 4.0\)\)\))176.4 478 Q
(\(ppp *the-plate* :mode :grid :end '\(5 5\)\)\))140.4 492 Q F0 1.624
(The \214rst command)126 520 R F1 1.624(\(set *compilep* nil\))4.624 F F0 1.623
(turns of)4.624 F 4.623(ft)-.216 G 1.623(he automatic *Lisp)426.762 520 R
(compiler)126 534 Q 5.197(.T)-.66 G 2.197
(he compiler is useful only when you work on the \214nal production)183.529 534
R 3.661(code. If it is not switched of)126 548 R 6.661(fd)-.216 G 3.661
(uring prototyping it can result in incorrect)298.723 548 R 1.809(arithmetics.\
 The compiler must be used only with full type declarations for all)126 562 R
.884(variables. This can be done in *Lisp in a way similar to Fortran or C, bu\
t this is)126 576 R 2.393
(best done at the end when the algorithm has been thoroughly prototyped and)126
590 R(tested. W)126 604 Q 3(ew)-.96 G
(ill not talk about *Lisp compiler in this course.)187.356 604 Q(3\) T)90 632 Q
3(or)-.84 G(un the program switch to the Lisp window and type:)122.484 632 Q F1
7.2(>\()126 660 S(*cold-boot\))147.6 660 Q(1024)126 674 Q(\(32 32\))126 688 Q
EP
%%Page: 48 48
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-4)293.004 50 S 3(8-)306 50 S/F1 12/Courier@0 SF
(12633)126 86 Q 7.2(>\()126 100 S(load "laplace.l"\))147.6 100 Q
(;;; Loading source file "laplace.l")126 114 Q
(;;; Warning: File "laplace.l" does not begin with IN-)126 128 Q 7.2
(PACKAGE. Loading)126 142 R(into package "*LISP5")7.2 E 14.4(>\()126 156 S
(iteration-step\))154.8 156 Q(DIMENSION 0 \(X\))162 184 Q(----->)284.4 184 Q
(0.0 25.0 25.0 25.0 25.0)126 212 Q(0.0 0.0 0.0 0.0 0.0)126 226 Q
(0.0 0.0 0.0 0.0 0.0)126 240 Q(0.0 0.0 0.0 0.0 0.0)126 254 Q
(0.0 0.0 0.0 0.0 0.0)126 268 Q 7.2(>\()126 282 S(iteration-step\))147.6 282 Q
(DIMENSION 0 \(X\))162 310 Q(----->)284.4 310 Q(6.25 31.25 37.5 37.5 37.5)126
338 Q(0.0 6.25 6.25 6.25 6.25)126 352 Q(0.0 0.0 0.0 0.0 0.0)126 366 Q
(0.0 0.0 0.0 0.0 0.0)126 380 Q(0.0 0.0 0.0 0.0 0.0)126 394 Q 7.2(>\()126 408 S
(iteration-step\))147.6 408 Q(DIMENSION 0 \(X\))162 436 Q(----->)284.4 436 Q
(7.8125 37.5 43.75 45.3125 45.3125)126 464 Q(3.125 9.375 12.5 12.5 12.5)126 478
Q(0.0 1.5625 1.5625 1.5625 1.5625)126 492 Q(0.0 0.0 0.0 0.0 0.0)126 506 Q
(0.0 0.0 0.0 0.0 0.0)126 520 Q(>)126 534 Q F0
(4\) If you become bored with typing)90 562 Q F1(\(iteration-step\))3 E F0
(by hand, use)3 E F1(dotimes)3 E F0(:)A F1 7.2(>\()126 590 S
(dotimes \(i 30\) \(iteration-step\)\))147.6 590 Q(...)126 604 Q F0 2.585
(This will produce a rather voluminous output, which will show you how the)126
632 R(boundary condition spreads through the plate.)126 646 Q/F2 12
/Times-Bold@0 SF(Summary)75 674 Q F0 1.563(1\) Permanent)90 702 R F1(pvars)
4.563 E F0 1.563(are allocated on the CM5 stack by the function)4.563 F F1
(defpvar)4.562 E F0 4.562(.T)C(his)507.996 702 Q
(function can be also used to initialiase)126 716 Q F1(pvars)3 E F0(.)A EP
%%Page: 49 49
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-4)293.004 50 S 3(9-)306 50 S(2\))90 86 Q/F1 12
/Courier@0 SF(Pvars)3 E F0(can be viewed with function)3 E F1(ppp)3 E F0(.)A
2.15(3\) The function)90 100 R F1(self-address!!)5.15 E F0 2.15(generates a)
5.15 F F1(pvar)5.15 E F0 2.15(which has the number of the)5.15 F
(corresponding virtual processor in each slot.)126 114 Q 3.081(4\) V)90 128 R
3.081(alues can be assigned to allocated)-1.332 F F1(pvars)6.08 E F0 3.08
(by using the function)6.08 F F1(*setf)6.08 E F0 6.08(.T)C(his)507.996 128 Q
1.337(function, unlike its Common Lisp counterpart, will not create a variable\
 if such)126 142 R(doesn')126 156 Q 3(te)-.216 G(xist yet.)169.44 156 Q .182
(5\) There are two types of)90 170 R F1(*Lisp)3.182 E F0 .182
(functions: functions whose names end with ")3.182 F F1(!!)A F0 3.181("r)C
(eturn)497.34 170 Q F1(pvars)133.743 184 Q F0 3.543(;f)C .544
(unctions whose names begin with ")180.618 184 R F1(*)A F0 3.544("m)C(odify)
378.196 184 Q F1(pvars)3.544 E F0 .544(as a side ef)3.544 F(fect,)-.216 E
(but return scalar quantities.)126 198 Q(6\) Speci\214ed entries in)90 212 Q F1
(pvars)3 E F0(can be accessed with function)3 E F1(pref)3 E F0(.)A 7.139
(7\) The function)90 226 R F1(cube-from-grid-address)189.068 226 Q F0 7.138
(converts grid coordinates into)357.606 226 R
(appropriate virtual processor number)126 240 Q
(8\) Common Lisp arithmetic operators have their ")90 254 Q F1(!!)A F0 3("e)C
(quivalents in *Lisp.)357.492 254 Q .875
(9\) The execution of a *Lisp function can be timed with)90 268 R F1(cm:time.)
3.875 E F0 .876(For most practical)8.075 F 1.894
(purposes you can assume that the ANU Connection Machine carries out up to)126
282 R(1024 operations simultaneously at each execution step.)126 296 Q
(10\) The)90 310 Q F1(news!!)3 E F0(function is used to shift a)3 E F1(pvar)3 E
F0(in basic directions of the grid.)3 E -.444(11)90 324 S 3.239(\)T).444 G .239
(he function)116.123 324 R F1(news-border!!)3.239 E F0 .239(shifts a)3.239 F F1
(pvar)3.239 E F0 .239(like the function)3.239 F F1(news!!)3.239 E F0 .239
(but instead)3.239 F 3.892(of wrapping a)126 338 R F1(pvar)6.892 E F0 3.892
(around it slips values from a)6.892 F F1(border-pvar)6.892 E F0 3.892(at the)
6.892 F(boundary)126 352 Q(.)-.78 E .959(12\) Arrays made on the front end can\
 be transferred onto the Connection Machine with)90 366 R(the function)126 380
Q F1(array-to-pvar)3 E F0(.)A .247(13\) The function)90 394 R F1
(grid-from-cube-address)3.247 E F0 .247
(can be used to \214nd the location in grid)3.247 F
(coordinates of a speci\214ed virtual processor)126 408 Q(.)-.66 E 2.334
(14\) The function)90 422 R F1(news-border!!)5.334 E F0 2.335
(itself can be used ef)5.334 F 2.335(fectively to produce simple)-.216 F F1
(border-pvars)126 436 Q F0(.)A 4.919(15\) The prede\214ned global variable)90
450 R F1(*compilep*)7.919 E F0 4.919(should be set to)7.919 F F1(nil)7.919 E F0
(during)7.918 E 3.71(prototyping. The)126 464 R .711
(compiled code will return incorrect results unless accompanied)3.71 F
(by correct variable type de\214nitions.)126 478 Q EP
%%Page: 50 50
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-5)293.004 50 S 3(0-)306 50 S/F1 16/Times-Roman@0 SF
(Lesson 8)277.336 90 Q(*Graphics)273.12 126 Q F0 .88
(This is a very short lesson, because *Lisp')90 162 R 3.88(sg)-.66 G .88
(raphics are very easy to use. There is only)313.352 162 R 1.558(one caveat. Y)
90 176 R 1.558
(ou must not trust unreservedly the old documentation. Once upon a time)-1.2 F
.736(there was a separate *Graphics package which had to be loaded explicitly)
90 190 R 3.735(.T)-.78 G .735(his package)464.949 190 R .581(is still around, \
for some reason, but it can crash the system. If the automatic compilation)90
204 R 3.271(is activated then *Graphics functions will be automatically conver\
ted to *LISP5-I::)90 218 R
(functions. The latter can be also called by hand and they work just \214ne.)90
232 Q 1.447
(1\) The program below shows the simplest way to display the images of)90 260 R
/F2 12/Courier@0 SF(pvars)4.448 E F0 1.448(on an)4.448 F(X1)126 274 Q 3(1d)
-.444 G(isplay)155.22 274 Q(.)-.78 E F2(;;)126 302 Q
(;; \(setq *compilep* nil\))126 316 Q(;;)126 330 Q
(\(*cold-boot :initial-dimensions '\(128 128\)\))126 344 Q
(\(defpvar *border-pvar* 0.0 single-float\))126 372 Q(\(*setf *border-pvar*)126
386 Q(\(news-border!! *border-pvar* \(!! 1.0\) 0 -1\)\))147.6 400 Q
(\(*setf *border-pvar*)126 414 Q
(\(*!! \(news-border!! *border-pvar* \(!! 0.0\) 1 0\))147.6 428 Q
(\(news-border!! *border-pvar* \(!! 0.0\) -1 0\))183.6 442 Q(100.0\)\))183.6
456 Q(\(defpvar *the-plate* 0.0 single-float\))126 470 Q
(\(defun iteration-step \(&key \(silent nil\)\))126 498 Q
("perform averaging over the neighbourhood for each)140.4 512 Q
(point of *the-plate*")126 526 Q(\(*setf *the-plate*)140.4 540 Q
(\(/!! \(+!! \(news-border!!)162 554 Q(*the-plate* *border-pvar* 1 0\))248.4
568 Q(\(news-border!!)234 582 Q(*the-plate* *border-pvar* 0 1\))248.4 596 Q
(\(news-border!!)234 610 Q(*the-plate* *border-pvar* -1 0\))248.4 624 Q
(\(news-border!!)234 638 Q(*the-plate* *border-pvar* 0 -1\)\))248.4 652 Q
(\(!! 4.0\)\)\))198 666 Q(\(if \(not silent\))140.4 680 Q EP
%%Page: 51 51
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-5)293.004 50 S 3(1-)306 50 S/F1 12/Courier@0 SF
(\(ppp *the-plate* :mode :grid :end '\(5 5\)\)\)\))169.2 86 Q
(\(setf *current-display-window*)126 114 Q(\(*lisp5-i::create-display-window)
140.4 128 Q(:display-padding 0)154.8 142 Q(:desired-width 128)154.8 156 Q
(:desired-height 128)154.8 170 Q(:color-map :gray-and-rainbow\)\))154.8 184 Q
(\(defun view-heat-spread \(number-of-steps\))126 212 Q
(\(declare \(type fixnum number-of-steps\)\))140.4 226 Q
(\(dotimes \(i number-of-steps\))140.4 240 Q(\(iteration-step :silent t\))154.8
254 Q(\(*lisp5-i::display-image *the-plate*)154.8 268 Q
(:overlay \(list nil!!\))176.4 282 Q(:color-range :rainbow\)\)\))176.4 296 Q F0
.089(There are several new elements in this program so we have to stop for a w\
hile and)126 324 R(discuss those.)126 338 Q 1.977(a\) This time we are activat\
ing the automatic *Lisp compiler \(this is the *Lisp)126 352 R 4.314
(default\). In)162 366 R 1.315
(order to get correct results we must declare the types of the)4.314 F
(variables. For example:)162 380 Q F1
(\(defpvar *border-pvar* 0.0 single-float\))126 408 Q F0 4.574(b\) W)126 436 R
7.574(eh)-.96 G 4.574(ave introduced also the)172.84 436 R F1(&key)7.574 E F0
4.574(parameter in the de\214nition of the)7.574 F F1(iteration-step)162 450 Q
F0(:)A F1(\(defun iteration-step \(&key \(silent nil\)\))126 478 Q F0 1.893
(When a function ar)162 506 R 1.893(gument is declared this way)-.216 F 4.893
(,i)-.78 G(t')411.768 506 Q 4.893(sv)-.66 G 1.893(alue is by default)434.001
506 R(")162 520 Q F1(nil)A F0(", and it can be changed by calling)A F1
(\(iteration-step :silent t\))126 548 Q F0 .696(c\) The function)126 576 R F1
(*lisp5-i::create-display-window)3.696 E F0 .696(creates the display)3.696 F
(window)162 590 Q 4.747(.I)-.78 G 4.747(tc)211.627 590 S 1.747
(an be called without any ar)225.038 590 R 1.748
(guments at all, in which case it)-.216 F
(would use some default values and enquire interactively about the rest.)162
604 Q 1.023(d\) Once the window is up we can begin sending images of)126 618 R
F1(pvars)4.023 E F0 1.023(to it. This is)4.023 F 2.57(done with the function)
162 632 R F1(*lisp5-i::display-image)5.57 E F0 5.57(.T)C 2.57(he function)
465.106 632 R F1(view-heat-spread)162 646 Q F0 10.335(,w)C 7.335(hich invokes)
299.199 646 R F1(*lisp5-i::display-)392.4 646 Q(image)162 660 Q F0 .314
(after every call to the)3.314 F F1(iteration-step)3.314 E F0 .315(has one ar)
3.315 F .315(gument. The)-.216 F(type of this ar)162 674 Q
(gument is declared by)-.216 E EP
%%Page: 52 52
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-5)293.004 50 S 3(2-)306 50 S/F1 12/Courier@0 SF
(\(declare \(type fixnum number-of-steps\)\))133.2 86 Q F0 1.709
(2\) Load this program into your *Lisp process. Note that the program)90 114 R
F1(*cold-boots)4.709 E F0(automatically)126 128 Q 7.89(.Y)-.78 G 1.89
(ou should also get the empty *Graphics window)208.902 128 R 4.891(.N)-.78 G
1.891(ow try the)469.558 128 R(following:)126 142 Q F1 7.2(>\()126 170 S
(view-heat-spread 10\))147.6 170 Q(NIL)126 184 Q 7.2(>\()126 198 S
(dotimes \(i 500\))147.6 198 Q(\(iteration-step :silent t\)\))154.8 212 Q(NIL)
126 226 Q 7.2(>\()126 240 S(view-heat-spread 5\))147.6 240 Q(NIL)126 254 Q(>)
126 268 Q F0(3\) The window can be cleaned with)90 296 Q F1 7.2(>\()126 324 S
(*lisp5-i::clear-display-window\))147.6 324 Q(NIL)126 338 Q(>)126 352 Q
(and deleted with)126 380 Q 7.2(>\()126 408 S
(*lisp5-i::delete-display-window *current-display-)147.6 408 Q(window*\))126
422 Q(T)126 436 Q(>)126 450 Q F0 5.07(Remember that the)126 478 R F1
(*current-display-window*)8.07 E F0 5.07(is the name of the)8.07 F .224
(variable which was bound to the window structure by the invocation to)126 492
R F1(setf)3.224 E F0(and)3.224 E F1(*lisp5-i::create-display-window)126 506 Q
F0(.)A -1.2(Yo)126 534 S 3.548(um)1.2 G .549
(ust admit that it is hard to think of a more programmer friendly system for)
158.348 534 R(displaying data.)126 548 Q 3.39(4\) It is easy to make composite\
 pictures. The following function will create three)90 562 R
(snapshots and place them side by side within the display window)126 576 Q(.)
-.78 E F1(\(defun three-snapshots \(\))126 604 Q
(\(if \(*lisp5-i::valid-display-window-p)140.4 618 Q
(*current-display-window*\))190.8 632 Q(\(*lisp5-i::delete-display-window)169.2
646 Q(*current-display-window*\)\))190.8 660 Q(\(setf *current-display-window*)
140.4 674 Q(\(*lisp5-i::create-display-window)162 688 Q EP
%%Page: 53 53
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-5)293.004 50 S 3(3-)306 50 S/F1 12/Courier@0 SF
(:display-padding 0)176.4 86 Q(:desired-width \(* 3 128\))176.4 100 Q
(:desired-height \(* 128\))176.4 114 Q(:color-map :gray-and-rainbow\)\))176.4
128 Q(\(dotimes \(i 3\))140.4 142 Q(\(dotimes \(j 300\))154.8 156 Q
(\(iteration-step :silent t\)\))169.2 170 Q
(\(*lisp5-i::display-image *the-plate*)154.8 184 Q(:color-range :rainbow\)\)\))
327.6 198 Q F0 3.948 -.96(We h)126 226 T 2.028
(ave used here one more new function).96 F F1(*lisp5-i::valid-display-)5.028 E
(window-p)126 240 Q F0 5.621(.T)C 2.621(his function returns ")199.553 240 R F1
(t)A F0 5.62("\()C 2.62(true\) if there exist an already created)330.348 240 R
(window)126 254 Q 4.965(.I)-.78 G 4.965(fs)175.845 254 S 1.965
(uch a window exists, we delete it and then create a window with)189.474 254 R
(suf)126 268 Q(\214cient size for three snapshots.)-.216 E 3.767(5\) *Graphics\
 package allows for more elaborate operations. For example you can)90 282 R
1.014(manually assemble several displays in the display window)126 296 R 4.015
(.I)-.78 G 4.015(nt)423.639 296 S 1.015(he section above,)436.99 296 R
(function)126 310 Q F1(*lisp5-i::display-image)176.784 310 Q F0 7.788
(did it automatically)353.172 310 R 10.788(.Y)-.78 G 7.788(ou can)482.556 310 R
1.224(manipulate and de\214ne your own colour maps \(remember)126 324 R 4.224
(,t)-.48 G 1.224(hey are called `)416.928 324 R(`color)-.888 E(maps')126 338 Q
5.068('i)-.888 G 5.068(nA)166.84 338 S 2.068
(merican English\), use three dimensional rendering functions, some)186.572 338
R 3.599
(simple geometrical transformations, etc. But in general terms the *Graphics)
126 352 R .592(package is very simple. The number of facilities made available\
 to the researcher)126 366 R 1.899(are just suf)126 380 R 1.9
(\214cient to view the data without having to worry about X1)-.216 F 4.9(1d)
-.444 G(etails,)493.668 380 Q .614
(mouse manipulations, etc. If you need to do something much more complex than)
126 394 R .369(that, e.g., de\214ne push-buttons, scrollbars, etc, you may hav\
e to combine front-end)126 408 R 2.605
(Common Lisp operations and some Common Lisp X1)126 422 R 2.605
(1-toolkit packages with)-.444 F 1.419
(your program. There is a number of those available.)126 436 R 1.419
(On Suns, LispV)7.419 F 1.419(iew is the)-.72 F .463(easiest to use and the fa\
stest. But you should remember that Lucid Common Lisp)126 450 R 1.049(is not v\
ery good for doing such things: it lacks dynamic libraries with the result)126
464 R .417(that Lucid CL processes tend to use an insane amount of memory)126
478 R 3.416(.T)-.78 G .416(hey also tend)457.844 478 R
(to be unresponsive if they grow too lar)126 492 Q(ge.)-.216 E/F2 12
/Times-Bold@0 SF(Summary)75 520 Q F0
(1\) The use of automatic *Lisp compiler requires type declarations for all)90
548 Q F1(pvars)3 E F0(.)A(2\) T)90 562 Q(ypes can be declared for)-.84 E F1
(pvars)3 E F0(during creation and initialisation with)3 E F1(defpvar)3 E F0(.)A
(3\) Common Lisp allows to de\214ne some function ar)90 576 Q(guments as)-.216
E F1(&key)3 E F0(parameters.)3 E 5.676(4\) An X1)90 590 R 8.676(1*)-.444 G
5.676(Graphics display window is created with)166.908 590 R F1
(*lisp5-i::create-)8.676 E(display-window)126 604 Q F0(.)A .261(5\) If you hav\
e automatic *Lisp compilation turn on, you can also use abbreviation ")90 618 R
F1(*g:)A F0(")A 2.102(in place of ")126 632 R F1(*lisp5-i::)A F0 2.102
(". But this may lead to hanging *Lisp if automatic)B(compilation is turned of)
126 646 Q(f.)-.216 E 1.081(6\) V)90 660 R 1.081
(ariable types in Common Lisp function de\214nitions are declared with the)
-1.332 F F1(declare)4.081 E F0
(statement which should follow the list of function variables.)126 674 Q(7\))90
688 Q F1(pvar)9.991 E F0 6.992
(images can be displayed on *Graphics display windows with the)9.991 F F1
(*lisp5-i::display-image)126 702 Q F0(function.)301.8 702 Q EP
%%Page: 54 54
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-5)293.004 50 S 3(4-)306 50 S 3.509
(8\) The display window can be cleared with the)90 86 R/F1 12/Courier@0 SF
(*lisp5-i::clear-display-)6.509 E(window)126 100 Q F0 4.47
(function and deleted with the)7.47 F F1(*lisp5-i::delete-display-)7.47 E
(window)126 114 Q F0(function.)3 E 3.421
(9\) The predicate \(a function which returns a logical value\))90 128 R F1
(*lisp5-i::valid-)6.421 E(display-window-p)126 142 Q F0 1.381
(can be used to check if a valid display window already)4.381 F(exists.)126 156
Q 1.444(10\) The function)90 170 R F1(*lisp5-i::display-image)4.444 E F0 1.443
(can be also used to display images)4.444 F(side by side.)126 184 Q EP
%%Page: 55 55
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-5)293.004 50 S 3(5-)306 50 S/F1 16/Times-Roman@0 SF
(Lesson 9)277.336 90 Q(Masking)278 126 Q F0 .643(Masking operations allow to e\
nable and disable groups of virtual processors. Masking is)90 180 R .879
(performed with boolean)90 194 R/F2 12/Courier@0 SF(pvars)3.879 E F0 3.879(.T)C
.879(hese can be generated using a variety of *Lisp forms)261.156 194 R 1.013
(which yield boolean)90 208 R F2(pvars)4.013 E F0 1.013
(on evaluation. Most predicates in Common Lisp end with)8.213 F 1.631(letter ")
90 222 R F2(p)A F0 1.631(", e.g.,)B F2 1.631(evenp, oddp, listp)4.631 F F0
4.631(,e)C 4.631(tc. Arithmetic)314.694 222 R 1.631(predicates have their ")
4.631 F F2(!!)A F0(")A(equivalents in *Lisp.)90 236 Q/F3 12/Times-Bold@0 SF
(Parallel pr)75 264 Q(edicate functions)-.216 E F0 1.147(1\) The function)90
292 R F2(*when)4.147 E F0 1.148
(allows to carry out operations in parallel on selected groups of)4.147 F
(processors:)126 306 Q F2 7.2(>\()126 334 S
(defpvar *procnum-pvar* \(self-address!!\)\))147.6 334 Q(*PROCNUM-PVAR*)126 348
Q 7.2(>\()126 362 S(defpvar *even-mask* \(evenp!! *procnum-pvar*\)\))147.6 362
Q(*EVEN-MASK*)126 376 Q 7.2(>\()126 390 S
(ppp *even-mask* :mode :grid :end '\(5 5\)\))147.6 390 Q(DIMENSION 0 \(X\))162
418 Q(----->)284.4 418 Q 7.2(TTTTT)126 446 S(NIL NIL NIL NIL NIL)126 460 Q 7.2
(TTTTT)126 474 S(NIL NIL NIL NIL NIL)126 488 Q 7.2(TTTTT)126 502 S 7.2(>\()126
516 S(defpvar *some-such-pvar* 0\))147.6 516 Q(*SOME-SUCH-PVAR*)126 530 Q 7.2
(>\()126 544 S(*when *even-mask*)147.6 544 Q(\(*setf *some-such-pvar*)154.8 558
Q(\(sin!! \(/!! \(!! pi\) \(!! 2\)\)\)\)\))205.2 572 Q(NIL)126 586 Q 7.2(>\()
126 600 S(ppp *some-such-pvar* :mode :grid :end '\(5 5\)\))147.6 600 Q
(DIMENSION 0 \(X\))162 628 Q(----->)284.4 628 Q(1.0 1.0 1.0 1.0 1.0)126 656 Q
7.2(00000)126 670 S(1.0 1.0 1.0 1.0 1.0)126 684 Q EP
%%Page: 56 56
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-5)293.004 50 S 3(6-)306 50 S/F1 12/Courier@0 SF 7.2
(00000)126 86 S(1.0 1.0 1.0 1.0 1.0)126 100 Q(>)126 114 Q F0 2.421
(The Common Lisp ")126 142 R F1(when)A F0 5.421("f)C 2.421(unction is like ")
274.944 142 R F1(if)A F0 5.421("w)C 2.42(ithout the ")391.488 142 R F1(else)A
F0 5.42("c)C(lause.)494.34 142 Q F1(*when)126 156 Q F0 4.708
(capitalises on this property and provides the most straightforward)7.708 F
.127(selection and deselection of processors. Here is the demonstration of the\
 Common)126 170 R(Lisp)126 184 Q F1(when)3 E F0(function.)3 E F1 7.2(>\()126
212 S(when t)147.6 212 Q(\(print "hello world"\)\))154.8 226 Q("hello world")
126 254 Q("hello world")126 268 Q 7.2(>\()126 282 S(when nil)147.6 282 Q
(\(print "do not print anything"\)\))154.8 296 Q(NIL)126 310 Q(>)126 324 Q F0
(2\))90 352 Q F1(*if)3 E F0(is like)3 E F1(*when)3 E F0(but it has the)3 E F1
(else)3 E F0(clause too:)3 E F1 7.2(>\()126 380 S(*if *even-mask*)147.6 380 Q
(\(*setf *some-such-pvar*)176.4 394 Q(\(sin!! \(/!! \(!! pi\) \(!! 2\)\)\)\))
226.8 408 Q(\(*setf *some-such-pvar*)162 422 Q
(\(sin!! \(/!! \(!! \(- pi\)\) \(!! 4\)\)\)\)\))212.4 436 Q(NIL)126 450 Q 7.2
(>\()126 464 S(ppp *some-such-pvar* :mode :grid :end '\(5 5\)\))147.6 464 Q
(DIMENSION 0 \(X\))162 492 Q(----->)284.4 492 Q(1.0 1.0 1.0 1.0 1.0)126 520 Q
(-0.7071067690849304 -0.7071067690849304)126 534 Q
(-0.7071067690849304 -0.7071067690849304)126 548 Q(-0.7071067690849304)126 562
Q(1.0 1.0 1.0 1.0 1.0)126 576 Q(-0.7071067690849304 -0.7071067690849304)126 590
Q(-0.7071067690849304 -0.7071067690849304)126 604 Q(-0.7071067690849304)126 618
Q(1.0 1.0 1.0 1.0 1.0)126 632 Q(>)126 646 Q F0(3\) There is also the)90 674 Q
F1(if!!)3 E F0(version which can be used as follows:)3 E F1 7.2(>\()126 702 S
(ppp)147.6 702 Q EP
%%Page: 57 57
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-5)293.004 50 S 3(7-)306 50 S/F1 12/Courier@0 SF
(\(if!! *even-mask*)154.8 86 Q(\(sin!! \(/!! \(!! pi\) \(!! 2\)\)\))198 100 Q
(\(sin!! \(/!! \(!! \(- pi\)\) \(!! 4\)\)\)\))176.4 114 Q
(:mode :grid :end '\(5 5\)\))154.8 128 Q(DIMENSION 0 \(X\))162 156 Q(----->)
284.4 156 Q(1.0 1.0 1.0 1.0 1.0)126 184 Q
(-0.7071067690849304 -0.7071067690849304)126 198 Q
(-0.7071067690849304 -0.7071067690849304)126 212 Q(-0.7071067690849304)126 226
Q(1.0 1.0 1.0 1.0 1.0)126 240 Q(-0.7071067690849304 -0.7071067690849304)126 254
Q(-0.7071067690849304 -0.7071067690849304)126 268 Q(-0.7071067690849304)126 282
Q(1.0 1.0 1.0 1.0 1.0)126 296 Q(>)126 310 Q F0(4\) The function)90 338 Q F1
(*unless)3 E F0(is the opposite of)3 E F1(*when)3 E F0(.)A
(5\) There is also the)90 352 Q F1(*)3 E F0(version of the Common Lisp)3 E F1
(case)3 E F0(function:)3 E F1 7.2(>\()126 380 S(defpvar *another-pvar* 1\))
147.6 380 Q(*ANOTHER-PVAR*)126 394 Q 14.4(>\()126 408 S
(*case \(mod!! \(self-address!!\) \(!! 4\)\))154.8 408 Q 28.8(\(0 \(*setf)169.2
422 R(*another-pvar* \(!! 0\)\)\))7.2 E
(\(\(1 2\) \(*setf *another-pvar* \(self-address!!\)\)\))169.2 436 Q 28.8
(\(3 \(*setf)169.2 450 R(*another-pvar* \(!! -1\)\)\)\))7.2 E(NIL)126 464 Q 7.2
(>\()126 478 S(ppp *another-pvar* :mode :grid :end '\(5 5\)\))147.6 478 Q
(DIMENSION 0 \(X\))162 506 Q(----->)284.4 506 Q 7.2(02060)126 534 S 7.2(1-)126
548 S 7.2(15-)147.6 548 S 7.2(11)183.6 548 S(29)205.2 548 Q 7.2(01)126 562 S
7.2(001)147.6 562 S 7.2(40)183.6 562 S 7.2(9-)126 576 S 7.2(11)147.6 576 S 7.2
(3-)169.2 576 S 7.2(11)190.8 576 S(37)212.4 576 Q 7.2(01)126 590 S 7.2(802)
147.6 590 S 7.2(20)183.6 590 S(>)126 604 Q F0(and its)126 632 Q F1(!!)3 E F0
(equivalent:)3 E F1 7.2(>\()126 660 S(ppp)147.6 660 Q
(\(case!! \(mod!! \(self-address!!\) \(!! 4\)\))154.8 674 Q 28.8(\(0 \(!!)176.4
688 R(0\)\))7.2 E EP
%%Page: 58 58
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-5)293.004 50 S 3(8-)306 50 S/F1 12/Courier@0 SF
(\(\(1 2\) \(self-address!!\)\))176.4 86 Q 28.8(\(3 \(!!)176.4 100 R(-1\)\)\))
7.2 E(:mode :grid :end '\(5 5\)\))154.8 114 Q(DIMENSION 0 \(X\))162 142 Q
(----->)284.4 142 Q 7.2(02060)126 170 S 7.2(1-)126 184 S 7.2(15-)147.6 184 S
7.2(11)183.6 184 S(29)205.2 184 Q 7.2(01)126 198 S 7.2(001)147.6 198 S 7.2(40)
183.6 198 S 7.2(9-)126 212 S 7.2(11)147.6 212 S 7.2(3-)169.2 212 S 7.2(11)190.8
212 S(37)212.4 212 Q 7.2(01)126 226 S 7.2(802)147.6 226 S 7.2(20)183.6 226 S(>)
126 240 Q F0(6\))90 268 Q F1(*when)6.136 E F0 3.136
(can be used in combination with)6.136 F F1(grid-from-cube-address!!)6.136 E F0
(and)6.136 E F1(self-address!!)126 282 Q F0(to set)3 E(boundary conditions:)6 E
F1 7.2(>\()126 310 S(*setf *some-such-pvar* \(!! 0\)\))147.6 310 Q(NIL)126 324
Q 7.2(>\()126 338 S(*when \(=!! \(grid-from-cube-address!!)147.6 338 Q
(\(self-address!!\) \(!! 1\)\) \(!! 0\)\))241.2 352 Q
(\(*setf *some-such-pvar* \(!! 1\)\)\))154.8 366 Q(NIL)126 380 Q 7.2(>\()126
394 S(ppp *some-such-pvar* :mode :grid :end '\(5 5\)\))147.6 394 Q
(DIMENSION 0 \(X\))162 422 Q(----->)284.4 422 Q 7.2(11111)126 450 S 7.2(00000)
126 464 S 7.2(00000)126 478 S 7.2(00000)126 492 S 7.2(00000)126 506 S(>)126 520
Q F0 1.279(7\) In order to de\214ne dif)90 548 R 1.278
(ferent boundary conditions at two boundaries in one evaluation)-.216 F 2.518
(one can use)126 562 R F1(*case)5.518 E F0 2.518(combined with)9.718 F F1
(grid-from-cube-address!!)9.719 E F0(and)9.719 E F1(self-address!!)126 576 Q
7.2(>\()126 604 S(*case \(grid-from-cube-address!!)147.6 604 Q
(\(self-address!!\) \(!! 1\)\))205.2 618 Q 7.2(\(0 \(*setf)169.2 632 R
(*some-such-pvar* \(!! 1\)\)\))7.2 E
(\(31 \(*setf *some-such-pvar* \(!! -1\)\)\)\))169.2 646 Q(NIL)126 660 Q 7.2
(>\()126 674 S(ppp *some-such-pvar* :mode :grid :end '\(5 5\)\))147.6 674 Q
(DIMENSION 0 \(X\))162 702 Q(----->)284.4 702 Q EP
%%Page: 59 59
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-5)293.004 50 S 3(9-)306 50 S/F1 12/Courier@0 SF 7.2
(11111)126 86 S 7.2(00000)126 100 S 7.2(00000)126 114 S 7.2(00000)126 128 S 7.2
(00000)126 142 S 7.2(>\()126 156 S(ppp *some-such-pvar* :mode :grid)147.6 156 Q
(:start '\(0 27\) :end '\(5 32\)\))176.4 170 Q(DIMENSION 0 \(X\))162 198 Q
(----->)284.4 198 Q 7.2(00000)126 226 S 7.2(00000)126 240 S 7.2(00000)126 254 S
7.2(00000)126 268 S(-1 -1 -1 -1 -1)126 282 Q(>)126 296 Q F0 1.716(8\) Finally)
90 324 R 4.716(,t)-.78 G 1.715
(here is the parallel equivalent of the Common Lisp)148.992 324 R F1(cond)4.715
E F0 1.715(function. In the)4.715 F 3.39(example below we use)126 338 R F1
(cond!!)6.39 E F0 3.39(combined with)6.39 F F1(random!!)6.39 E F0(and)6.39 E F1
(sin!!)6.39 E F0(to)6.39 E(generate a random sequence of heads and tails:)126
352 Q F1 7.2(>\()126 380 S(defpvar *random-pvar* \(random!! \(* 2 pi\)\)\))
147.6 380 Q(*RANDOM-PVAR*)126 394 Q 7.2(>\()126 408 S
(*setf *random-pvar* \(sin!! *random-pvar*\)\))147.6 408 Q(NIL)126 422 Q 7.2
(>\()126 436 S(ppp *random-pvar* :end 10\))147.6 436 Q
(-0.6397389769554138 -0.21332737803459168)126 450 Q
(0.3066985011100769 -0.9545149207115173)126 464 Q
(-0.32147568464279175 -0.39945465326309204)126 478 Q
(0.5027628540992737 0.4262485206127167)126 492 Q
(-0.11847128719091416 0.9911273121833801)126 506 Q 7.2(>\()126 520 S(ppp)147.6
520 Q(\(cond!!)154.8 534 Q(\(\(minusp!! *random-pvar*\) \(!! -1\)\))169.2 548 Q
(\(\(plusp!! *random-pvar*\) \(!! 1\)\))169.2 562 Q(\(t!! \(!! 0\)\)\))169.2
576 Q(:end 20\))154.8 590 Q(-1 -1 1 -1 -1 -1 1 1 -1 1 1 -1 1 1 -1 -1 1 -1 -1 1)
126 604 Q(>)126 618 Q/F2 12/Times-Bold@0 SF(Summary)75 646 Q F0 .732(1\) There\
 are several functions for selecting and deselecting groups of processors.)90
674 R(These)6.732 E .505(are parallel generalisations of Common Lisp predicate\
s. The most important ones)126 688 R(are:)126 702 Q F1 1.136
(*when, *unless, *if, if!!, *case, case!!, *cond,)4.136 F F0(and)4.135 E F1
(cond!!)126 716 Q EP
%%Page: 60 60
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-6)293.004 50 S 3(0-)306 50 S(2\))90 86 Q/F1 12
/Courier@0 SF(*cond)5.394 E F0(or)5.394 E F1(*case)5.394 E F0 2.395
(in combination with)5.395 F F1(grid-from-cube-address!!)5.395 E F0 2.395
(can be)5.395 F(used to operate on selected rows or columns of rectangular)126
100 Q F1(pvars)3 E F0(.)A 3.066(3\) Other useful predicates are)90 114 R F1
3.065(evenp!!, oddp!!, minusp!!, plusp!!)6.065 F F0 6.065(.A)C .58
(combination of)126 128 R F1 .58(random!!, sin!!, minusp!!,)210.936 128 R F0
(and)3.58 E F1(plusp!!)3.58 E F0 .58(was used)3.58 F
(in the last example to generate a random sequence of heads and tails.)126 142
Q EP
%%Page: 61 61
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-6)293.004 50 S 3(1-)306 50 S/F1 16/Times-Roman@0 SF
(Lesson 10)273.336 90 Q(Segmented Scans)249.784 108 Q/F2 12/Times-Bold@0 SF
(What is a segmented scan operation?)75 144 Q F0
(1\) Connect to the CM-5 and de\214ne the default geometry: one-line, 2)90 172
Q/F3 10/Times-Roman@0 SF(10)417.288 166 Q F0(entries long)430.288 172 Q/F4 12
/Courier@0 SF 7.2(>\()126 200 S(*cold-boot :initial-dimensions)147.6 200 Q
(\(list \(expt 2 10\)\)\))226.8 214 Q(;;; Not attached.)126 242 Q(Attaching...)
262.8 242 Q(1024)126 270 Q(\(1024\))126 284 Q(25554)126 298 Q(>)126 312 Q F0
(2\) De\214ne a simple one dimensional parallel variable:)90 340 Q F4 7.2(>\()
126 368 S(defpvar *lots-of-ones* \(!! 1\) fixnum\))147.6 368 Q(*LOTS-OF-ONES*)
126 382 Q(>)126 396 Q F0 .579(3\) W)90 424 R 3.579(ew)-.96 G .578(ill now atte\
mpt to chop that variable into segments and perform operations on it)131.514
424 R .001(which will be localised within the segments. Begin with de\214ning \
the segmentation)126 438 R(mask:)126 452 Q F4 7.2(>\()126 480 S
(defpvar *segment-mask* \(!! nil\) boolean\))147.6 480 Q(*SEGMENT-MASK*)126 494
Q 7.2(>\()126 508 S(ppp *segment-mask* :start 3 :end 10\))147.6 508 Q
(NIL NIL NIL NIL NIL NIL NIL)126 522 Q(>)126 536 Q F0 .395
(This is not much of a segmentation mask since it doesn')126 564 R 3.394(th)
-.216 G .394(ave any tees)411.778 564 R F4(\(T\))3.394 E F0 .394(in it.)3.394 F
1.92 -.96(We c)126 578 T(an insert some).96 E F4(tees)3 E F0(using the)3 E F4
(mod!!)3 E F0(operation:)3 E F4 7.2(>\()126 606 S
(ppp \(mod!! \(self-address!!\) \(!! 7\)\) :end 20\))147.6 606 Q 7.2
(01234560123456012345)126 620 S 7.2(>\()126 634 S
(ppp \(=!! \(mod!! \(self-address!!\) \(!! 7\)\) \(!! 0\)\))147.6 634 Q
(:end 20\))176.4 648 Q 7.2(TN)126 662 S
(IL NIL NIL NIL NIL NIL T NIL NIL NIL NIL NIL NIL T)147.6 662 Q
(NIL NIL NIL NIL NIL)126 676 Q(>)126 690 Q EP
%%Page: 62 62
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-6)293.004 50 S 3(2-)306 50 S 2.292
(4\) The latter looks like a good segmentation mask. W)90 86 R 5.292(ew)-.96 G
2.292(ill save it on our boolean)386.256 86 R/F1 12/Courier@0 SF
(*segment-mask*)126 100 Q F0(:)A F1 7.2(>\()126 128 S(*setf *segment-mask*)
147.6 128 Q(\(=!! \(mod!! \(self-address!!\) \(!! 7\)\))190.8 142 Q
(\(!! 0\)\)\))226.8 156 Q(NIL)126 170 Q 7.2(>\()126 184 S
(ppp *segment-mask* :end 20\))147.6 184 Q 7.2(TN)126 198 S
(IL NIL NIL NIL NIL NIL T NIL NIL NIL NIL NIL NIL T)147.6 198 Q
(NIL NIL NIL NIL NIL)126 212 Q(>)126 226 Q F0(5\) W)90 254 Q
(ith this segmentation mask we can chop our f)-.48 E F1(ixnum pvar)A F0(*)3 E
F1(lots-of-ones*)162 268 Q F0 3.864
(to pieces and perform various operations on the)266.664 268 R
(chunks of it. For example we can sum up the contents of the segments.)126 282
Q F1 7.2(>\()126 310 S(ppp \(scan!! *lots-of-ones* '+!!)147.6 310 Q
(:segment-pvar *segment-mask*)234 324 Q(:include-self t\) :end 20\))234 338 Q
7.2(12345671234567123456)126 352 S(>)126 366 Q F0(6\) W)90 394 Q 3(ec)-.96 G
(an also perform the same operation backwards:)127.02 394 Q F1 7.2(>\()126 422
S(ppp \(scan!! *lots-of-ones* '+!!)147.6 422 Q(:segment-pvar *segment-mask*)234
436 Q(:direction :backward)234 450 Q(:include-self t\))234 464 Q(:end 20\))
176.4 478 Q 7.2(17654321765432176543)126 492 S(>)126 506 Q F0
(7\) What is the dif)90 534 Q(ference between the above and)-.216 E F1 7.2(>\()
126 562 S(ppp \(scan!! *lots-of-ones* '+!!)147.6 562 Q
(:segment-pvar *segment-mask*)234 576 Q(:direction :backward)234 590 Q
(:include-self t)234 604 Q(:segment-mode :segment\) :end 20\))234 618 Q 7.2
(76543217654321765432)126 632 S(>)126 646 Q F0
(Have a close look, again at our segmentation mask)126 674 Q F1 7.2(>\()126 702
S(ppp *segment-mask* :end 20\))147.6 702 Q EP
%%Page: 63 63
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-6)293.004 50 S 3(3-)306 50 S/F1 12/Courier@0 SF 7.2
(TN)126 86 S(IL NIL NIL NIL NIL NIL T NIL NIL NIL NIL NIL NIL T)147.6 86 Q
(NIL NIL NIL NIL NIL)126 100 Q(>)126 114 Q F0(8\) Let us save the result of su\
mming up the numbers in the segments on a new variable)90 142 Q F1 7.2(>\()126
170 S(defpvar *one-to-seven*)147.6 170 Q(\(scan!! *lots-of-ones* '+!!)169.2 184
Q(:segment-pvar *segment-mask*)226.8 198 Q(:include-self t\) fixnum\))226.8 212
Q(*ONE-TO-SEVEN*)126 226 Q 7.2(>\()126 240 S(ppp *one-to-seven* :end 20\))147.6
240 Q 7.2(12345671234567123456)126 254 S(>)126 268 Q F0 .483(9\) The segmented\
 scan operation can be also used to spread elements from the processor)90 296 R
1.487(marked with)126 310 R F1(T)4.487 E F0 1.487
(over the remaining processors belonging to the segment. In this)4.487 F
(example we spread)126 324 Q F1(1)3 E F0(over whole segments:)3 E F1 7.2(>\()
126 352 S(ppp \(scan!! *one-to-seven* 'copy!! :segment-pvar)147.6 352 Q
(*segment-mask*)126 366 Q(:include-self t\) :end 20\))212.4 380 Q 7.2
(11111111111111111111)126 394 S(>)126 408 Q F0(10\) W)90 436 Q 3(ec)-.96 G
(an also spread in the backward direction:)133.02 436 Q F1 7.2(>\()126 464 S
(ppp \(scan!! *one-to-seven* 'copy!!)147.6 464 Q(:segment-pvar *segment-mask*)
234 478 Q(:include-self t)234 492 Q(:direction :backward)234 506 Q
(:segment-mode :segment\) :end 20\))234 520 Q 7.2(77777777777777777777)126 534
S(>)126 548 Q F0 -.444(11)90 576 S 4.005(\)B).444 G 4.005(yi)117.561 576 S
1.005(ntroducing a new very \214nely grained segmentation mask \()130.902 576 R
F1(t!!)A F0 4.006(,i)C 1.006(.e. the T)450.174 576 R 1.006(ees all)-.84 F
(over the place\) we can immitate the NEWS operations with)126 590 Q F1(scan!!)
3 E 7.2(>\()126 618 S(ppp \(scan!! *one-to-seven* 'copy!!)147.6 618 Q
(:segment-pvar t!! :include-self t\))234 632 Q(:end 20\))176.4 646 Q 7.2
(12345671234567123456)126 660 S 7.2(>\()126 674 S
(ppp \(scan!! *one-to-seven* 'copy!!)147.6 674 Q(:segment-pvar t!!)234 688 Q EP
%%Page: 64 64
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-6)293.004 50 S 3(4-)306 50 S/F1 12/Courier@0 SF
(:include-self nil\) :end 20\))234 86 Q 7.2(01234567123456712345)126 100 S(>)
126 114 Q F0 1.106(Observe that the \214rst attempt didn')126 142 R 4.106(tw)
-.216 G 1.106(ork, whereas the second one did. Explain.)315.072 142 R 1.847
(Also observe how in on the second attempt)126 156 R F1(scan!!)4.847 E F0 1.847
(automatically rolled in 0)4.847 F("from beyond the edge of the Universe".)126
170 Q 1.92 -.96(We c)6 H(an also do NEWS to the left:).96 E F1 7.2(>\()126 198
S(ppp \(scan!! *one-to-seven* 'copy!!)147.6 198 Q(:segment-pvar t!!)234 212 Q
(:include-self nil)234 226 Q(:direction :backward\))234 240 Q(:end 20\))176.4
254 Q 7.2(23456712345671234567)126 268 S(>)126 282 Q/F2 12/Times-Bold@0 SF
(The segmented-news!! operation)75 310 Q F0 .973
(1\) The operation demonstrated above shifted the whole)90 338 R F1(pvar)3.973
E F0 .973(to the right or to the left.)3.973 F .34(How can we de\214ne a segme\
nted NEWS operation, i.e., an operation which would)126 352 R(perform)126 366 Q
/F3 12/Times-Italic@0 SF -.444(ro)6.352 G(tations).444 E F0 3.352
(with wrap-around within segments? Let us concentrate on)6.352 F 1.352
(forward NEWS \214rst. T)126 380 R 4.352(oa)-.84 G 1.352
(chieve a segmented rotation we need to pick the item)254.876 380 R 2.339
(which ends every segment, save it, and insert back at the beginning of every)
126 394 R(segment after rotation of the whole)126 408 Q F1(pvar)304.5 408 Q F0
(was accomplished.)3 E 2.252(2\) W)90 422 R 5.252(ec)-.96 G 2.252
(an spread that last item in each segment using)131.524 422 R F1 2.253
(:backward 'copy!!)5.253 F F0(and)5.253 E F1(:segment-mode :segment)126 436 Q
F0(:)A F1 7.2(>\()126 464 S(defpvar *proc-numbers* \(self-address!!\) fixnum\))
147.6 464 Q(*PROC-NUMBERS*)126 478 Q 7.2(>\()126 492 S
(ppp \(scan!! *proc-numbers* 'copy!!)147.6 492 Q(:segment-pvar *segment-mask*)
234 506 Q(:direction :backward)234 520 Q(:segment-mode :segment\))234 534 Q
(:end 20\))176.4 548 Q 7.2(66666661)126 562 S 7.2(31)234 562 S 7.2(31)255.6 562
S 7.2(31)277.2 562 S 7.2(31)298.8 562 S 7.2(31)320.4 562 S 7.2(31)342 562 S 7.2
(32)363.6 562 S 7.2(02)385.2 562 S 7.2(02)406.8 562 S 7.2(02)428.4 562 S 7.2
(02)450 562 S 7.2(02)471.6 562 S(0)493.2 562 Q 7.2(>\()126 576 S
(ppp *proc-numbers* :end 20\))147.6 576 Q 7.2(01234567891)126 590 S 7.2(01)
277.2 590 S 7.2(11)298.8 590 S 7.2(21)320.4 590 S 7.2(31)342 590 S 7.2(41)363.6
590 S 7.2(51)385.2 590 S 7.2(61)406.8 590 S 7.2(71)428.4 590 S 7.2(81)450 590 S
(9)471.6 590 Q 7.2(>\()126 604 S(ppp *segment-mask* :end 20\))147.6 604 Q 7.2
(TN)126 618 S(IL NIL NIL NIL NIL NIL T NIL NIL NIL NIL NIL NIL T)147.6 618 Q
(NIL NIL NIL NIL NIL)162 632 Q(>)126 646 Q F0
(Since this works, it is worth saving:)126 674 Q F1 7.2(>\()126 702 S
(defpvar *temp-store* 0 fixnum\))147.6 702 Q EP
%%Page: 65 65
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-6)293.004 50 S 3(5-)306 50 S/F1 12/Courier@0 SF
(*TEMP-STORE*)126 86 Q 7.2(>\()126 100 S(*setf *temp-store*)147.6 100 Q
(\(scan!! *proc-numbers* 'copy!!)169.2 114 Q(:segment-pvar *segment-mask*)205.2
128 Q(:direction :backward :segment-mode)205.2 142 Q(:segment\)\))126 156 Q
(NIL)126 170 Q 7.2(>\()126 184 S(ppp *temp-store* :end 20\))147.6 184 Q 7.2
(66666661)126 198 S 7.2(31)234 198 S 7.2(31)255.6 198 S 7.2(31)277.2 198 S 7.2
(31)298.8 198 S 7.2(31)320.4 198 S 7.2(31)342 198 S 7.2(32)363.6 198 S 7.2(02)
385.2 198 S 7.2(02)406.8 198 S 7.2(02)428.4 198 S 7.2(02)450 198 S 7.2(02)471.6
198 S(0)493.2 198 Q(>)126 212 Q F0(3\) Now we can rotate the whole)90 240 Q F1
-4.2(pvar *proc-numbers*)3 F F0(to the right as before)3 E F1 7.2(>\()126 268 S
(defpvar *shifted-proc-numbers* 0 fixnum\))147.6 268 Q(*SHIFTED-PROC-NUMBERS*)
126 282 Q(>)126 296 Q 7.2(>\()126 310 S(*setf *shifted-proc-numbers*)147.6 310
Q(\(scan!! *proc-numbers* 'copy!!)162 324 Q(:segment-pvar t!!)219.6 338 Q
(:include-self nil\)\))219.6 352 Q(NIL)126 366 Q 7.2(>\()126 380 S
(ppp *shifted-proc-numbers* :end 20\))147.6 380 Q 7.2(001234567891)126 394 S
7.2(01)291.6 394 S 7.2(11)313.2 394 S 7.2(21)334.8 394 S 7.2(31)356.4 394 S 7.2
(41)378 394 S 7.2(51)399.6 394 S 7.2(61)421.2 394 S 7.2(71)442.8 394 S(8)464.4
394 Q(>)126 408 Q F0 3.98(4\) and \214nally we insert numbers from)90 436 R F1
(*temp-store*)6.98 E F0(into)6.98 E F1(*shifted-proc-)6.98 E(number*)126 450 Q
F0(in places marked by)3 E F1(tees)3 E F0(of the)3 E F1(*segment-mask*)3 E F0
(:)A F1 7.2(>\()126 478 S(*when *segment-mask*)147.6 478 Q
(\(*setf *shifted-proc-numbers* *temp-store*\)\))154.8 492 Q(NIL)126 506 Q 7.2
(>\()126 520 S(ppp *proc-numbers* :end 20\))147.6 520 Q 7.2(01234567891)126 534
S 7.2(01)277.2 534 S 7.2(11)298.8 534 S 7.2(21)320.4 534 S 7.2(31)342 534 S 7.2
(41)363.6 534 S 7.2(51)385.2 534 S 7.2(61)406.8 534 S 7.2(71)428.4 534 S 7.2
(81)450 534 S(9)471.6 534 Q 7.2(>\()126 548 S
(ppp *shifted-proc-numbers* :end 20\))147.6 548 Q 7.2(60123451)126 562 S 7.2
(37891)234 562 S 7.2(01)298.8 562 S 7.2(11)320.4 562 S 7.2(22)342 562 S 7.2(01)
363.6 562 S 7.2(41)385.2 562 S 7.2(51)406.8 562 S 7.2(61)428.4 562 S 7.2(71)450
562 S(8)471.6 562 Q(>)126 576 Q F0 2.134(5\) Observe that somehow)90 604 R
5.134(,q)-.78 G 2.134(uite automatically)232.732 604 R 5.134(,t)-.78 G 2.134
(he last segment which is shorter than)331.884 604 R
(other segments also took care of itself correctly:)126 618 Q F1 7.2(>\()126
646 S(ppp *shifted-proc-numbers* :start 1010 :end 1024\))147.6 646 Q
(1009 1010 1011 1012 1013 1021 1015 1016 1017 1018 1019)126 660 Q
(1020 1023 1022)126 674 Q(>)126 688 Q EP
%%Page: 66 66
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-6)293.004 50 S 3(6-)306 50 S 2.246(6\) Above we exp\
erimented with the ways of implementing rotation within segments.)90 86 R
(Now it')126 100 Q 3(st)-.66 G
(ime to wrap it all up into a function. And here it is:)173.34 100 Q/F1 12
/Courier@0 SF(\(defun segmented-news!! \(data-pvar segment-mask\))126 128 Q
(\(*let \(\(temp-store \(scan!! data-pvar 'copy!!)140.4 142 Q
(:segment-pvar segment-mask)291.6 156 Q(:direction :backward)291.6 170 Q
(:segment-mode :segment\)\))291.6 184 Q
(\(shifted-pvar \(scan!! data-pvar 'copy!!)190.8 198 Q(:segment-pvar t!!)306
212 Q(:include-self nil\)\)\))306 226 Q(\(if!! segment-mask)154.8 240 Q
(temp-store)198 254 Q(shifted-pvar\)\)\))183.6 268 Q F0 .033(By the way)126 296
R 3.033(,l)-.78 G .033(ooking at the)189.315 296 R F1(if!!)3.033 E F0 .033
(clause, can you explain why there is no)3.033 F F1(when!!)3.032 E F0 .003
(function in *Lisp? \(In fact there is almost a)126 310 R F1(when!!)3.004 E F0
.004(function. The function)3.004 F F1(if!!)3.004 E F0 .282
(can be used without the)126 324 R F1(else)3.281 E F0 .281
(clause. In that case that clause defaults to)3.281 F F1(nil!!)3.281 E F0(.\))A
(7\) Here is how it works:)90 338 Q F1 7.2(>\()126 366 S
(ppp *segment-mask* :end 20\))147.6 366 Q 7.2(TN)126 380 S
(IL NIL NIL NIL NIL NIL T NIL NIL NIL NIL NIL)147.6 380 Q
(NIL T NIL NIL NIL NIL NIL)126 394 Q 7.2(>\()126 408 S
(ppp *proc-numbers* :end 20\))147.6 408 Q 7.2(01234567891)126 422 S 7.2(01)
277.2 422 S 7.2(11)298.8 422 S 7.2(21)320.4 422 S 7.2(31)342 422 S 7.2(41)363.6
422 S 7.2(51)385.2 422 S 7.2(61)406.8 422 S 7.2(71)428.4 422 S 7.2(81)450 422 S
(9)471.6 422 Q 7.2(>\()126 436 S
(ppp \(segmented-news!! *proc-numbers* *segment-mask*\))147.6 436 Q(:end 20\))
162 450 Q 7.2(60123451)126 464 S 7.2(37891)234 464 S 7.2(01)298.8 464 S 7.2(11)
320.4 464 S 7.2(22)342 464 S 7.2(01)363.6 464 S 7.2(41)385.2 464 S 7.2(51)406.8
464 S 7.2(61)428.4 464 S 7.2(71)450 464 S(8)471.6 464 Q(>)126 478 Q F0 1.508
(8\) W)90 506 R 4.508(ec)-.96 G 1.507(an add a key-word)130.036 506 R F1
(:border-pvar)4.507 E F0 1.507(to our)4.507 F F1(segmented-news!!)4.507 E F0
(de\214nition.)4.507 E 2.965(When used with the)126 520 R F1(:border-pvar)5.965
E F0 2.965(switch the function would slip in the)5.965 F .597(values from the)
126 534 R F1(border-pvar)3.597 E F0 .597(into locations marked by ")3.597 F F1
(T)A F0 3.596("i)C 3.596(nt)436.544 534 S(he)449.476 534 Q F1(segment-)3.596 E
(mask)126 548 Q F0 .481(instead of wrapping around the segments.)3.48 F .481
(In this way we also add)6.481 F F1(news-)3.481 E(border!!)126 562 Q F0
(functionality to our)3 E F1(segmented-news!!)3 E F0(:)A F1
(\(defun segmented-news!! \(data-pvar segment-mask)126 590 Q
(&key \(border-pvar nil\)\))306 604 Q(\(*let \(\(temp-store \(if!! border-pvar)
140.4 618 Q(border-pvar)320.4 632 Q(\(scan!! data-pvar 'copy!!)298.8 646 Q
(:segment-pvar segment-mask)313.2 660 Q(:direction :backward)313.2 674 Q
(:segment-mode :segment\)\)\))313.2 688 Q EP
%%Page: 67 67
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-6)293.004 50 S 3(7-)306 50 S/F1 12/Courier@0 SF
(\(shifted-pvar \(scan!! data-pvar 'copy!!)190.8 86 Q(:segment-pvar t!!)306 100
Q(:include-self nil\)\)\))306 114 Q(\(if!! segment-mask)154.8 128 Q(temp-store)
198 142 Q(shifted-pvar\)\)\))183.6 156 Q F0 .871
(9\) Observe that this new function works as before if used)90 184 R/F2 12
/Times-Italic@0 SF(without)3.87 E F0(the)3.87 E F1(:border-pvar)3.87 E F0 .221
(switch, and works as we have planned when the)126 198 R F1(:border-pvar)3.221
E F0(switch)3.221 E F2(is)3.221 E F0(used:)3.221 E F1 7.2(>\()126 226 S
(ppp \(segmented-news!! *proc-numbers* *segment-mask*\))147.6 226 Q(:end 20\))
126 240 Q 7.2(60123451)126 254 S 7.2(37891)234 254 S 7.2(01)298.8 254 S 7.2(11)
320.4 254 S 7.2(22)342 254 S 7.2(01)363.6 254 S 7.2(41)385.2 254 S 7.2(51)406.8
254 S 7.2(61)428.4 254 S 7.2(71)450 254 S(8)471.6 254 Q 7.2(>\()126 268 S
(ppp \(segmented-news!! *proc-numbers* *segment-mask*)147.6 268 Q
(:border-pvar \(!! -1\)\))126 282 Q(:end 20\))176.4 296 Q
(-1 0 1 2 3 4 5 -1 7 8 9 10 11 12 -1 14 15 16 17 18)126 310 Q 7.2(>\()126 324 S
(ppp \(segmented-news!!)147.6 324 Q(*proc-numbers* *segment-mask*)190.8 338 Q
(:border-pvar \(!! -1\)\))190.8 352 Q(:start 1010 :end 1024\))176.4 366 Q
(1009 1010 1011 1012 1013 -1 1015 1016 1017 1018 1019)126 380 Q(1020 -1 1022)
126 394 Q(>)126 408 Q F0(10\))90 436 Q/F3 12/Times-Bold@0 SF(Exer)4.278 E(cise)
-.216 E F0 4.278(:e)C 1.278(xpand the de\214nition of)166.32 436 R F1
(segmented-news!!)4.279 E F0 1.279(further to allow also for)4.279 F
(backward rotation.)126 450 Q F3(Summary)75 478 Q F0 1.02(1\) Function)90 506 R
F1(scan!!)4.02 E F0 1.02
(can perform accumulative operations on segmented linear)4.02 F F1(pvars)4.02 E
F0(with segments de\214ned by a segmentation mask.)126 520 Q(2\))90 534 Q F1
(scan!!)6.046 E F0 3.047(operations can be performed in)6.046 F F1(:forward)
6.047 E F0 3.047(\(default\) and)6.047 F F1(:backward)6.047 E(:directions)126
548 Q F0(.)A
(3\) the \214rst element of the segment can be included or dropped.)90 562 Q
.388(4\) For)90 576 R F1(:backward)3.388 E F0 .388(scans the)3.388 F F1 .388
(:segment-mode :segment)3.388 F F0 .388(applies segment marking)3.388 F
(compliant with the)126 590 Q F1(:forward)3 E F0(direction.)3 E .292
(5\) Apart from accumulative arithmetic operations function)90 604 R F1(scan!!)
3.292 E F0 .293(can also perform the)3.293 F F1(copy!!)126 618 Q F0 4.118
(operation. This operation spreads data from the beginning of the)7.119 F
(segment over the whole segment.)126 632 Q(6\) The)90 646 Q F1(scan!!)3 E F0
(operation can be also used to simulate the NEWS shifts on 1D)3 E F1(pvars)3 E
F0(.)A 3.466(7\) The)90 660 R F1(segmented-news!!)6.466 E F0 3.467
(function which we have de\214ned ourselves performs)6.466 F 1.113
(rotations with wrap-around within segments or slips in the desired border)126
674 R F1(pvar)4.112 E F0(into locations marked by)126 688 Q F1(T)3 E F0
(in the segmentation mask.)3 E EP
%%Page: 68 68
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-6)293.004 50 S 3(8-)306 50 S/F1 16/Times-Roman@0 SF
(Lesson 1)273.632 90 Q(1)-.592 E(*Lisp Structures)253.336 108 Q/F2 12
/Times-Bold@0 SF(Modeling and generating particles)75 144 Q F0(1\) W)90 172 Q 3
(eb)-.96 G(egin by introducing a particle structure)127.692 172 Q/F3 12
/Courier@0 SF 7.2(>\()126 200 S(*defstruct particle)147.6 200 Q
(\(x 0.0 :type single-float\))140.4 214 Q(\(y 0.0 :type single-float\))140.4
228 Q(\(x0 0.0 :type single-float\))140.4 242 Q(\(y0 0.0 :type single-float\))
140.4 256 Q(\(work1 0.0 :type single-float\))140.4 270 Q
(\(work2 0.0 :type single-float\))140.4 284 Q(\(x-bin 0 :type fixnum\))140.4
298 Q(\(y-bin 0 :type fixnum\))140.4 312 Q(\(box-mark nil :type boolean\))140.4
326 Q(\(id 0 :type fixnum\))140.4 340 Q(\(processor 0 :type fixnum\)\))140.4
354 Q(;;; You are using the compiler in DEVELOPMENT mode)126 368 Q
(\(compilation-speed = 3\))126 382 Q
(;;; If you want faster code at the expense of longer)126 396 Q(compile time,)
126 410 Q(;;; you should use the production mode of the compiler,)126 424 Q
(which can be obtained)126 438 Q(;;; by evaluating \(lisp:proclaim '\(optimize)
126 452 Q(\(compilation-speed 0\)\)\))126 466 Q
(;;; Generation of full safety checking code is enabled)126 480 Q
(\(safety = 3\))126 494 Q
(;;; Optimization of tail calls is disabled \(speed = 2\))126 508 Q(PARTICLE)
126 522 Q(>)126 536 Q F0 2.19(The call to)126 564 R F3(*defstruct)5.19 E F0
2.189(automatically triggers the compiler which compiles)5.189 F
(dynamically generated accessor and structure creation functions.)126 578 Q
.267(2\) De\214ne a parallel variable which has the structure)90 606 R F3
(particle)3.268 E F0 .268(sitting on every \(virtual\))3.268 F(processor)126
620 Q(.)-.66 E F3 7.2(>\()126 648 S
(defpvar particles \(make-particle!!\) particle\))147.6 648 Q(PARTICLES)126 662
Q 7.2(>\()126 676 S(pref particles 173\))147.6 676 Q
(#S\(PARTICLE X 0.0 Y 0.0 X0 0.0 Y0 0.0 WORK1 0.0 WORK2)126 690 Q
(0.0 X-BIN 0 Y-BIN 0 BOX-MARK NIL ID 0 PROCESSOR 0\))126 704 Q EP
%%Page: 69 69
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-6)293.004 50 S 3(9-)306 50 S/F1 12/Courier@0 SF 7.2
(>\()126 86 S(ppp particles :start 111 :end 115\))147.6 86 Q/F2 10/Courier@0 SF
(#S\(PARTICLE X 0.0 Y 0.0 X0 0.0 Y0 0.0 WORK1 0.0 WORK2 0.0 X-BIN 0)126 98 Q
(Y-BIN 0 BOX-MARK NIL ID 0 PROCESSOR 0\))126 110 Q
(#S\(PARTICLE X 0.0 Y 0.0 X0 0.0 Y0 0.0 WORK1 0.0 WORK2 0.0 X-BIN 0)126 122 Q
(Y-BIN 0 BOX-MARK NIL ID 0 PROCESSOR 0\))126 134 Q
(#S\(PARTICLE X 0.0 Y 0.0 X0 0.0 Y0 0.0 WORK1 0.0 WORK2 0.0 X-BIN 0)126 146 Q
(Y-BIN 0 BOX-MARK NIL ID 0 PROCESSOR 0\))126 158 Q
(#S\(PARTICLE X 0.0 Y 0.0 X0 0.0 Y0 0.0 WORK1 0.0 WORK2 0.0 X-BIN 0)126 170 Q
(Y-BIN 0 BOX-MARK NIL ID 0 PROCESSOR 0\))126 182 Q F1(>)126 196 Q F0 .456
(3\) W)90 224 R 3.456(ec)-.96 G .456(an easily access any slot of this structu\
re by invoking the corresponding accessor)127.932 224 R(function)90 238 Q F1
7.2(>\()126 266 S(pref \(particle-x0!! particles\) 125\))147.6 266 Q(0.0)126
280 Q F0
(4\) Let us now scatter all particles at random within a square 100 x 100)90
308 Q F1 7.2(>\()126 336 S(setq x-width 100.0\))147.6 336 Q(100.0)126 350 Q 7.2
(>\()126 364 S(setq y-width 100.0\))147.6 364 Q(100.0)126 378 Q 7.2(>\()126 392
S(*setf \(particle-x!! particles\))147.6 392 Q(\(random!! \(!! x-width\)\)\))
190.8 406 Q(NIL)126 420 Q 7.2(>\()126 434 S(*setf \(particle-y!! particles\))
147.6 434 Q(\(random!! \(!! y-width\)\)\))190.8 448 Q(NIL)126 462 Q 7.2(>\()126
476 S(ppp particles :start 111 :end 115\))147.6 476 Q F2
(#S\(PARTICLE X 16.562498092651367 Y 69.52366638183594 X0 0.0 Y0 0.0)126 488 Q
(WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 0 BOX-MARK NIL ID 0 PROCESSOR 0\))126 500 Q
(#S\(PARTICLE X 3.6271214485168457 Y 64.846923828125 X0 0.0 Y0 0.0)126 512 Q
(WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 0 BOX-MARK NIL ID 0 PROCESSOR 0\))126 524 Q
(#S\(PARTICLE X 52.86708068847656 Y 26.74432945251465 X0 0.0 Y0 0.0)126 536 Q
(WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 0 BOX-MARK NIL ID 0 PROCESSOR 0\))126 548 Q
(#S\(PARTICLE X 32.238006591796875 Y 95.36654663085938 X0 0.0 Y0 0.0)126 560 Q
(WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 0 BOX-MARK NIL ID 0 PROCESSOR 0\))126 572 Q
F1(>)126 598 Q F0(5\) W)90 626 Q 3(es)-.96 G
(hould also assign a distinct id number to each particle)126.36 626 Q F1 7.2
(>\()126 654 S(*setf \(particle-id!! particles\))147.6 654 Q
(\(self-address!!\)\))190.8 668 Q(NIL)126 682 Q EP
%%Page: 70 70
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-7)293.004 50 S 3(0-)306 50 S/F1 12/Courier@0 SF 7.2
(>\()126 86 S(ppp particles :end 5\))147.6 86 Q/F2 10/Courier@0 SF
(#S\(PARTICLE X 6.005513668060303 Y 19.47820281982422 X0 0.0 Y0 0.0)126 98 Q
(WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 0 BOX-MARK NIL ID 0 PROCESSOR 0\))126 110 Q
(#S\(PARTICLE X 96.10951232910156 Y 56.32259750366211 X0 0.0 Y0 0.0)126 122 Q
(WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 0 BOX-MARK NIL ID 1 PROCESSOR 0\))126 134 Q
(#S\(PARTICLE X 13.404273986816407 Y 14.564407348632813 X0 0.0 Y0)126 146 Q
(0.0 WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 0 BOX-MARK NIL ID 2)126 158 Q
(PROCESSOR 0\))126 170 Q
(#S\(PARTICLE X 65.82643127441406 Y 24.56744956970215 X0 0.0 Y0 0.0)126 182 Q
(WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 0 BOX-MARK NIL ID 3 PROCESSOR 0\))126 194 Q
(#S\(PARTICLE X 99.88583374023438 Y 11.52757453918457 X0 0.0 Y0 0.0)126 206 Q
(WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 0 BOX-MARK NIL ID 4 PROCESSOR 0\))126 218 Q
F1(>)126 244 Q/F3 12/Times-Bold@0 SF(Sorting particles)75 272 Q F0 1.834(1\) O\
ur \214rst task in doing anything with those particles is to sort them and ins\
ert into)90 300 R(appropriate)126 314 Q F1(xy-bins)3 E F0
(for quick location, interpolation, etc.)3 E 1.3(2\) Before we can sort the pa\
rticles we must \214rst decide what it is that we want to sort)90 328 R
(them into:)126 342 Q F1 7.2(>\()126 370 S(setq number-of-x-bins 32\))147.6 370
Q(32)126 384 Q 7.2(>\()126 398 S(setq number-of-y-bins 32\))147.6 398 Q(32)126
412 Q 7.2(>\()126 426 S(setq x-bin-width \(/ x-width number-of-x-bins\)\))147.6
426 Q(3.125)126 440 Q 7.2(>\()126 454 S
(setq y-bin-width \(/ y-width number-of-y-bins\)\))147.6 454 Q(3.125)126 468 Q
F0 .898(3\) The \214rst step is to sort the particles in one direction. This i\
s accomplished by calling)90 496 R(the)126 510 Q F1(sort!!)3 E F0
(function with an appropriate key)3 E F1 7.2(>\()126 538 S
(*setf particles \(sort!! particles '<=!!)147.6 538 Q(:key 'particle-x!!\)\))
320.4 552 Q(NIL)126 566 Q 7.2(>\()126 580 S(ppp particles :end 5\))147.6 580 Q
F2(#S\(PARTICLE X 0.056815147399902344 Y 73.61520385742188 X0 0.0 Y0)126 592 Q
(0.0 WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 0 BOX-MARK NIL ID 330)126 604 Q
(PROCESSOR 0\))126 616 Q
(#S\(PARTICLE X 0.2538442611694336 Y 82.6822509765625 X0 0.0 Y0 0.0)126 628 Q
(WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 0 BOX-MARK NIL ID 56 PROCESSOR)126 640 Q
(0\))126 652 Q
(#S\(PARTICLE X 0.4670143127441406 Y 20.36408233642578 X0 0.0 Y0 0.0)126 664 Q
(WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 0 BOX-MARK NIL ID 243 PROCESSOR)126 676 Q
(0\))126 688 Q EP
%%Page: 71 71
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-7)293.004 48 S 3(1-)306 48 S/F1 10/Courier@0 SF
(#S\(PARTICLE X 0.5941152572631836 Y 88.83160400390625 X0 0.0 Y0 0.0)126 84 Q
(WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 0 BOX-MARK NIL ID 657 PROCESSOR)126 96 Q
(0\))126 108 Q
(#S\(PARTICLE X 0.6241321563720703 Y 70.14872741699219 X0 0.0 Y0 0.0)126 120 Q
(WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 0 BOX-MARK NIL ID 411 PROCESSOR)126 132 Q
(0\))126 144 Q/F2 12/Courier@0 SF(>)126 158 Q F0
(4\) Now we can assign the corresponding x-bin number to each particle)90 186 Q
F2 7.2(>\()126 214 S(*setf \(particle-x-bin!! particles\))147.6 214 Q
(\(truncate!! \(/!! \(particle-x!! particles\))190.8 228 Q
(\(!! x-bin-width\)\)\)\))313.2 242 Q(NIL)126 256 Q 7.2(>\()126 270 S
(ppp \(particle-x-bin!! particles\) :end 60\))147.6 270 Q 7.2
(0000000000000000000000000000)126 284 S 7.2(0000000000000011111111111111)126
298 S 7.2(1111)126 312 S 7.2(>\()126 326 S(ppp particles :start 40 :end 44\))
147.6 326 Q F1
(#S\(PARTICLE X 3.070080280303955 Y 3.162992000579834 X0 0.0 Y0 0.0)126 338 Q
(WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 0 BOX-MARK NIL ID 629 PROCESSOR)126 350 Q
(0\))126 362 Q
(#S\(PARTICLE X 3.1198859214782715 Y 21.63579559326172 X0 0.0 Y0 0.0)126 374 Q
(WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 0 BOX-MARK NIL ID 205 PROCESSOR)126 386 Q
(0\))126 398 Q
(#S\(PARTICLE X 3.1573891639709473 Y 19.115447998046875 X0 0.0 Y0)126 410 Q
(0.0 WORK1 0.0 WORK2 0.0 X-BIN 1 Y-BIN 0 BOX-MARK NIL ID 643)126 422 Q
(PROCESSOR 0\))126 434 Q
(#S\(PARTICLE X 3.1862616539001465 Y 47.397422790527344 X0 0.0 Y0)126 446 Q
(0.0 WORK1 0.0 WORK2 0.0 X-BIN 1 Y-BIN 0 BOX-MARK NIL ID 186)126 458 Q
(PROCESSOR 0\))126 470 Q F2(>)126 484 Q F0 1.815(5\) This stream of zeroes and\
 ones can now be converted into a suitable segmentation)90 512 R .838(mask as \
follows. First produce a new stream of zeroes and ones which is shifted)126 526
R 2.124(by one place to the right. W)126 540 R 5.124(ec)-.96 G 2.124
(an use our)287.208 540 R F2(segmented-news!!)5.124 E F0 2.124(or standard)
5.124 F(NEWS to achieve that)126 554 Q F2 7.2(>\()126 582 S
(defpvar shifted-x-bin)147.6 582 Q(\(segmented-news!!)205.2 596 Q
(\(particle-x-bin!! particles\))205.2 610 Q
(\(=!! \(self-address!!\) \(!! 0\)\))205.2 624 Q(:border-pvar \(!! -1\)\)\))
205.2 638 Q(SHIFTED-X-BIN)126 652 Q 7.2(>\()126 666 S
(ppp shifted-x-bin :end 5\))147.6 666 Q(-1 0 0 0 0)126 680 Q EP
%%Page: 72 72
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-7)293.004 50 S 3(2-)306 50 S/F1 12/Courier@0 SF 7.2
(>\()126 86 S(ppp shifted-x-bin :start 40 :end 44\))147.6 86 Q 7.2(0001)126 100
S(>)126 114 Q F0 2.383(6\) The mask which marks the \214rst particle in each)90
142 R F1(x-bin)5.382 E F0 2.382(can now be obtained by)5.382 F(comparing)126
156 Q F1(shifted-x-bin)187.524 156 Q F0(with the contents of the)3 E F1(x-bin)3
E F0(slot:)3 E F1 7.2(>\()126 184 S(defpvar x-bin-mark)147.6 184 Q
(\(/=!! \(particle-x-bin!! particles\))205.2 198 Q(shifted-x-bin\)\))248.4 212
Q(X-BIN-MARK)126 226 Q 7.2(>\()126 240 S(ppp \(particle-x-bin!! particles\))
147.6 240 Q(:start 40 :end 44\))176.4 254 Q 7.2(0011)126 268 S 7.2(>\()126 282
S(ppp x-bin-mark :start 40 :end 44\))147.6 282 Q(NIL NIL T NIL)126 296 Q(>)126
310 Q F0 .566(7\) Now we can sort again particles in y-direction, but this tim\
e the sort will be restricted)90 338 R(to the)126 352 Q F1(x-bin)3 E F0
(segments)3 E F1 7.2(>\()126 380 S(*setf particles)147.6 380 Q
(\(sort!! particles '<=!! :key 'particle-y!!)169.2 394 Q
(:segment-pvar x-bin-mark\)\))219.6 408 Q/F2 6/Courier@0 SF(;;; Looking for fi\
le-set starlisp-bignums-f7600 directory definition in /usr/starlisp/starlisp-)
126 436 Q(f7600/dfs/starlisp-bignums-f7600.dfs)126 444 Q(;;; Loading source fi\
le "/usr/starlisp/starlisp-f7600/dfs/starlisp-bignums-f7600.dfs")126 452 Q
(;;; File-set directory for starlisp-bignums-f7600 defined.)126 460 Q(;;; Look\
ing for def-file-set starlisp-bignums-f7600 in /usr/starlisp/starlisp-f7600/li\
b/starlisp/bignums/def-)126 468 Q(file-set.lisp)126 476 Q(;;; Loading source f\
ile "/usr/starlisp/starlisp-f7600/lib/starlisp/bignums/def-file-set.lisp")126
484 Q(;;; File-set starlisp-bignums-f7600 defined.)126 492 Q(;;; Loading binar\
y file "/usr/starlisp/starlisp-f7600/lib/starlisp/bignums/compiler-settings.sb\
in41x")126 500 Q(;;; Compiler settings: Safety 0, Warning Level :HIGH)126 516 Q
(;;; Loading binary file "/usr/starlisp/starlisp-f7600/lib/starlisp/bignums/bi\
gnum-utilities.sbin41x")126 524 Q(;;; Loading binary file "/usr/starlisp/starl\
isp-f7600/lib/starlisp/bignums/bignum-globals.sbin41x")126 532 Q(;;; Loading b\
inary file "/usr/starlisp/starlisp-f7600/lib/starlisp/bignums/bignum-arithmeti\
c.sbin41x")126 540 Q(;;; Loading binary file "/usr/starlisp/starlisp-f7600/lib\
/starlisp/bignums/bignum-predicates.sbin41x")126 548 Q(;;; Loading binary file\
 "/usr/starlisp/starlisp-f7600/lib/starlisp/bignums/bignum-logic.sbin41x")126
556 Q(;;; Loading binary file "/usr/starlisp/starlisp-f7600/lib/starlisp/bignu\
ms/bignum-comparisons.sbin41x")126 564 Q(;;; Loading binary file "/usr/starlis\
p/starlisp-f7600/lib/starlisp/bignums/bignum-send.sbin41x")126 572 Q(;;; Loadi\
ng binary file "/usr/starlisp/starlisp-f7600/lib/starlisp/bignums/bignum-scan.\
sbin41x")126 580 Q F1(NIL)126 594 Q(>)126 608 Q F0 .063(Observe that this time\
 *Lisp dynamically loaded additional libraries. This time we)126 636 R(run)126
650 Q F1(sort!!)6.783 E F0 3.783
(with the segmentation mask for the \214rst time. Like)6.783 F F1(scan!!)6.784
E(sort!!)126 664 Q F0
(can also carry out operations restricted to the segments of a)3 E F1(pvar)3 E
F0(.)A(8\) After sorting our particles look as follows:)90 678 Q EP
%%Page: 73 73
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-7)293.004 50 S 3(3-)306 50 S/F1 12/Courier@0 SF 7.2
(>\()126 86 S(ppp particles :end 5\))147.6 86 Q/F2 10/Courier@0 SF
(#S\(PARTICLE X 3.070080280303955 Y 3.162992000579834 X0 0.0 Y0 0.0)126 98 Q
(WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 0 BOX-MARK NIL ID 629 PROCESSOR)126 110 Q
(0\))126 122 Q
(#S\(PARTICLE X 1.9780397415161133 Y 4.0868401527404785 X0 0.0 Y0)126 134 Q
(0.0 WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 0 BOX-MARK NIL ID 978)126 146 Q
(PROCESSOR 0\))126 158 Q
(#S\(PARTICLE X 0.8625507354736328 Y 5.395853519439697 X0 0.0 Y0 0.0)126 170 Q
(WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 0 BOX-MARK NIL ID 280 PROCESSOR)126 182 Q
(0\))126 194 Q
(#S\(PARTICLE X 1.62581205368042 Y 5.515110492706299 X0 0.0 Y0 0.0)126 206 Q
(WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 0 BOX-MARK NIL ID 839 PROCESSOR)126 218 Q
(0\))126 230 Q
(#S\(PARTICLE X 2.370011806488037 Y 5.751502513885498 X0 0.0 Y0 0.0)126 242 Q
(WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 0 BOX-MARK NIL ID 390 PROCESSOR)126 254 Q
(0\))126 266 Q F1(>)126 280 Q F0 .176
(They have been now sorted in the y direction, but they became again disor)126
308 R(ganised)-.216 E(in the x direction. However)126 322 Q 3(,t)-.48 G
(hey still remain within their original x bins:)266.496 322 Q F1 7.2(>\()126
350 S(ppp particles :start 40 :end 44\))147.6 350 Q F2
(#S\(PARTICLE X 0.5941152572631836 Y 88.83160400390625 X0 0.0 Y0 0.0)126 362 Q
(WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 0 BOX-MARK NIL ID 657 PROCESSOR)126 374 Q
(0\))126 386 Q
(#S\(PARTICLE X 0.8997678756713867 Y 95.01298522949219 X0 0.0 Y0 0.0)126 398 Q
(WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 0 BOX-MARK NIL ID 136 PROCESSOR)126 410 Q
(0\))126 422 Q
(#S\(PARTICLE X 4.607486724853516 Y 1.3324618339538575 X0 0.0 Y0 0.0)126 434 Q
(WORK1 0.0 WORK2 0.0 X-BIN 1 Y-BIN 0 BOX-MARK NIL ID 930 PROCESSOR)126 446 Q
(0\))126 458 Q
(#S\(PARTICLE X 3.5369038581848145 Y 10.4466552734375 X0 0.0 Y0 0.0)126 470 Q
(WORK1 0.0 WORK2 0.0 X-BIN 1 Y-BIN 0 BOX-MARK NIL ID 812 PROCESSOR)126 482 Q
(0\))126 494 Q F1(>)126 508 Q F0 .027(9\) Now we can assign the)90 536 R F1
(y-bin)3.027 E F0 .027(numbers to all particles knowing that they already have)
3.027 F(their)126 550 Q F1(x-bin)3 E F0(numbers in place)3 E F1 7.2(>\()126 578
S(*setf \(particle-y-bin!! particles\))147.6 578 Q(\(truncate!!)190.8 592 Q
(\(/!! \(particle-y!! particles\))205.2 606 Q(\(!! y-bin-width\)\)\)\))241.2
620 Q(NIL)126 634 Q 7.2(>\()126 648 S
(ppp \(particle-y-bin!! particles\) :end 80\))147.6 648 Q 7.2(111112366781)126
662 S 7.2(11)291.6 662 S 7.2(11)313.2 662 S 7.2(21)334.8 662 S 7.2(21)356.4 662
S 7.2(31)378 662 S 7.2(51)399.6 662 S 7.2(82)421.2 662 S 7.2(02)442.8 662 S 7.2
(02)464.4 662 S 7.2(12)486 662 S(1)507.6 662 Q
(22 22 22 23 23 23 23 24 24 25 26 26 26 26 26 26 28 28)126 676 Q
(28 30 0 3 3 4 4 4 5 6 6 6 6 8 9 10 11 11 15 16 17 18 18)126 690 Q
(18 19 20 22 22 24 24 24 26 27 31 31 1 2 2 2 3)126 704 Q EP
%%Page: 74 74
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-7)293.004 50 S 3(4-)306 50 S/F1 12/Courier@0 SF(>)
126 86 Q F0 2.291(10\) W)90 114 R 5.291(ec)-.96 G 2.291(an now again produce)
137.602 114 R F1(T)5.291 E F0 2.291(marks for the)5.291 F F1(y-bins)5.291 E F0
2.292(in the same way we have)5.291 F(already done it for the)126 128 Q F1
(x-bins:)3 E 7.2(>\()126 156 S(defpvar y-bin-mark)147.6 156 Q
(\(*let \(\(shifted-y-bin-mark)154.8 170 Q(\(segmented-news!!)219.6 184 Q
(\(particle-y-bin!! particles\))234 198 Q(x-bin-mark)234 212 Q
(:border-pvar \(!! -1\)\)\)\))234 226 Q(\(/=!! \(particle-y-bin!! particles\))
176.4 240 Q(shifted-y-bin-mark\)\))219.6 254 Q(boolean\))154.8 268 Q
(Y-BIN-MARK)126 282 Q 7.2(>\()126 296 S(ppp y-bin-mark :end 60\))147.6 296 Q
7.2(TN)126 310 S(IL NIL NIL NIL T T T NIL T T T NIL T NIL T T T T NIL)147.6 310
Q 7.2(TN)126 324 S(IL T NIL NIL T NIL NIL NIL T NIL T T NIL NIL NIL NIL)147.6
324 Q(NIL T NIL NIL T T T NIL T NIL NIL T T NIL NIL NIL T T T)126 338 Q 7.2(TN)
126 352 S(IL T T)147.6 352 Q(>)126 366 Q F0 .34(Because we have created)126 394
R F1(y-bin-mark)3.34 E F0 .34(on top of the)3.34 F F1(x-bin-mark)3.341 E F0
.341(\(which was)3.341 F .002(used to roll-in -1 in its own locations)126 408 R
F1(y-bin-mark)3.002 E F0 .001(in fact marks the \214rst particle)3.002 F
(in an xy-bin. Hence)126 422 Q F1 7.2(>\()126 450 S
(*setf \(particle-box-mark!! particles\) y-bin-mark\))147.6 450 Q(NIL)126 464 Q
7.2(>\()126 478 S(ppp particles :end 10\))147.6 478 Q/F2 6/Courier@0 SF(#S\(PA\
RTICLE X 3.070080280303955 Y 3.162992000579834 X0 0.0 Y0 0.0 WORK1 0.0 WORK2 0\
.0 X-BIN 0 Y-BIN 1 BOX-MARK)126 486 Q 3.6(TI)126 494 S 3.6(D6)136.8 494 S
(29 PROCESSOR 0\))147.6 494 Q(#S\(PARTICLE X 1.9780397415161133 Y 4.0868401527\
404785 X0 0.0 Y0 0.0 WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 1 BOX-)126 502 Q
(MARK NIL ID 978 PROCESSOR 0\))126 510 Q(#S\(PARTICLE X 0.8625507354736328 Y 5\
.395853519439697 X0 0.0 Y0 0.0 WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 1 BOX-)126 518
Q(MARK NIL ID 280 PROCESSOR 0\))126 526 Q(#S\(PARTICLE X 1.62581205368042 Y 5.\
515110492706299 X0 0.0 Y0 0.0 WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 1 BOX-MARK)126
534 Q(NIL ID 839 PROCESSOR 0\))126 542 Q(#S\(PARTICLE X 2.370011806488037 Y 5.\
751502513885498 X0 0.0 Y0 0.0 WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 1 BOX-MARK)126
550 Q(NIL ID 390 PROCESSOR 0\))126 558 Q(#S\(PARTICLE X 2.957797050476074 Y 7.\
583916187286377 X0 0.0 Y0 0.0 WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 2 BOX-MARK)126
566 Q 3.6(TI)126 574 S 3.6(D3)136.8 574 S(38 PROCESSOR 0\))147.6 574 Q(#S\(PAR\
TICLE X 2.962791919708252 Y 12.109363555908204 X0 0.0 Y0 0.0 WORK1 0.0 WORK2 0\
.0 X-BIN 0 Y-BIN 3 BOX-)126 582 Q(MARK T ID 248 PROCESSOR 0\))126 590 Q(#S\(PA\
RTICLE X 0.4670143127441406 Y 20.36408233642578 X0 0.0 Y0 0.0 WORK1 0.0 WORK2 \
0.0 X-BIN 0 Y-BIN 6 BOX-)126 598 Q(MARK T ID 243 PROCESSOR 0\))126 606 Q(#S\(P\
ARTICLE X 3.1198859214782715 Y 21.63579559326172 X0 0.0 Y0 0.0 WORK1 0.0 WORK2\
 0.0 X-BIN 0 Y-BIN 6 BOX-)126 614 Q(MARK NIL ID 205 PROCESSOR 0\))126 622 Q(#S\
\(PARTICLE X 2.2101998329162598 Y 22.547542572021485 X0 0.0 Y0 0.0 WORK1 0.0 W\
ORK2 0.0 X-BIN 0 Y-BIN 7 BOX-)126 630 Q(MARK T ID 372 PROCESSOR 0\))126 638 Q
F1(>)126 652 Q F0 -.444(11)90 680 S 3.165(\)W).444 G 3.165<658c>119.085 680 S
.165(nish sorting particles by assigning the current processor number to each \
particle.)134.25 680 R EP
%%Page: 75 75
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-7)293.004 50 S 3(5-)306 50 S/F1 12/Courier@0 SF 7.2
(>\()126 86 S(*setf \(particle-processor!! particles\))147.6 86 Q
(\(self-address!!\)\))190.8 100 Q(NIL)126 114 Q 7.2(>\()126 128 S
(ppp particles :end 5\))147.6 128 Q/F2 6/Courier@0 SF(#S\(PARTICLE X 3.0700802\
80303955 Y 3.162992000579834 X0 0.0 Y0 0.0 WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 1\
 BOX-MARK)126 136 Q 3.6(TI)126 144 S 3.6(D6)136.8 144 S(29 PROCESSOR 0\))147.6
144 Q(#S\(PARTICLE X 1.9780397415161133 Y 4.0868401527404785 X0 0.0 Y0 0.0 WOR\
K1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 1 BOX-)126 152 Q(MARK NIL ID 978 PROCESSOR 1\))
126 160 Q(#S\(PARTICLE X 0.8625507354736328 Y 5.395853519439697 X0 0.0 Y0 0.0 \
WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 1 BOX-)126 168 Q
(MARK NIL ID 280 PROCESSOR 2\))126 176 Q(#S\(PARTICLE X 1.62581205368042 Y 5.5\
15110492706299 X0 0.0 Y0 0.0 WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 1 BOX-MARK)126
184 Q(NIL ID 839 PROCESSOR 3\))126 192 Q(#S\(PARTICLE X 2.370011806488037 Y 5.\
751502513885498 X0 0.0 Y0 0.0 WORK1 0.0 WORK2 0.0 X-BIN 0 Y-BIN 1 BOX-MARK)126
200 Q(NIL ID 390 PROCESSOR 4\))126 208 Q F1(>)126 222 Q/F3 12/Times-Bold@0 SF
(Summary)75 250 Q F0(1\) Parallel structures on the CM are de\214ned using)90
278 Q F1(*defstruct)3 E F0(macro.)3 E 1.421
(2\) The creator and accessor functions for parallel structures have the suf)90
292 R 1.421(\214x ")-.216 F F1(!!)A F0 4.421(". The)B(macro)126 306 Q F1
(*defstruct)3.809 E F0 .809
(also generates creation and accessor functions on the front)3.809 F(end.)126
320 Q(3\) Function)90 334 Q F1(sort!!)3 E F0
(can sort on relation and on a speci\214ed structure slot.)3 E(4\) Function)90
348 Q F1(sort!!)3 E F0(can be restricted to work within segments only)3 E(.)
-.78 E EP
%%Page: 76 76
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-7)293.004 50 S 3(6-)306 50 S/F1 16/Times-Roman@0 SF
(Lesson 12)273.336 90 Q(Using the Router)251.336 108 Q/F2 12/Times-Bold@0 SF
(Mapping data fr)75 144 Q(om particles to boxes)-.216 E F0 .267(1\) Once we ha\
ve the particles sorted it would be nice to be able to map them onto the 2D)90
172 R 1.219(grid which corresponds to our xy-bins. In order to do that we have\
 to introduce)126 186 R .896
(the new geometry of the processor lay-out. The current geometry is linear)126
200 R 3.896(.W)-.66 G(hat)507.336 200 Q
(we want is the 2D geometry of a 2D grid.)126 214 Q/F3 12/Courier@0 SF 7.2(>\()
126 242 S(def-vp-set box-geometry \(list number-of-x-bins)147.6 242 Q
(number-of-y-bins\)\))363.6 256 Q(NIL)126 270 Q F0(2\) Now let us de\214ne two\
 variables which will have this particular geometry)90 298 Q F3 7.2(>\()126 326
S(*proclaim '\(type \(pvar fixnum box-geometry\))147.6 326 Q
(*first-particle-in-box*)212.4 340 Q(*number-of-particles-in-box*\)\))212.4 354
Q(NIL)126 368 Q 7.2(>\()126 382 S(*defvar *first-particle-in-box*)147.6 382 Q
(\(!! -1\) nil box-geometry\))205.2 396 Q(*FIRST-PARTICLE-IN-BOX*)126 410 Q 7.2
(>\()126 424 S(*defvar *number-of-particles-in-box*)147.6 424 Q
(\(!! 0\) nil box-geometry\))205.2 438 Q(*NUMBER-OF-PARTICLES-IN-BOX*)126 452 Q
(>)126 466 Q F0(These two variables are 2D)126 494 Q F3 7.2(>\()126 522 S
(ppp *first-particle-in-box*)147.6 522 Q(:mode :grid :end '\(5 5\)\))176.4 536
Q(DIMENSION 0 \(X\))162 564 Q(----->)284.4 564 Q(-1 -1 -1 -1 -1)126 592 Q
(-1 -1 -1 -1 -1)126 606 Q(-1 -1 -1 -1 -1)126 620 Q(-1 -1 -1 -1 -1)126 634 Q
(-1 -1 -1 -1 -1)126 648 Q(>)126 662 Q F0 5.19
(3\) Now we can transfer the processor number which resides in)90 690 R F3
(\(particle-)8.189 E 7.2(processor!! particles\))126 704 R F0
(for particles marked with)3 E F3(T)3 E F0(in)3 E F3 .688
(\(particle-box-mark!! particles\))162 718 R F0(to)7.888 E F3(*first-particle-)
3.688 E(in-box*.)126 732 Q F0 .835(This transfer is dif)3.835 F .835
(\214cult because we have to move data between two)-.216 F EP
%%Page: 77 77
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-7)293.004 50 S 3(7-)306 50 S .551
(data sets which are layed-out in dif)126 86 R .551
(ferent ways. This operation involves using the)-.216 F(router)126 100 Q(.)-.66
E/F1 12/Courier@0 SF 7.2(>\()126 128 S(*when \(particle-box-mark!! particles\))
147.6 128 Q(\(*let \(\(address-pvar)154.8 142 Q(\(cube-from-vp-grid-address!!)
219.6 156 Q(box-geometry)241.2 170 Q(\(particle-x-bin!! particles\))241.2 184 Q
(\(particle-y-bin!! particles\)\)\)\))241.2 198 Q(\(*pset)169.2 212 Q
(:no-collisions)190.8 226 Q(\(particle-processor!! particles\))190.8 240 Q
(*first-particle-in-box* address-pvar\)\)\))190.8 254 Q(NIL)126 268 Q 7.2(>\()
126 282 S(ppp *first-particle-in-box* :mode :grid)147.6 282 Q(:end '\(5 5\)\))
176.4 296 Q(DIMENSION 0 \(X\))162 324 Q(----->)284.4 324 Q(-1 42 -1 112 -1)126
352 Q 7.2(0-)126 366 S 7.2(17)147.6 366 S 7.2(51)169.2 366 S(15 148)190.8 366 Q
7.2(5-)126 380 S 7.2(17)147.6 380 S 7.2(61)169.2 380 S(17 150)190.8 380 Q 7.2
(64)126 394 S 7.2(37)147.6 394 S 7.2(9-)169.2 394 S 7.2(11)190.8 394 S(51)212.4
394 Q(-1 45 81 120 152)126 408 Q 7.2(>\()126 422 S(ppp particles :end 5\))147.6
422 Q/F2 8/Courier@0 SF(#S\(PARTICLE X 3.070080280303955 Y 3.162992000579834 X\
0 0.0 Y0 0.0 WORK1 0.0 WORK2)126 432 Q
(0.0 X-BIN 0 Y-BIN 1 BOX-MARK T ID 629 PROCESSOR 0\))126 442 Q(#S\(PARTICLE X \
1.9780397415161133 Y 4.0868401527404785 X0 0.0 Y0 0.0 WORK1 0.0)126 452 Q
(WORK2 0.0 X-BIN 0 Y-BIN 1 BOX-MARK NIL ID 978 PROCESSOR 1\))126 462 Q(#S\(PAR\
TICLE X 0.8625507354736328 Y 5.395853519439697 X0 0.0 Y0 0.0 WORK1 0.0 WORK2)
126 472 Q(0.0 X-BIN 0 Y-BIN 1 BOX-MARK NIL ID 280 PROCESSOR 2\))126 482 Q(#S\(\
PARTICLE X 1.62581205368042 Y 5.515110492706299 X0 0.0 Y0 0.0 WORK1 0.0 WORK2)
126 492 Q(0.0 X-BIN 0 Y-BIN 1 BOX-MARK NIL ID 839 PROCESSOR 3\))126 502 Q(#S\(\
PARTICLE X 2.370011806488037 Y 5.751502513885498 X0 0.0 Y0 0.0 WORK1 0.0 WORK2)
126 512 Q(0.0 X-BIN 0 Y-BIN 1 BOX-MARK NIL ID 390 PROCESSOR 4\))126 522 Q F1(>)
126 536 Q F0 4.508(4\) In order to put data in)90 564 R F1
(*number-of-particles-in-box*)7.509 E F0 4.509(we must \214rst)7.509 F 1.443(c\
alculate how many particles there are in every box. This is easily achieved by)
126 578 R .596(summing up ")126 592 R F1(1)A F0 3.596("w)C .597
(ithin segments in the backward mode \(so that the result sits in)219.12 592 R
(the location marked with ")126 606 Q F1(T)A F0 3("\) for)B(all particles:)3 E
F1 7.2(>\()126 634 S(defpvar segmented-sums \(!! 0\) fixnum\))147.6 634 Q
(SEGMENTED-SUMS)126 648 Q 7.2(>\()126 662 S(*setf segmented-sums)147.6 662 Q
(\(scan!! \(!! 1\) '+!! :segment-pvar)190.8 676 Q
(\(particle-box-mark!! particles\))248.4 690 Q EP
%%Page: 78 78
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-7)293.004 50 S 3(8-)306 50 S/F1 12/Courier@0 SF
(:direction :backward)248.4 86 Q(:segment-mode :segment)248.4 100 Q
(:include-self t\)\))248.4 114 Q(NIL)126 128 Q 7.2(>\()126 142 S
(ppp segmented-sums :end 60\))147.6 142 Q 7.2(5432111211121211112121321432)126
156 S 7.2(1211654321321112132114321111)126 170 S 7.2(2111)126 184 S 7.2(>\()126
198 S(ppp \(particle-box-mark!! particles\) :end 60\))147.6 198 Q 7.2(TN)126
212 S(IL NIL NIL NIL T T T NIL T T T NIL T NIL T T T T NIL)147.6 212 Q 7.2(TN)
126 226 S(IL T NIL NIL T NIL NIL NIL T NIL T T NIL NIL NIL NIL)147.6 226 Q
(NIL T NIL NIL T T T NIL T NIL NIL T T NIL NIL NIL T T T)126 240 Q 7.2(TN)126
254 S(IL T T)147.6 254 Q(>)126 268 Q F0 3.938
(5\) Now we can transfer the lengths from)90 296 R F1(segmented-sums)6.939 E F0
(to)6.939 E F1(*number-of-)6.939 E(particles-in-box*)126 310 Q F0 .222
(the same way we've done it for)3.222 F F1(*first-particle-)3.222 E(in-box*)126
324 Q 7.2(>\()126 352 S(*when \(particle-box-mark!! particles\))147.6 352 Q
(\(*let \(\(address-pvar \(cube-from-vp-grid-address!!)154.8 366 Q
(box-geometry)255.6 380 Q(\(particle-x-bin!! particles\))255.6 394 Q
(\(particle-y-bin!! particles\)\)\)\))255.6 408 Q
(\(*pset :no-collisions segmented-sums *number-of-)169.2 422 Q
(particles-in-box*)126 436 Q(address-pvar\)\)\))198 450 Q(NIL)126 464 Q(>)126
478 Q/F2 12/Times-Bold@0 SF(Printing the contents of a box)75 506 Q F0 .278(1\
\) At this stage we can easily print particles which reside in any box. Below \
is a function)90 534 R .535(which \214nds about the \214rst particle in a give\
n box, then \214nds about the number of)126 548 R
(particles in that box and \214nally prints all particles in that box:)126 562
Q F1(\(defun print-particles \(particle-pvar x-bin y-bin\))126 590 Q
(\(let \(\(length)140.4 604 Q(\(pref *number-of-particles-in-box*)198 618 Q
(\(cube-from-vp-grid-address)241.2 632 Q(box-geometry x-bin y-bin\)\)\))255.6
646 Q(\(first-particle)183.6 660 Q(\(pref *first-particle-in-box*)198 674 Q
(\(cube-from-vp-grid-address)241.2 688 Q EP
%%Page: 79 79
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-7)293.004 50 S 3(9-)306 50 S/F1 12/Courier@0 SF
(box-geometry x-bin y-bin\)\)\)\))255.6 86 Q(\(dotimes \(i length\))154.8 100 Q
(\(format t "~&~a")169.2 114 Q(\(pref particle-pvar)226.8 128 Q
(\(+ first-particle i\)\)\)\)\)\))270 142 Q/F2 10/Courier@0 SF 6(>\()126 170 S
(ppp *number-of-particles-in-box* :mode :grid :end '\(10 10\)\))144 170 Q/F3 8
/Courier@0 SF(DIMENSION 0 \(X\))150 194 Q(----->)9.6 E 4.8(0301111110)126 214 S
4.8(1010132120)126 224 S 4.8(2111213010)126 234 S 4.8(1030002011)126 244 S 4.8
(2000011131)126 254 S 4.8(1200100000)126 264 S 4.8(2010130320)126 274 S 4.8
(0131020020)126 284 S 4.8(2231020001)126 294 S 4.8(1011010011)126 304 S F2 6
(>\()126 316 S(print-particles particles 5 1\))144 316 Q F3(#S\(PARTICLE X 15.\
642749786376954 Y 3.9786696434020996 X0 0.0 Y0 0.0 WORK1 0.0)126 326 Q
(WORK2 0.0 X-BIN 5 Y-BIN 1 BOX-MARK T ID 31 PROCESSOR 171\))126 336 Q(#S\(PART\
ICLE X 16.999805450439453 Y 4.175364971160889 X0 0.0 Y0 0.0 WORK1 0.0 WORK2)126
346 Q(0.0 X-BIN 5 Y-BIN 1 BOX-MARK NIL ID 473 PROCESSOR 172\))126 356 Q(#S\(PA\
RTICLE X 15.692747116088868 Y 5.684483051300049 X0 0.0 Y0 0.0 WORK1 0.0 WORK2)
126 366 Q(0.0 X-BIN 5 Y-BIN 1 BOX-MARK NIL ID 676 PROCESSOR 173\))126 376 Q F2
(NIL)126 388 Q 6(>\()126 400 S(print-particles particles 6 3\))144 400 Q F3(#S\
\(PARTICLE X 18.824827194213867 Y 10.890901565551758 X0 0.0 Y0 0.0 WORK1 0.0)
126 410 Q(WORK2 0.0 X-BIN 6 Y-BIN 3 BOX-MARK T ID 702 PROCESSOR 212\))126 420 Q
(#S\(PARTICLE X 21.394872665405274 Y 10.925054550170899 X0 0.0 Y0 0.0 WORK1 0.\
0)126 430 Q(WORK2 0.0 X-BIN 6 Y-BIN 3 BOX-MARK NIL ID 1015 PROCESSOR 213\))126
440 Q F2(NIL)126 452 Q/F4 12/Times-Bold@0 SF
(Calculating density using the Monaghan-Lattanzio weighting function)75 476 Q
F0 .537(1\) Below is a de\214nition of a parallel function called)90 504 R F1
(joes-kernel!!)3.537 E F0 .537(which computes)3.537 F
(the value of the Monaghan-Lattanzio weighting function for each particle:)126
518 Q F1(\(defun joes-kernel!! \(r h\))126 546 Q
("Compute Monaghan-Lattanzio kernel. r is the radius,)140.4 560 Q
(and h is the smoothing length.")126 574 Q(\(*let \(\(r-by-h \(/!! r h\)\))
140.4 588 Q(\(one-by-pi-h-cube \(/!! \(!! 1.0\))190.8 602 Q
(\(!! pi\) h h h\)\)\))356.4 616 Q(\(cond!!\(\(<!! r h\))154.8 630 Q
(\(*let \(\(second-term)212.4 644 Q(\(-!! \(*!! \(!! 1.5\))277.2 658 Q
(r-by-h r-by-h\)\)\))349.2 672 Q(\(third-term)262.8 686 Q EP
%%Page: 80 80
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-8)293.004 50 S 3(0-)306 50 S/F1 12/Courier@0 SF
(\(*!! \(!! 0.75\) r-by-h)277.2 86 Q(r-by-h r-by-h\)\)\))313.2 100 Q
(\(*!! one-by-pi-h-cube)226.8 114 Q(\(+!! \(!! 1.0\))262.8 128 Q
(second-term third-term\)\)\)\))298.8 142 Q(\(\(<!! r \(*!! \(!! 2.0\) h\)\))
205.2 156 Q(\(*let \(\(two-less-r-by-h)212.4 170 Q
(\(-!! \(!! 2.0\) r-by-h\)\)\))277.2 184 Q(\(*!! one-by-pi-h-cube)226.8 198 Q
(\(!! 0.25\) two-less-r-by-h)262.8 212 Q(two-less-r-by-h two-less-r-by-h\)\)\))
262.8 226 Q(\(t \(!! 0.0\)\)\)\)\))205.2 240 Q F0
(Here is how this function works)126 268 Q F1 7.2(>\()126 296 S
(ppp \(joes-kernel!! \(!! 0.0\) \(!! 1.0\)\) :end 3\))147.6 296 Q
(0.31830987334251404 0.31830987334251404)126 310 Q(0.31830987334251404)126 324
Q 7.2(>\()126 338 S(ppp \(joes-kernel!! \(!! 1.0\) \(!! 1.0\)\) :end 3\))147.6
338 Q(0.07957746833562851 0.07957746833562851)126 352 Q(0.07957746833562851)126
366 Q 7.2(>\()126 380 S(ppp \(joes-kernel!! \(!! 2.0\) \(!! 1.0\)\) :end 3\))
147.6 380 Q(0.0 0.0 0.0)126 394 Q F0 .314(2\) W)90 422 R 3.314(ec)-.96 G .313(\
an use this function in order to compute contributions the particles will make\
 to a)127.648 422 R(point located exactly in the middle of each box. Let us \
\214rst de\214ne that point:)126 436 Q F1
(\(*proclaim '\(type \(pvar single-float box-geometry\))126 464 Q
(centres-of-boxes-x\)\))298.8 478 Q(NIL)126 492 Q 7.2(>\()126 506 S
(*defvar centres-of-boxes-x 0.0\))147.6 506 Q(CENTRES-OF-BOXES-X)126 520 Q 7.2
(>\()126 534 S(*proclaim '\(type \(pvar single-float box-geometry\))147.6 534 Q
(centres-of-boxes-y\)\))313.2 548 Q(NIL)126 562 Q 7.2(>\()126 576 S
(*defvar centres-of-boxes-y 0.0\))147.6 576 Q(CENTRES-OF-BOXES-Y)126 590 Q F0
1.24(At this stage we just have the variables in place but nothing interesting\
 in them)126 618 R(yet. Now)126 632 Q 3(,h)-.78 G(old on to your seats...)
181.212 632 Q F1 7.2(>\()126 660 S(*with-vp-set box-geometry)147.6 660 Q
(\(*set centres-of-boxes-x)140.4 674 Q(\(+!! \(*!!)162 688 Q EP
%%Page: 81 81
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-8)293.004 50 S 3(1-)306 50 S/F1 12/Courier@0 SF
(\(grid-from-vp-cube-address!!)212.4 86 Q
(box-geometry \(self-address!!\) \(!! 0\)\))234 100 Q(\(!! x-bin-width\)\))
212.4 114 Q(\(/!! \(!! x-bin-width\) \(!! 2.0\)\)\)\))198 128 Q
(\(*set centres-of-boxes-y)140.4 142 Q(\(+!! \(*!!)162 156 Q
(\(grid-from-vp-cube-address!!)212.4 170 Q
(box-geometry \(self-address!!\) \(!! 1\)\))234 184 Q(\(!! y-bin-width\)\))
212.4 198 Q(\(/!! \(!! y-bin-width\) \(!! 2.0\)\)\)\)\))198 212 Q(NIL)126 226 Q
7.2(>\()126 240 S(ppp centres-of-boxes-x :mode :grid :end '\(5 5\)\))147.6 240
Q(DIMENSION 0 \(X\))162 268 Q(----->)284.4 268 Q
(1.5625 4.6875 7.8125 10.9375 14.0625)126 296 Q
(1.5625 4.6875 7.8125 10.9375 14.0625)126 310 Q
(1.5625 4.6875 7.8125 10.9375 14.0625)126 324 Q
(1.5625 4.6875 7.8125 10.9375 14.0625)126 338 Q
(1.5625 4.6875 7.8125 10.9375 14.0625)126 352 Q 7.2(>\()126 366 S
(ppp centres-of-boxes-y :mode :grid :end '\(5 5\)\))147.6 366 Q
(DIMENSION 0 \(X\))162 394 Q(----->)284.4 394 Q
(1.5625 1.5625 1.5625 1.5625 1.5625)126 422 Q
(4.6875 4.6875 4.6875 4.6875 4.6875)126 436 Q
(7.8125 7.8125 7.8125 7.8125 7.8125)126 450 Q
(10.9375 10.9375 10.9375 10.9375 10.9375)126 464 Q
(14.0625 14.0625 14.0625 14.0625 14.0625)126 478 Q F0 2.714(3\) In order to be\
 able to carry out further computations we must transfer these to)90 506 R F1
2.418(\(particle-x0!! particles\))126 520 R F0(and)5.418 E F1 2.418
(\(particle-y0!! particles\))5.418 F F0(.)A 2.185
(Note that we could easily compute both for each particle by operating on the)
126 534 R F1(particles)126 548 Q F0 1.018
(pvar itself. But in this case we additionally learn how to pass data)4.018 F
.582(from grid to particles \(we've done it so far only in the opposite direct\
ion\). Let us)126 562 R(\214rst transfer)126 576 Q F1(centres-of-boxes-x)3 E F0
(to)3 E F1(x0)3 E F0(:)A F1 7.2(>\()126 604 S(*with-vp-set box-geometry)147.6
604 Q(\(*when \(>!! *number-of-particles-in-box* \(!! 0\)\))140.4 618 Q
(\(*pset :no-collisions centres-of-boxes-x)154.8 632 Q
(\(alias!! \(particle-x0!! particles\)\))183.6 646 Q(*first-particle-in-box*)
183.6 660 Q(:vp-set *default-vp-set*\))183.6 674 Q
(\(*pset :no-collisions centres-of-boxes-y)154.8 688 Q EP
%%Page: 82 82
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-8)293.004 50 S 3(2-)306 50 S/F1 12/Courier@0 SF
(\(alias!! \(particle-y0!! particles\)\))183.6 86 Q(*first-particle-in-box*)
183.6 100 Q(:vp-set *default-vp-set*\)\)\))183.6 114 Q(NIL)126 128 Q 7.2(>\()
126 142 S(ppp *number-of-particles-in-box* :mode :grid)147.6 142 Q
(:end '\(10 10\)\))176.4 156 Q/F2 10/Courier@0 SF(DIMENSION 0 \(X\))156 184 Q
(----->)258 184 Q 6(0301111110)126 208 S 6(1010132120)126 220 S 6(2111213010)
126 232 S 6(1030002011)126 244 S 6(2000011131)126 256 S 6(1200100000)126 268 S
6(2010130320)126 280 S 6(0131020020)126 292 S 6(2231020001)126 304 S 6
(1011010011)126 316 S F1 7.2(>\()126 330 S(print-particles particles 5 1\))
147.6 330 Q F2
(#S\(PARTICLE X 15.642749786376954 Y 3.9786696434020996 X0 17.1875)126 342 Q
(Y0 4.6875 WORK1 0.0 WORK2 0.0 X-BIN 5 Y-BIN 1 BOX-MARK T ID 31)126 354 Q
(PROCESSOR 171\))126 366 Q
(#S\(PARTICLE X 16.999805450439453 Y 4.175364971160889 X0 0.0 Y0 0.0)126 378 Q
(WORK1 0.0 WORK2 0.0 X-BIN 5 Y-BIN 1 BOX-MARK NIL ID 473 PROCESSOR)126 390 Q
(172\))126 402 Q
(#S\(PARTICLE X 15.692747116088868 Y 5.684483051300049 X0 0.0 Y0 0.0)126 414 Q
(WORK1 0.0 WORK2 0.0 X-BIN 5 Y-BIN 1 BOX-MARK NIL ID 676 PROCESSOR)126 426 Q
(173\))126 438 Q(NIL)126 450 Q F0 1.677(4\) W)90 474 R 4.677(es)-.96 G 1.677
(ee that we have transferred the data from)129.714 474 R F1(centres-of-boxes-x)
4.677 E F0 1.677(and from)4.677 F F1(centres-of-boxes-y)126 488 Q F0 1.845
(into the locations of the box marks in)4.846 F F1(particles)4.845 E F0(pvar)
126 502 Q 3.506(.B)-.66 G .506
(ut the second, third, and so on particles in each box were not af)161.174 502
R .507(fected. W)-.216 F(e)-.96 E
(now must spread the data from the box mark locations over the segments.)126
516 Q F1 7.2(>\()126 544 S(*setf \(particle-x0!! particles\))147.6 544 Q
(\(scan!! \(particle-x0!! particles\) 'copy!!)169.2 558 Q
(:segment-pvar \(particle-box-mark!!)205.2 572 Q(particles\)\)\))126 586 Q(NIL)
126 600 Q 7.2(>\()126 614 S(*setf \(particle-y0!! particles\))147.6 614 Q
(\(scan!! \(particle-y0!! particles\) 'copy!!)169.2 628 Q
(:segment-pvar \(particle-box-mark!!)205.2 642 Q(particles\)\)\))126 656 Q(NIL)
126 670 Q F0(Let us see the result of these two operations:)126 698 Q EP
%%Page: 83 83
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-8)293.004 50 S 3(3-)306 50 S/F1 12/Courier@0 SF 7.2
(>\()126 86 S(print-particles particles 5 1\))147.6 86 Q/F2 10/Courier@0 SF
(#S\(PARTICLE X 15.642749786376954 Y 3.9786696434020996 X0 17.1875)126 98 Q
(Y0 4.6875 WORK1 0.0 WORK2 0.0 X-BIN 5 Y-BIN 1 BOX-MARK T ID 31)126 110 Q
(PROCESSOR 171\))126 122 Q
(#S\(PARTICLE X 16.999805450439453 Y 4.175364971160889 X0 17.1875 Y0)126 134 Q
(4.6875 WORK1 0.0 WORK2 0.0 X-BIN 5 Y-BIN 1 BOX-MARK NIL ID 473)126 146 Q
(PROCESSOR 172\))126 158 Q
(#S\(PARTICLE X 15.692747116088868 Y 5.684483051300049 X0 17.1875 Y0)126 170 Q
(4.6875 WORK1 0.0 WORK2 0.0 X-BIN 5 Y-BIN 1 BOX-MARK NIL ID 676)126 182 Q
(PROCESSOR 173\))126 194 Q F1(NIL)126 208 Q 7.2(>\()126 222 S
(print-particles particles 6 2\))147.6 222 Q F2
(#S\(PARTICLE X 21.03689956665039 Y 6.321084499359131 X0 20.3125 Y0)126 234 Q
(7.8125 WORK1 0.0 WORK2 0.0 X-BIN 6 Y-BIN 2 BOX-MARK T ID 912)126 246 Q
(PROCESSOR 209\))126 258 Q
(#S\(PARTICLE X 21.653057098388672 Y 8.090567588806153 X0 20.3125 Y0)126 270 Q
(7.8125 WORK1 0.0 WORK2 0.0 X-BIN 6 Y-BIN 2 BOX-MARK NIL ID 981)126 282 Q
(PROCESSOR 210\))126 294 Q
(#S\(PARTICLE X 18.765186309814453 Y 8.745384216308594 X0 20.3125 Y0)126 306 Q
(7.8125 WORK1 0.0 WORK2 0.0 X-BIN 6 Y-BIN 2 BOX-MARK NIL ID 551)126 318 Q
(PROCESSOR 211\))126 330 Q F1(NIL)126 344 Q F0 1.828
(5\) It is now quite trivial to compute the value of Joe')90 372 R 4.827(sk)
-.66 G 1.827(ernel for each particle in the)377.913 372 R 2.336(system. Let us\
 de\214ne the value of the smoothing length \214rst. It can be made)126 386 R
(dif)126 400 Q 1.66
(ferent for every particle within this formalism, but for simplicity we assume)
-.216 F(that)126 414 Q F1 7.2(>\()126 442 S
(defpvar smoothing-length \(!! x-bin-width\) single-)147.6 442 Q(float\))126
456 Q(SMOOTHING-LENGTH)126 470 Q F0 .948(First we calculate the distance betwe\
en any particle and its corresponding centre)126 498 R(of the box)126 512 Q F1
7.2(>\()126 540 S(*setf \(particle-work1!! particles\))147.6 540 Q
(\(*let \(\(dx \(-!! \(particle-x!! particles\))176.4 554 Q
(\(particle-x0!! particles\)\)\))291.6 568 Q
(\(dy \(-!! \(particle-y!! particles\))255.6 582 Q(\(particle-y0!!)320.4 596 Q
(particles\)\)\)\))334.8 610 Q
(\(sqrt!! \(+!! \(*!! dx dx\) \(*!! dy dy\)\)\)\)\))205.2 624 Q(NIL)126 638 Q
7.2(>\()126 652 S(print-particles particles 6 2\))147.6 652 Q F2
(#S\(PARTICLE X 21.03689956665039 Y 6.321084499359131 X0 20.3125 Y0)126 664 Q
(7.8125 WORK1 1.6580334901809693 WORK2 0.0 X-BIN 6 Y-BIN 2 BOX-MARK)126 676 Q 6
(TI)126 688 S 6(D9)144 688 S(12 PROCESSOR 209\))162 688 Q EP
%%Page: 84 84
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-8)293.004 48 S 3(4-)306 48 S/F1 10/Courier@0 SF
(#S\(PARTICLE X 21.653057098388672 Y 8.090567588806153 X0 20.3125 Y0)126 84 Q
(7.8125 WORK1 1.3690927028656006 WORK2 0.0 X-BIN 6 Y-BIN 2 BOX-MARK)126 96 Q
(NIL ID 981 PROCESSOR 210\))126 108 Q
(#S\(PARTICLE X 18.765186309814453 Y 8.745384216308594 X0 20.3125 Y0)126 120 Q
(7.8125 WORK1 1.8067796230316162 WORK2 0.0 X-BIN 6 Y-BIN 2 BOX-MARK)126 132 Q
(NIL ID 551 PROCESSOR 211\))126 144 Q/F2 12/Courier@0 SF(NIL)126 158 Q(>)126
172 Q F0(6\) The next step is to compute the value of Joe')90 200 Q 3(sk)-.66 G
(ernel for every particle)330.972 200 Q F2 7.2(>\()126 228 S
(*setf \(particle-work2!! particles\))147.6 228 Q
(\(joes-kernel!! \(particle-work1!! particles\))169.2 242 Q
(smoothing-length\)\))277.2 256 Q(NIL)126 270 Q 7.2(>\()126 284 S
(print-particles particles 6 2\))147.6 284 Q F1
(#S\(PARTICLE X 21.03689956665039 Y 6.321084499359131 X0 20.3125 Y0)126 296 Q
(7.8125 WORK1 1.6580334901809693 WORK2 0.0071944668889045715 X-BIN)126 308 Q 6
(6Y)126 320 S(-BIN 2 BOX-MARK T ID 912 PROCESSOR 209\))144 320 Q
(#S\(PARTICLE X 21.653057098388672 Y 8.090567588806153 X0 20.3125 Y0)126 332 Q
(7.8125 WORK1 1.3690927028656006 WORK2 0.008085190318524838 X-BIN 6)126 344 Q
(Y-BIN 2 BOX-MARK NIL ID 981 PROCESSOR 210\))126 356 Q
(#S\(PARTICLE X 18.765186309814453 Y 8.745384216308594 X0 20.3125 Y0)126 368 Q
(7.8125 WORK1 1.8067796230316162 WORK2 0.006712291855365038 X-BIN 6)126 380 Q
(Y-BIN 2 BOX-MARK NIL ID 551 PROCESSOR 211\))126 392 Q F2(NIL)126 406 Q(>)126
420 Q F0 .652(7\) In order to calculate, for example, the density \214eld all \
we need to do is to sum up the)90 448 R 1.072(contributions Monaghan-Lattanzio\
 kernels make to the grid points located at the)126 462 R .146
(centre of each box from all particles within that box and beyond. W)126 476 R
3.146(ea)-.96 G .146(gain invoke)465.526 476 R 1.196(the segmented scan operat\
ion in order to do that and then transfer the data onto)126 490 R
(the density \214eld variable which is of the)126 504 Q F2(box-geometry)3 E 7.2
(>\()126 532 S(*proclaim)147.6 532 Q
('\(type \(pvar single-float box-geometry\))154.8 546 Q(density\)\))205.2 560 Q
(NIL)126 574 Q 7.2(>\()126 588 S(*defvar density 0.0\))147.6 588 Q(DENSITY)126
602 Q 7.2(>\()126 616 S(*let \(\(segment-sums)147.6 616 Q(\(scan!!)205.2 630 Q
(\(particle-work2!! particles\) '+!)219.6 644 Q(:segment-pvar)219.6 658 Q
(\(particle-box-mark!! particles\))219.6 672 Q(:direction :backward)219.6 686 Q
EP
%%Page: 85 85
%%BeginPageSetup
BP
%%EndPageSetup
/F0 12/Times-Roman@0 SF 3(-8)293.004 50 S 3(5-)306 50 S/F1 12/Courier@0 SF
(:segment-mode :segment)219.6 86 Q(:include-self t\)\)\))219.6 100 Q
(\(*when \(particle-box-mark!! particles\))154.8 114 Q(\(*let \(\(address-pvar)
169.2 128 Q(\(cube-from-vp-grid-address!!)234 142 Q(box-geometry)270 156 Q
(\(particle-x-bin!! particles\))270 170 Q(\(particle-y-bin!! particles\)\)\)\))
270 184 Q(\(*pset :no-collisions segment-sums)162 198 Q
(density address-pvar\)\)\)\))212.4 212 Q(NIL)126 226 Q 7.2(>\()126 240 S
(ppp density :mode :grid :end '\(5 5\)\))147.6 240 Q/F2 10/Courier@0 SF
(DIMENSION 0 \(X\))156 268 Q(----->)258 268 Q
(0.0 0.024203049018979073 0.0 0.007555817253887653)126 292 Q
(0.008214011788368225)126 304 Q
(0.006345123052597046 0.0 0.008530116640031338 0.0)126 316 Q
(0.005641032941639423)126 328 Q
(0.01436174102127552 0.010306714102625847 0.009300578385591507)126 340 Q
(0.009039076045155526 0.015887316316366196)126 352 Q
(0.008602922782301903 0.0 0.028247637674212456 0.0 0.0)126 364 Q
(0.01587417908012867 0.0 0.0 0.0 0.0)126 376 Q/F3 12/Times-Bold@0 SF(Summary)75
400 Q F0(1\) A new non-default geometry is de\214ned with the function)90 428 Q
F1(def-vp-set)3 E F0(.)A .052(2\) V)90 442 R .052
(ariables of a non-standard geometry have to be specially declared using)-1.332
F F1(*proclaim)3.052 E F0(before they are created with *)126 456 Q F1(defvar)A
F0(\(note, not)3 E F1(defpvar)3 E F0(\).)A .801
(3\) Data can be transferred from one)90 470 R F1(vp-set)3.801 E F0 .802
(to another one using the function)3.801 F F1(*pset)3.802 E F0(.)A
(This function operates the router)126 484 Q(.)-.66 E 1.844(4\) The function)90
498 R F1(*with-vp-set)4.844 E F0 1.843
(will alter the default geometry within its body to a)4.844 F(speci\214ed one.)
126 512 Q EP
%%Trailer
end
%%EOF
